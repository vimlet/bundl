{"version":3,"file":"systemjs.js","sourceRoot":"","sources":["../../../src/loaders/systemjs.ts"],"names":[],"mappings":";AAQA,MAAM,CAAC,cAAc,CAAC,UAAA,OAAO;IAC3B,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC5D,IAAM,SAAS,GAAQ,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;IAEvE,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;QACpC,OAAO,MAAM;aACV,UAAU,CAAC,0CAA0C,CAAC;aACtD,IAAI,CAAC;YACJ,OAAO,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;KACN;SAAM;QAEL,IAAM,UAAQ,GAAG,CAAC,SAAS,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC;QAC5D,OAAO,aAAa,CAAC,UAAQ,CAAC,CAAC;KAChC;IAED,SAAS,aAAa,CAAC,MAAuB;QAC5C,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAEpC,MAAM,CAAC,GAAG,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEvB,OAAO,UAAC,OAAiB;YACvB,MAAM,CAAC,GAAG,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;YACtD,OAAO,OAAO,CAAC,MAAM,CACnB,UAAC,QAAQ,EAAE,KAAK;gBACd,IAAI,QAAQ,EAAE;oBACZ,OAAO,QAAQ,CAAC,IAAI,CAAC,cAAM,OAAA,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAApB,CAAoB,CAAC,CAAC;iBAClD;gBACD,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC,EACI,IAAI,CACV,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["/// <reference types=\"systemjs\"/>\n\n/**\n * A loader script for setting up the SystemJS loader.\n *\n * Note that loader scripts must be simple scripts, not modules.\n */\n\nintern.registerLoader(options => {\n  options.baseURL = options.baseURL || intern.config.basePath;\n  const globalObj: any = typeof window !== 'undefined' ? window : global;\n\n  if (intern.environment === 'browser') {\n    return intern\n      .loadScript('node_modules/systemjs/dist/system.src.js')\n      .then(() => {\n        return configAndLoad(SystemJS);\n      });\n  } else {\n    // Use globalObj to get to require to improve testability\n    const SystemJS = (globalObj.require || require)('systemjs');\n    return configAndLoad(SystemJS);\n  }\n\n  function configAndLoad(loader: typeof SystemJS) {\n    intern.log('Using SystemJS loader');\n\n    intern.log('Configuring SystemJS with:', options);\n    loader.config(options);\n\n    return (modules: string[]) => {\n      intern.log('Loading modules with SystemJS:', modules);\n      return modules.reduce(\n        (previous, suite) => {\n          if (previous) {\n            return previous.then(() => loader.import(suite));\n          }\n          return loader.import(suite);\n        },\n        <any>null\n      );\n    };\n  }\n});\n"]}
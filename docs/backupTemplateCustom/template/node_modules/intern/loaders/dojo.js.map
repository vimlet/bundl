{"version":3,"file":"dojo.js","sourceRoot":"","sources":["../../../src/loaders/dojo.ts"],"names":[],"mappings":";;;;;;;;;;;;AAKA,MAAM,CAAC,cAAc,CAAC,UAAA,OAAO;IAC3B,IAAM,SAAS,GAAQ,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;IAEvE,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC5D,IAAI,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,EAAE;QACzB,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;KACtB;IAED,OAAO,CAAC,GAAG,cACT,kBAAkB,EAAE,IAAI,IACrB,OAAO,CAAC,GAAG,CACf,CAAC;IAEF,MAAM,CAAC,GAAG,CAAC,+BAA+B,EAAE,OAAO,CAAC,CAAC;IACrD,SAAS,CAAC,UAAU,GAAG,OAAO,CAAC;IAE/B,OAAO,MAAM,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC;QACzD,IAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QAClC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAEhC,OAAO,UAAC,OAAiB;YACvB,IAAI,MAA0B,CAAC;YAE/B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,MAAM,GAAG,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAY;oBACxC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAC5B,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAsB,KAAK,CAAC,OAAS,CAAC,CAAC,CAAC;gBAC3D,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;gBACxC,OAAO,CAAC,OAAO,EAAE;oBACf,OAAO,EAAE,CAAC;gBACZ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,IAAI,CACL;gBACE,MAAM,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC,EACD,UAAA,KAAK;gBACH,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;gBAC1B,MAAM,KAAK,CAAC;YACd,CAAC,CACF,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * A loader script for setting up the Dojo loader.\n *\n * Note that loader scripts must be simple scripts, not modules.\n */\nintern.registerLoader(options => {\n  const globalObj: any = typeof window !== 'undefined' ? window : global;\n\n  options.baseUrl = options.baseUrl || intern.config.basePath;\n  if (!('async' in options)) {\n    options.async = true;\n  }\n\n  options.has = {\n    'dojo-timeout-api': true,\n    ...options.has\n  };\n\n  intern.log('Configuring Dojo loader with:', options);\n  globalObj.dojoConfig = options;\n\n  return intern.loadScript('node_modules/dojo/dojo.js').then(() => {\n    const require = globalObj.require;\n    intern.log('Using Dojo loader');\n\n    return (modules: string[]) => {\n      let handle: { remove(): void };\n\n      return new Promise((resolve, reject) => {\n        handle = require.on('error', (error: Error) => {\n          intern.emit('error', error);\n          reject(new Error(`Dojo loader error: ${error.message}`));\n        });\n\n        intern.log('Loading modules:', modules);\n        require(modules, () => {\n          resolve();\n        });\n      }).then<void>(\n        () => {\n          handle.remove();\n        },\n        error => {\n          handle && handle.remove();\n          throw error;\n        }\n      );\n    };\n  });\n});\n"]}
{"version":3,"file":"TeamCity.js","sourceRoot":"","sources":["../../../../src/lib/reporters/TeamCity.ts"],"names":[],"mappings":"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","sourcesContent":["import Reporter, { eventHandler } from './Reporter';\nimport Test from '../Test';\nimport Suite, { isSuite } from '../Suite';\n\n/**\n * This reporter enables Intern to interact with TeamCity.\n * http://confluence.jetbrains.com/display/TCD8/Build+Script+Interaction+with+TeamCity\n *\n * Portions of this module are based on functions from\n * teamcity-service-messages:\n * https://github.com/pifantastic/teamcity-service-messages.\n */\nexport default class TeamCity extends Reporter {\n  _ignoredTestIds:\n    | { [sessionId: string]: { [testId: string]: boolean } }\n    | undefined;\n\n  @eventHandler()\n  runStart() {\n    this._ignoredTestIds = {};\n  }\n\n  @eventHandler()\n  testStart(test: Test) {\n    this._sendMessage('testStarted', {\n      name: test.name,\n      flowId: test.sessionId\n    });\n  }\n\n  @eventHandler()\n  testEnd(test: Test) {\n    if (test.error) {\n      const message: any = {\n        name: test.name,\n        message: this.formatError(test.error),\n        flowId: test.sessionId\n      };\n\n      if (test.error.actual && test.error.expected) {\n        message.type = 'comparisonFailure';\n        message.expected = test.error.expected;\n        message.actual = test.error.actual;\n      }\n\n      this._sendMessage('testFailed', message);\n    } else if (test.skipped) {\n      this._sendMessage('testIgnored', {\n        name: test.name,\n        flowId: test.sessionId\n      });\n    } else {\n      this._sendMessage('testFinished', {\n        name: test.name,\n        duration: test.timeElapsed,\n        flowId: test.sessionId\n      });\n    }\n  }\n\n  @eventHandler()\n  suiteStart(suite: Suite) {\n    this._sendMessage('testSuiteStarted', {\n      name: suite.name,\n      startDate: new Date(),\n      flowId: suite.sessionId\n    });\n  }\n\n  @eventHandler()\n  suiteEnd(suite: Suite) {\n    if (suite.error) {\n      this._sendMessage('message', {\n        name: suite.name,\n        flowId: suite.sessionId,\n        text: 'SUITE ERROR',\n        errorDetails: this.formatError(suite.error),\n        status: 'ERROR'\n      });\n\n      this._notifyUnrunTests(suite);\n    } else {\n      this._sendMessage('testSuiteFinished', {\n        name: suite.name,\n        duration: suite.timeElapsed,\n        flowId: suite.sessionId\n      });\n    }\n  }\n\n  /**\n   * Escape a string for TeamCity output.\n   *\n   * @param  {string} string\n   * @return {string}\n   *\n   * Based on Message.prototype.escape from teamcity-service-messages\n   */\n  private _escapeString(str: string): string {\n    const replacer = /['\\n\\r\\|\\[\\]\\u0100-\\uffff]/g;\n    const map = {\n      \"'\": \"|'\",\n      '|': '||',\n      '\\n': '|n',\n      '\\r': '|r',\n      '[': '|[',\n      ']': '|]'\n    };\n\n    return str.replace(replacer, function(character: string): string {\n      if (character in map) {\n        return (<{ [key: string]: any }>map)[character];\n      }\n      if (/[^\\u0000-\\u00ff]/.test(character)) {\n        return '|0x' + character.charCodeAt(0).toString(16);\n      }\n      return '';\n    });\n  }\n\n  private _notifyUnrunTests(suite: Suite) {\n    // Keep track of test IDs that have already been ignored for a given\n    // session. This prevents the reporter from emitting duplicate\n    // testIgnored messages for unrun tests in nested suites as parent\n    // suites are finished.\n    const ignoredTestIds = this._ignoredTestIds!;\n    let ignoredTests = ignoredTestIds![suite.sessionId];\n    if (!ignoredTests) {\n      ignoredTests = ignoredTestIds![suite.sessionId] = {};\n    }\n\n    suite.tests.forEach(test => {\n      if (isSuite(test)) {\n        this._notifyUnrunTests(test);\n      } else if (!ignoredTests[test.id]) {\n        this._sendMessage('testIgnored', {\n          name: test.name,\n          flowId: test.sessionId\n        });\n        ignoredTests[test.id] = true;\n      }\n    });\n  }\n\n  /**\n   * Output a TeamCity message.\n   *\n   * @param  {string} type\n   * @param  {Object}  args\n   *\n   * Based on Message.prototype.formatArgs from teamcity-service-messages\n   */\n  private _sendMessage(type: string, args: any): void {\n    args.timestamp = new Date().toISOString().slice(0, -1);\n    args = Object.keys(args)\n      .map(key => `${key}='${this._escapeString(String(args[key]))}'`)\n      .join(' ');\n\n    this.output.write(`##teamcity[${type} ${args}]\\n`);\n  }\n}\n"]}
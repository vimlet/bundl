{"version":3,"file":"Runner.js","sourceRoot":"","sources":["../../../../src/lib/reporters/Runner.ts"],"names":[],"mappings":"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","sourcesContent":["import * as charm from 'charm';\nimport { createCoverageMap, CoverageMap } from 'istanbul-lib-coverage';\nimport { Writable } from 'stream';\n\nimport Test from '../Test';\nimport Suite from '../Suite';\nimport { createEventHandler } from './Reporter';\nimport TextCoverage, { TextCoverageProperties } from './TextCoverage';\nimport Server from '../Server';\nimport { CoverageMessage, DeprecationMessage } from '../executors/Executor';\nimport Node, { NodeEvents, TunnelMessage } from '../executors/Node';\nimport { prefix } from '../common/util';\n\nexport type Charm = charm.CharmInstance;\n\nconst eventHandler = createEventHandler<NodeEvents>();\n\nexport default class Runner extends TextCoverage implements RunnerProperties {\n  sessions: {\n    [sessionId: string]: {\n      coverage?: CoverageMap;\n      suite?: Suite;\n      [key: string]: any;\n    };\n  };\n\n  hasRunErrors: boolean;\n  hasSuiteErrors: boolean;\n  hidePassed: boolean;\n  hideSkipped: boolean;\n  hideTunnelDownloadProgress: boolean;\n  serveOnly: boolean;\n\n  private _deprecationMessages: { [message: string]: boolean };\n\n  protected charm: Charm;\n\n  constructor(executor: Node, options: Partial<RunnerProperties> = {}) {\n    super(executor, options);\n\n    this.hidePassed = options.hidePassed || false;\n    this.hideSkipped = options.hideSkipped || false;\n    this.hideTunnelDownloadProgress =\n      options.hideTunnelDownloadProgress || false;\n\n    this.sessions = {};\n    this.hasRunErrors = false;\n    this.hasSuiteErrors = false;\n    this.serveOnly = executor.config.serveOnly;\n\n    this.charm = charm();\n    this.charm.pipe(<Writable>this.output);\n    this.charm.display('reset');\n\n    this._deprecationMessages = {};\n  }\n\n  @eventHandler()\n  coverage(message: CoverageMessage) {\n    const sessionId = message.sessionId || '';\n\n    // If coverage is emitted for functional suites but unit test suites\n    // weren't run, there won't be an existing session for session ID ''\n    // (the one used for unit tests and local functional tests)\n    if (!this.sessions[sessionId]) {\n      this.sessions[sessionId] = {};\n    }\n    const session = this.sessions[sessionId];\n    session.coverage = session.coverage || createCoverageMap();\n    session.coverage.merge(message.coverage);\n  }\n\n  @eventHandler()\n  deprecated(message: DeprecationMessage) {\n    // Keep track of deprecation messages we've seen before\n    const key = `${message.original}|${message.replacement}|${message.message}`;\n    if (this._deprecationMessages[key]) {\n      return;\n    }\n    this._deprecationMessages[key] = true;\n\n    this.charm\n      .foreground('yellow')\n      .write('⚠︎ ' + message.original + ' is deprecated. ');\n\n    if (message.replacement) {\n      this.charm.write('Use ' + message.replacement + ' instead.');\n    } else {\n      this.charm.write(\n        'Please open a ticket at https://github.com/theintern/intern/issues if you still ' +\n          'require access to this function.'\n      );\n    }\n\n    if (message.message) {\n      this.charm.write(' ' + message.message);\n    }\n\n    this.charm.write('\\n');\n    this.charm.display('reset');\n  }\n\n  @eventHandler()\n  error(error: Error) {\n    this.charm.foreground('red');\n    this.charm.write('(ノಠ益ಠ)ノ彡┻━┻\\n');\n    this.charm.write(this.formatError(error));\n    this.charm.display('reset');\n    this.charm.write('\\n\\n');\n    this.hasRunErrors = true;\n  }\n\n  @eventHandler()\n  warning(warning: string | Error) {\n    this.charm.foreground('yellow');\n    const message =\n      typeof warning === 'string' ? warning : this.formatError(warning);\n    this.charm.write(`WARNING: ${message.replace(/^Error:\\s+/, '')}`);\n    this.charm.display('reset');\n    this.charm.write('\\n\\n');\n  }\n\n  @eventHandler()\n  log(message: string) {\n    message.split('\\n').forEach(line => {\n      this.console.log(`DEBUG: ${line}`);\n    });\n  }\n\n  @eventHandler()\n  runEnd() {\n    const map = this.executor.coverageMap;\n    let numTests = 0;\n    let numPassedTests = 0;\n    let numFailedTests = 0;\n    let numSkippedTests = 0;\n\n    const sessionIds = Object.keys(this.sessions);\n    const numEnvironments = sessionIds.length;\n\n    // A session may contain only coverage data, so ensure that only those\n    // with suites are considered\n    sessionIds\n      .filter(sessionId => this.sessions[sessionId].suite)\n      .forEach(sessionId => {\n        const suite = this.sessions[sessionId].suite!;\n        numTests += suite.numTests;\n        numPassedTests += suite.numPassedTests;\n        numFailedTests += suite.numFailedTests;\n        numSkippedTests += suite.numSkippedTests;\n      });\n\n    const charm = this.charm;\n\n    if (map.files().length > 0) {\n      charm.write('\\n');\n      charm.display('bright');\n      charm.write('Total coverage\\n');\n      charm.display('reset');\n      this.createCoverageReport(this.reportType, map);\n    }\n\n    let message = `TOTAL: tested ${numEnvironments} platforms, ${numPassedTests} passed, ${numFailedTests} failed`;\n\n    if (numSkippedTests) {\n      message += `, ${numSkippedTests} skipped`;\n    }\n\n    const numUnrunTests =\n      numTests - (numPassedTests + numFailedTests + numSkippedTests);\n    if (numUnrunTests) {\n      message += `, ${numUnrunTests} not run`;\n    }\n\n    if (this.hasRunErrors) {\n      message += '; fatal error occurred';\n    } else if (this.hasSuiteErrors) {\n      message += '; suite error occurred';\n    }\n\n    charm.display('bright');\n    charm.foreground(\n      numFailedTests > 0 || this.hasRunErrors || this.hasSuiteErrors\n        ? 'red'\n        : 'green'\n    );\n    charm.write(message);\n    charm.display('reset');\n    charm.write('\\n');\n  }\n\n  @eventHandler()\n  serverStart(server: Server) {\n    if (this.executor.config.serveOnly) {\n      this.charm.write(\n        `To use the browser client, browse to\\n\\n  ${\n          this.executor.config.serverUrl\n        }__intern/\\n\\n`\n      );\n      this.charm.write('Press CTRL-C to stop serving\\n\\n');\n    } else {\n      let message = `Listening on localhost:${server.port}`;\n      if (server.socketPort) {\n        message += ` (ws ${server.socketPort})`;\n      }\n      this.charm.write(`${message}\\n`);\n    }\n  }\n\n  @eventHandler()\n  suiteEnd(suite: Suite) {\n    const session = this.sessions[suite.sessionId || ''];\n    if (!session) {\n      if (!this.serveOnly) {\n        const charm = this.charm;\n        charm.display('bright');\n        charm.foreground('yellow');\n        charm.write(\n          'BUG: suiteEnd was received for invalid session ' + suite.sessionId\n        );\n        charm.display('reset');\n        charm.write('\\n');\n      }\n\n      return;\n    }\n\n    if (suite.error) {\n      const error = suite.error;\n      const charm = this.charm;\n\n      charm.foreground('red');\n      charm.write('Suite ' + suite.id + ' FAILED\\n');\n      charm.write(this.formatError(error));\n      charm.display('reset');\n      charm.write('\\n');\n\n      this.hasSuiteErrors = session.hasSuiteErrors = true;\n    } else if (!suite.hasParent && this.executor.suites.length > 1) {\n      if (session.coverage) {\n        this.charm.write('\\n');\n        this.createCoverageReport(this.reportType, session.coverage);\n      } else {\n        const charm = this.charm;\n        charm.write('No unit test coverage for ' + suite.name);\n        charm.display('reset');\n        charm.write('\\n');\n      }\n\n      const name = suite.name;\n      const hasError = suite.error || session.hasSuiteErrors;\n      const numTests = suite.numTests;\n      const numFailedTests = suite.numFailedTests;\n      const numSkippedTests = suite.numSkippedTests;\n      const numPassedTests = numTests - numFailedTests - numSkippedTests;\n\n      let summary = `${name}: ${numPassedTests} passed, ${numFailedTests} failed`;\n      if (numSkippedTests) {\n        summary += `, ${numSkippedTests} skipped`;\n      }\n\n      if (hasError) {\n        summary += '; suite error occurred';\n      }\n\n      const charm = this.charm;\n      charm.display('bright');\n      charm.foreground(numFailedTests || hasError > 0 ? 'red' : 'green');\n      charm.write(summary);\n      charm.display('reset');\n      charm.write('\\n');\n    }\n  }\n\n  @eventHandler()\n  suiteStart(suite: Suite) {\n    if (!suite.hasParent) {\n      this.sessions[suite.sessionId || ''] = { suite: suite };\n      if (suite.sessionId) {\n        this.charm.write('\\n');\n        this.charm.write(\n          '‣ Created remote session ' +\n            suite.name +\n            ' (' +\n            suite.sessionId +\n            ')\\n'\n        );\n      }\n    }\n  }\n\n  @eventHandler()\n  testEnd(test: Test) {\n    const charm = this.charm;\n    if (test.error) {\n      charm.foreground('red');\n      charm.write('× ' + test.id);\n      charm.write(' (' + test.timeElapsed! / 1000 + 's)');\n      charm.write('\\n');\n      charm.write(prefix(this.formatError(test.error), '    '));\n      charm.display('reset');\n      charm.write('\\n\\n');\n    } else if (test.skipped) {\n      if (!this.hideSkipped) {\n        charm.write('~ ' + test.id);\n        charm.display('reset');\n        charm.write(' (' + (test.skipped || 'skipped') + ')');\n        charm.display('reset');\n        charm.write('\\n');\n      }\n    } else {\n      if (!this.hidePassed) {\n        charm.foreground('green');\n        charm.write('✓ ' + test.id);\n        charm.display('reset');\n        charm.write(' (' + test.timeElapsed! / 1000 + 's)');\n        charm.display('reset');\n        charm.write('\\n');\n      }\n    }\n  }\n\n  @eventHandler()\n  tunnelDownloadProgress(message: TunnelMessage) {\n    if (this.hideTunnelDownloadProgress) {\n      return;\n    }\n\n    const progress = message.progress!;\n    this.charm.write(\n      'Tunnel download: ' +\n        ((progress.received / progress.total) * 100).toFixed(3) +\n        '%\\r'\n    );\n  }\n\n  @eventHandler()\n  tunnelStart(_: TunnelMessage) {\n    this.charm.write('Tunnel started\\n');\n  }\n\n  @eventHandler()\n  tunnelStatus(message: TunnelMessage) {\n    this.charm.write(message.status + '\\x1b[K\\r');\n  }\n}\n\nexport interface RunnerProperties extends TextCoverageProperties {\n  hidePassed: boolean;\n  hideSkipped: boolean;\n  hideTunnelDownloadProgress: boolean;\n}\n"]}
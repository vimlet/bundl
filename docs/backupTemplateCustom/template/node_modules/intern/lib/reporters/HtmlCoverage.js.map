{"version":3,"file":"HtmlCoverage.js","sourceRoot":"","sources":["../../../../src/lib/reporters/HtmlCoverage.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,uCAAsE;IAGtE;QAA0C,wCAAQ;QAKhD,sBAAY,QAAc,EAAE,OAAiC;YAAjC,wBAAA,EAAA,YAAiC;YAA7D,YACE,kBAAM,QAAQ,EAAE,OAAO,CAAC,SAKzB;YATQ,gBAAU,GAAe,MAAM,CAAC;YAMvC,IAAI,SAAS,IAAI,OAAO,EAAE;gBACxB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAQ,CAAC;aACjC;;QACH,CAAC;QAED,yCAAkB,GAAlB;YACE,IAAM,OAAO,GAAG,iBAAM,kBAAkB,WAAE,CAAC;YAE3C,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAE/B,OAAO,OAAO,CAAC;QACjB,CAAC;QACH,mBAAC;IAAD,CAAC,AApBD,CAA0C,kBAAQ,GAoBjD","sourcesContent":["import Coverage, { ReportType, CoverageProperties } from './Coverage';\nimport Node from '../executors/Node';\n\nexport default class HtmlCoverage extends Coverage\n  implements HtmlCoverageProperties {\n  readonly reportType: ReportType = 'html';\n  verbose: boolean | undefined;\n\n  constructor(executor: Node, options: HtmlCoverageOptions = {}) {\n    super(executor, options);\n\n    if ('verbose' in options) {\n      this.verbose = options.verbose!;\n    }\n  }\n\n  getReporterOptions(): { [key: string]: any } {\n    const options = super.getReporterOptions();\n\n    options.verbose = this.verbose;\n\n    return options;\n  }\n}\n\nexport interface HtmlCoverageProperties extends CoverageProperties {\n  verbose: boolean | undefined;\n}\n\nexport type HtmlCoverageOptions = Partial<HtmlCoverageProperties>;\n"]}
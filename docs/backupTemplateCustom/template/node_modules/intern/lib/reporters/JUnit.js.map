{"version":3,"file":"JUnit.js","sourceRoot":"","sources":["../../../../src/lib/reporters/JUnit.ts"],"names":[],"mappings":"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","sourcesContent":["import { mkdirSync, createWriteStream } from 'fs';\nimport { dirname } from 'path';\n\nimport Suite, { isSuite } from '../Suite';\nimport Test from '../Test';\nimport Reporter, { eventHandler, ReporterProperties } from './Reporter';\nimport { Executor } from '../executors/Executor';\n\n/**\n * There is no formal spec for this format and everyone does it differently, so\n * good luck! We've mashed as many of the different incompatible JUnit/xUnit\n * XSDs as possible into one reporter.\n */\nexport default class JUnit extends Reporter {\n  readonly filename: string | undefined;\n\n  constructor(executor: Executor, options: Partial<JUnitProperties> = {}) {\n    super(executor, options);\n    if (options.filename) {\n      this.filename = options.filename;\n      if (dirname(this.filename) !== '.') {\n        try {\n          mkdirSync(dirname(this.filename));\n        } catch (error) {\n          if (error.code !== 'EEXIST') {\n            throw error;\n          }\n        }\n      }\n      this.output = createWriteStream(this.filename);\n    }\n  }\n\n  @eventHandler()\n  runEnd() {\n    const rootNode = new XmlNode('testsuites');\n    this.executor.suites.forEach(suite => {\n      rootNode.childNodes.push(createSuiteNode(suite, this));\n    });\n    const report =\n      '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>' + rootNode.toString() + '\\n';\n    this.output.end(report);\n  }\n}\n\nexport interface JUnitProperties extends ReporterProperties {\n  filename?: string;\n}\n\n/**\n * Simple XML generator.\n * @constructor\n * @param {string} nodeName The node name.\n * @param {Object?} attributes Optional attributes.\n */\nclass XmlNode {\n  nodeName = '';\n  childNodes: any[] = [];\n  attributes: any;\n\n  constructor(nodeName: string, attributes?: any) {\n    this.nodeName = nodeName;\n\n    if (attributes && attributes.childNodes) {\n      this.childNodes = attributes.childNodes;\n      attributes.childNodes = undefined;\n    }\n    this.attributes = attributes || {};\n  }\n\n  /**\n   * Creates a new XML node and pushes it to the end of the current node.\n   * @param {string} nodeName The node name for the new node.\n   * @param {Object?} attributes Optional attributes for the new node.\n   * @param {(XmlNode|string)[]?} childNodes Optional child nodes for the new\n   * node.\n   * @returns {XmlNode} A new node.\n   */\n  createNode(nodeName: string, attributes: Object) {\n    const node = new XmlNode(nodeName, attributes);\n    this.childNodes.push(node);\n    return node;\n  }\n\n  _escape(str: string) {\n    return String(str)\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/\"/g, '&quot;');\n  }\n\n  _serializeAttributes() {\n    const attributes = this.attributes;\n    const nodes: any[] = [];\n\n    for (let key in attributes) {\n      if (attributes[key] != null) {\n        nodes.push(key + '=\"' + this._escape(attributes[key]) + '\"');\n      }\n    }\n\n    return nodes.length ? ' ' + nodes.join(' ') : '';\n  }\n\n  _serializeContent() {\n    const nodeList = this.childNodes;\n    const nodes: any[] = [];\n    for (let i = 0, j = nodeList.length; i < j; ++i) {\n      nodes.push(\n        typeof nodeList[i] === 'string'\n          ? this._escape(nodeList[i])\n          : nodeList[i].toString()\n      );\n    }\n\n    return nodes.join('');\n  }\n\n  /**\n   * Outputs the node as a serialised XML string.\n   * @returns {string}\n   */\n  toString() {\n    const children = this._serializeContent();\n\n    return (\n      '<' +\n      this.nodeName +\n      this._serializeAttributes() +\n      (children.length ? '>' + children + '</' + this.nodeName + '>' : '/>')\n    );\n  }\n}\n\nfunction createSuiteNode(suite: Suite, reporter: JUnit): XmlNode {\n  return new XmlNode('testsuite', {\n    name: suite.name || 'Node.js',\n    failures: suite.numFailedTests,\n    skipped: suite.numSkippedTests,\n    tests: suite.numTests,\n    time: suite.timeElapsed! / 1000,\n    childNodes: suite.tests.map(test => createTestNode(test, reporter))\n  });\n}\n\nfunction createTestNode(test: Suite | Test, reporter: JUnit) {\n  if (isSuite(test)) {\n    return createSuiteNode(test, reporter);\n  }\n\n  const node = new XmlNode('testcase', {\n    name: test.name,\n    time: test.timeElapsed! / 1000,\n    status: test.error ? 1 : 0\n  });\n\n  if (test.error) {\n    node.createNode(\n      test.error.name === 'AssertionError' ? 'failure' : 'error',\n      {\n        childNodes: [reporter.formatError(test.error)],\n        message: test.error.message,\n        type: test.error.name\n      }\n    );\n  } else if (test.skipped != null) {\n    node.createNode('skipped', {\n      childNodes: [test.skipped]\n    });\n  }\n\n  return node;\n}\n"]}
{"version":3,"file":"Channel.js","sourceRoot":"","sources":["../../../src/lib/Channel.ts"],"names":[],"mappings":";;;;;;;;;;;IACA,kDAAoD;IACpD,wCAA0C;IAK1C;QAME,iBAAY,OAAuB;YACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC;QAED,6BAAW,GAAX,UAAY,IAAwB,EAAE,IAAS;YAA/C,iBAIC;YAHC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC;gBAC7B,OAAO,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC;QAES,6BAAW,GAArB;YAAA,iBA2BC;YA1BC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACtB,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,CAAO,UAAA,OAAO;oBAC3C,IAAI,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE;wBACrB,IAAI;4BACF,KAAI,CAAC,QAAQ,GAAG,IAAI,mBAAgB,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;4BACnD,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,IAAI,CACpD;gCACE,OAAO,EAAE,CAAC;4BACZ,CAAC,EACD,UAAA,MAAM;gCACJ,KAAI,CAAC,QAAQ,GAAG,IAAI,cAAW,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gCAC9C,OAAO,EAAE,CAAC;4BACZ,CAAC,CACF,CAAC;yBACH;wBAAC,OAAO,KAAK,EAAE;4BACd,KAAI,CAAC,QAAQ,GAAG,IAAI,cAAW,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;4BAC9C,OAAO,EAAE,CAAC;yBACX;qBACF;yBAAM;wBACL,KAAI,CAAC,QAAQ,GAAG,IAAI,cAAW,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;wBAC9C,OAAO,EAAE,CAAC;qBACX;gBACH,CAAC,CAAC,CAAC;aACJ;YAED,OAAO,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;QACH,cAAC;IAAD,CAAC,AA5CD,IA4CC","sourcesContent":["import { RemoteEvents } from './RemoteSuite';\nimport WebSocketChannel from './channels/WebSocket';\nimport HttpChannel from './channels/Http';\nimport BaseChannel, { ChannelOptions } from './channels/Base';\n\nexport { ChannelOptions };\n\nexport default class Channel {\n  readonly options: ChannelOptions;\n\n  private _channel!: BaseChannel;\n  private _initialized!: Promise<void>;\n\n  constructor(options: ChannelOptions) {\n    this.options = options;\n  }\n\n  sendMessage(name: keyof RemoteEvents, data: any) {\n    return this._initialize().then(() => {\n      return this._channel.sendMessage(name, data);\n    });\n  }\n\n  protected _initialize() {\n    if (!this._initialized) {\n      this._initialized = new Promise<void>(resolve => {\n        if (this.options.port) {\n          try {\n            this._channel = new WebSocketChannel(this.options);\n            this._channel.sendMessage('remoteStatus', 'ping').then(\n              () => {\n                resolve();\n              },\n              _error => {\n                this._channel = new HttpChannel(this.options);\n                resolve();\n              }\n            );\n          } catch (error) {\n            this._channel = new HttpChannel(this.options);\n            resolve();\n          }\n        } else {\n          this._channel = new HttpChannel(this.options);\n          resolve();\n        }\n      });\n    }\n\n    return this._initialized;\n  }\n}\n"]}
{"version":3,"file":"Browser.js","sourceRoot":"","sources":["../../../../src/lib/executors/Browser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Minimatch } from 'minimatch';\nimport { request, Task, CancellablePromise, global } from '@theintern/common';\n\nimport * as console from '../common/console';\nimport Executor, { Config, Events, Plugins } from './Executor';\nimport { dirname, join, normalizePathEnding } from '../common/path';\nimport { getDefaultBasePath } from '../browser/util';\nimport { RuntimeEnvironment } from '../types';\n\n// Reporters\nimport Html from '../reporters/Html';\nimport Dom from '../reporters/Dom';\nimport ConsoleReporter from '../reporters/Console';\n\n/**\n * A Browser executor is used to run unit tests in a browser.\n */\nexport default class Browser extends Executor<Events, Config, Plugins> {\n  constructor(options?: { [key in keyof Config]?: any }) {\n    super(<Config>{\n      basePath: '',\n      internPath: ''\n    });\n\n    // Report uncaught errors\n    global.addEventListener(\n      'unhandledRejection',\n      (event: PromiseRejectionEvent) => {\n        console.warn('Unhandled rejection:', event);\n        this.emit('error', event.reason);\n      }\n    );\n\n    global.addEventListener('error', (event: ErrorEvent) => {\n      console.warn('Unhandled error:', event);\n      const error = new Error(event.message);\n      error.stack = `${event.filename}:${event.lineno}:${event.colno}`;\n      this.emit('error', error);\n    });\n\n    this.registerReporter('html', options => new Html(this, options));\n    this.registerReporter('dom', options => new Dom(this, options));\n    this.registerReporter(\n      'console',\n      options => new ConsoleReporter(this, options)\n    );\n\n    if (options) {\n      this.configure(options);\n    }\n  }\n\n  get environment(): RuntimeEnvironment {\n    return 'browser';\n  }\n\n  /**\n   * Load a script or scripts via script injection.\n   *\n   * @param script a path to a script\n   */\n  loadScript(\n    script: string | string[],\n    isEsm = false\n  ): CancellablePromise<void> {\n    if (typeof script === 'string') {\n      script = [script];\n    }\n\n    return script.reduce((previous, script) => {\n      if (script[0] !== '/') {\n        script = `${this.config.basePath}${script}`;\n      }\n      return previous.then(() => injectScript(script, isEsm));\n    }, Task.resolve());\n  }\n\n  protected _resolveConfig() {\n    return super._resolveConfig().then(() => {\n      const config = this.config;\n      const currentPath = global.location.pathname;\n\n      if (!config.internPath) {\n        if (/\\.html$/.test(currentPath)) {\n          config.internPath = dirname(currentPath);\n        } else {\n          config.internPath = currentPath;\n        }\n      }\n\n      if (!config.basePath) {\n        config.basePath = getDefaultBasePath();\n      } else if (/^\\./.test(config.basePath)) {\n        // The user provided a relative value for basePath. Resolve it\n        // relative to the path to Intern's index.html.\n        config.basePath = join(config.internPath, config.basePath);\n      }\n\n      ['basePath', 'internPath'].forEach(property => {\n        const key = <keyof Config>property;\n        config[key] = normalizePathEnding(<string>config[key]);\n      });\n\n      // Combine suites and browser.suites into browser.suites\n      const suites = (config.browser.suites = [\n        ...config.suites,\n        ...config.browser.suites\n      ]);\n\n      // Clear out the suites list after combining the suites\n      delete config.suites;\n\n      const hasGlobs = suites.some(pattern => {\n        const matcher = new Minimatch(pattern);\n        return matcher.set[0].some(entry => typeof entry !== 'string');\n      });\n\n      if (hasGlobs) {\n        return request('__resolveSuites__', { query: { suites } })\n          .then(response => response.json<string[]>())\n          .catch(() => {\n            throw new Error(\n              'The server does not support suite glob resolution'\n            );\n          })\n          .then((data: string[]) => {\n            config.browser.suites = data;\n          });\n      }\n    });\n  }\n}\n\nexport { Events, Config };\n\nfunction injectScript(path: string, isEsm: boolean): CancellablePromise<void> {\n  return new Task<void>((resolve, reject) => {\n    const doc: Document = global.document;\n    const scriptTag = doc.createElement('script');\n    scriptTag.addEventListener('load', () => {\n      resolve();\n    });\n    scriptTag.addEventListener('error', event => {\n      console.error(`Error loading ${path}:`, event);\n      reject(new Error(`Unable to load ${path}`));\n    });\n    if (isEsm) {\n      scriptTag.type = 'module';\n    }\n    scriptTag.src = path;\n    doc.body.appendChild(scriptTag);\n  });\n}\n"]}
{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../src/lib/common/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellablePromise, deepMixin } from '@theintern/common';\n\nimport { Config, ResourceConfig } from './config';\nimport { Events, Executor, PluginDescriptor } from '../executors/Executor';\nimport { TextLoader } from './util';\nimport { getPathSep, join, normalize } from './path';\n\nexport interface EvaluatedProperty {\n  name: keyof Config;\n  addToExisting: boolean;\n}\n\nexport interface TextLoader {\n  (path: string): CancellablePromise<string>;\n}\n\nexport type TypeName =\n  | 'string'\n  | 'boolean'\n  | 'number'\n  | 'regexp'\n  | 'object'\n  | 'string[]'\n  | 'object[]';\n\nexport type Parser<T = any> = (value: any) => T;\n\n/**\n * Evaluate a config property key\n */\nexport function evalProperty<C>(key: keyof C): EvaluatedProperty {\n  const strKey = <string>key;\n  const addToExisting = strKey[strKey.length - 1] === '+';\n  const name = <keyof Config>(\n    (addToExisting ? strKey.slice(0, strKey.length - 1) : key)\n  );\n  return { name, addToExisting };\n}\n\n/**\n * Get the base path based on a config file path and a user-supplied base path.\n *\n * The path separator will be normalized based on the separator used in\n * configFile or basePath and the optional pathSep arg.\n */\nexport function getBasePath(\n  configFile: string,\n  basePath: string,\n  isAbsolute: (path: string) => boolean,\n  pathSep?: string\n) {\n  pathSep = pathSep || getPathSep(configFile, basePath);\n\n  // initialBasePath is the path containing the config file\n  const configPathParts = configFile.replace(/\\\\/g, '/').split('/');\n  let initialBasePath: string;\n\n  if (configFile[0] === '/' && configPathParts.length === 2) {\n    initialBasePath = '/';\n  } else {\n    initialBasePath = configPathParts.slice(0, -1).join('/');\n  }\n\n  let finalBasePath: string;\n\n  if (basePath) {\n    basePath = normalize(basePath);\n\n    if (isAbsolute(basePath)) {\n      // basePath is absolute, so use it directly\n      finalBasePath = basePath;\n    } else {\n      // basePath is relative, so resolve it against initialBasePath\n      finalBasePath = join(initialBasePath, basePath);\n    }\n  } else {\n    // No basePath was provided, so use initialBasePath\n    finalBasePath = initialBasePath;\n  }\n\n  return finalBasePath.split('/').join(pathSep);\n}\n\n/**\n * Return a string describing a config file, including any child configs.\n */\nexport function getConfigDescription(config: any, prefix = '') {\n  let description = '';\n\n  if (config.description) {\n    description += `${prefix}${config.description}\\n\\n`;\n  }\n\n  if (config.configs) {\n    description += `${prefix}Configs:\\n`;\n    const width = Object.keys(config.configs).reduce((width, name) => {\n      return Math.max(width, name.length);\n    }, 0);\n    const lines = Object.keys(config.configs).map(name => {\n      const child = config.configs[name];\n      while (name.length < width) {\n        name += ' ';\n      }\n      let line = `  ${name}`;\n      if (child.description) {\n        line += ` (${child.description})`;\n      }\n      return `${prefix}${line}`;\n    });\n\n    description += lines.join('\\n');\n  }\n\n  return description;\n}\n\n/**\n * Load config data from a given path, using a given text loader, and mixing\n * args and/or a childConfig into the final config value if provided.\n */\nexport function loadConfig(\n  configPath: string,\n  loadText: TextLoader,\n  args?: { [key: string]: any },\n  childConfig?: string | string[]\n): CancellablePromise<any> {\n  return _loadConfig(configPath, loadText, args, childConfig).then(config => {\n    // 'config' and 'extends' are only applicable to the config loader, not\n    // the Executors\n    delete config.config;\n    delete config.extends;\n\n    if (!(args && (args.showConfigs || args.help))) {\n      // 'configs' is only relevant if we're showing configs\n      delete config.configs;\n    }\n\n    return config;\n  });\n}\n\n/**\n * Parse an array of name=value arguments into an object\n */\nexport function parseArgs(rawArgs: string[]) {\n  const parsedArgs: { [key: string]: any } = {};\n\n  for (const arg of rawArgs) {\n    let name = arg;\n    let value: string | undefined;\n    let args = parsedArgs;\n\n    const eq = arg.indexOf('=');\n    if (eq !== -1) {\n      name = arg.slice(0, eq);\n      value = arg.slice(eq + 1);\n    }\n\n    if (name.indexOf('.') !== -1) {\n      const parts = name.split('.');\n      const head = parts.slice(0, parts.length - 1);\n      name = parts[parts.length - 1];\n\n      for (const part of head) {\n        if (!args[part]) {\n          args[part] = {};\n        }\n        args = args[part];\n      }\n    }\n\n    if (typeof value === 'undefined') {\n      args[name] = true;\n    } else {\n      if (!(name in args)) {\n        args[name] = value;\n      } else if (!Array.isArray(args[name])) {\n        args[name] = [args[name], value];\n      } else {\n        args[name].push(value);\n      }\n    }\n  }\n\n  return parsedArgs;\n}\n\n/**\n * Parse a JSON string that may contain comments\n */\nexport function parseJson(json: string) {\n  return JSON.parse(removeComments(json));\n}\n\n/**\n * Parse a particular type of value from a given value\n *\n * @param name The 'name' of the value being parsed (used for error messages)\n * @param value A value to parse something from\n * @param parser The type of thing to parse, or a parser function\n * @param requiredProperty Only used with 'object' and 'object[]' parsers\n */\nexport function parseValue(\n  name: string,\n  value: any,\n  parser: TypeName | Parser,\n  requiredProperty?: string\n) {\n  switch (parser) {\n    case 'boolean':\n      if (typeof value === 'boolean') {\n        return value;\n      }\n      if (value === 'true') {\n        return true;\n      }\n      if (value === 'false') {\n        return false;\n      }\n      throw new Error(`Non-boolean value \"${value}\" for ${name}`);\n\n    case 'number':\n      const numValue = Number(value);\n      if (!isNaN(numValue)) {\n        return numValue;\n      }\n      throw new Error(`Non-numeric value \"${value}\" for ${name}`);\n\n    case 'regexp':\n      if (typeof value === 'string') {\n        return new RegExp(value);\n      }\n      if (value instanceof RegExp) {\n        return value;\n      }\n      throw new Error(`Non-regexp value \"${value}\" for ${name}`);\n\n    case 'object':\n      if (typeof value === 'string') {\n        try {\n          value = value ? JSON.parse(value) : {};\n        } catch (error) {\n          if (!requiredProperty) {\n            throw new Error(`Non-object value \"${value}\" for ${name}`);\n          }\n          value = { [requiredProperty]: value };\n        }\n      }\n      // A value of type 'object' should be a simple object, not a\n      // built-in type like RegExp or Array\n      if (Object.prototype.toString.call(value) === '[object Object]') {\n        if (requiredProperty && !value[requiredProperty]) {\n          throw new Error(\n            `Invalid value \"${JSON.stringify(\n              value\n            )}\" for ${name}: missing '${requiredProperty}' property`\n          );\n        }\n        return value;\n      }\n      throw new Error(`Non-object value \"${value}\" for ${name}`);\n\n    case 'object[]':\n      if (!value) {\n        value = [];\n      }\n      if (!Array.isArray(value)) {\n        value = [value];\n      }\n      return value.map((item: any) => {\n        return parseValue(name, item, 'object', requiredProperty);\n      });\n\n    case 'string':\n      if (typeof value === 'string') {\n        return value;\n      }\n      throw new Error(`Non-string value \"${value}\" for ${name}`);\n\n    case 'string[]':\n      if (!value) {\n        value = [];\n      }\n      if (typeof value === 'string') {\n        value = [value];\n      }\n      if (Array.isArray(value) && value.every(v => typeof v === 'string')) {\n        return value;\n      }\n      throw new Error(`Non-string[] value \"${value}\" for ${name}`);\n\n    default:\n      if (typeof parser === 'function') {\n        return parser(value);\n      } else {\n        throw new Error('Parser must be a valid type name');\n      }\n  }\n}\n\n/**\n * Return a string with all lines prefixed with a given prefix.\n */\nexport function prefix(message: string, prefix: string) {\n  return message\n    .split('\\n')\n    .map(line => prefix + line)\n    .join('\\n');\n}\n\n/**\n * Process a Config option, transforming it to a canonical form and storing it\n * on the given config object.\n *\n * If an executor is provided, it will be used to emit deprecation and log\n * events.\n */\nexport function processOption<C extends Config>(\n  key: keyof C,\n  value: any,\n  config: C,\n  executor?: Executor\n) {\n  const { name, addToExisting } = evalProperty<C>(key);\n  const emit = executor\n    ? (eventName: keyof Events, data?: any) => {\n        executor.emit(eventName, data);\n      }\n    : (..._args: any[]) => {};\n\n  if (name === 'loader') {\n    setOption(config, name, parseValue(name, value, 'object', 'script'));\n  } else if (\n    name === 'bail' ||\n    name === 'baseline' ||\n    name === 'benchmark' ||\n    name === 'debug' ||\n    name === 'filterErrorStack' ||\n    name === 'showConfig'\n  ) {\n    setOption(config, name, parseValue(name, value, 'boolean'));\n  } else if (\n    name === 'basePath' ||\n    name === 'coverageVariable' ||\n    name === 'description' ||\n    name === 'internPath' ||\n    name === 'name' ||\n    name === 'sessionId'\n  ) {\n    setOption(config, name, parseValue(name, value, 'string'));\n  } else if (name === 'defaultTimeout') {\n    setOption(config, name, parseValue(name, value, 'number'));\n  } else if (name === 'grep') {\n    setOption(config, name, parseValue(name, value, 'regexp'));\n  } else if (name === 'reporters') {\n    setOption(\n      config,\n      name,\n      parseValue(name, value, 'object[]', 'name'),\n      addToExisting\n    );\n  } else if (\n    name === 'plugins' ||\n    name === 'requires' ||\n    name === 'require' ||\n    name === 'scripts'\n  ) {\n    let useLoader = false;\n    let _name = name;\n    if (name === 'scripts') {\n      emit('deprecated', {\n        original: 'scripts',\n        replacement: 'plugins'\n      });\n      _name = 'plugins';\n    } else if (name === 'require') {\n      emit('deprecated', {\n        original: 'require',\n        replacement: 'plugins'\n      });\n      _name = 'plugins';\n    } else if (name === 'requires') {\n      emit('deprecated', {\n        original: 'require',\n        replacement: 'plugins',\n        message: 'Set `useLoader: true`'\n      });\n      _name = 'plugins';\n      useLoader = true;\n    }\n    const parsed = parseValue(_name, value, 'object[]', 'script');\n    if (useLoader) {\n      parsed.forEach((entry: PluginDescriptor) => {\n        entry.useLoader = true;\n      });\n    }\n    setOption(config, _name, parsed, addToExisting);\n  } else if (name === 'suites') {\n    setOption(config, name, parseValue(name, value, 'string[]'), addToExisting);\n  } else if (name === 'node' || name === 'browser') {\n    const envConfig: ResourceConfig = config[name] || {};\n    if (!config[name]) {\n      config[name] = envConfig;\n    }\n    const envName = name;\n    const _value = parseValue(name, value, 'object');\n    if (_value) {\n      Object.keys(_value).forEach(valueKey => {\n        const key = <keyof ResourceConfig>valueKey;\n        let resource = _value[key];\n        let { name, addToExisting } = evalProperty(key);\n        switch (name) {\n          case 'loader':\n            resource = parseValue(name, resource, 'object', 'script');\n            setOption(<Config>envConfig, name, resource, false);\n            break;\n          case 'reporters':\n            resource = parseValue('reporters', resource, 'object[]', 'name');\n            setOption(<Config>envConfig, name, resource, addToExisting);\n            break;\n          case 'plugins':\n          case 'require':\n          case 'requires':\n          case 'scripts':\n            let useLoader = false;\n            if (name === 'scripts') {\n              emit('deprecated', {\n                original: 'scripts',\n                replacement: 'plugins'\n              });\n              name = 'plugins';\n            } else if (name === 'require') {\n              emit('deprecated', {\n                original: 'require',\n                replacement: 'plugins'\n              });\n              name = 'plugins';\n            } else if (name === 'requires') {\n              emit('deprecated', {\n                original: 'requires',\n                replacement: 'plugins',\n                message: 'Set `useLoader: true`'\n              });\n              name = 'plugins';\n              useLoader = true;\n            }\n            resource = parseValue(name, resource, 'object[]', 'script');\n            if (useLoader) {\n              resource.forEach((entry: PluginDescriptor) => {\n                entry.useLoader = true;\n              });\n            }\n            setOption(\n              <Config>envConfig,\n              <keyof Config>name,\n              resource,\n              addToExisting\n            );\n            break;\n          case 'suites':\n            resource = parseValue(name, resource, 'string[]');\n            setOption(<Config>envConfig, name, resource, addToExisting);\n            break;\n          default:\n            throw new Error(`Invalid property ${key} in ${envName} config`);\n        }\n      });\n    }\n  } else if (name === 'functionalBaseUrl' || name === 'serverUrl') {\n    setOption(config, name, parseValue(name, value, 'string'));\n  } else if (name === 'proxy') {\n    if (value == null) {\n      setOption(config, name, undefined);\n    } else {\n      setOption(config, name, parseValue(name, value, 'string'));\n    }\n  } else if (\n    name === 'capabilities' ||\n    name === 'instrumenterOptions' ||\n    name === 'tunnelOptions'\n  ) {\n    setOption(config, name, parseValue(name, value, 'object'), addToExisting);\n  } else if (name === 'environments') {\n    // Must be a string, object, or array of (string | object)\n    let _value = value;\n    if (!_value) {\n      _value = [];\n    } else if (!Array.isArray(_value)) {\n      _value = [_value];\n    }\n    _value = _value.map((val: any) => {\n      if (typeof val === 'object' && val.browserName == null) {\n        val.browserName = val.browser;\n      }\n      return val;\n    });\n    setOption(\n      config,\n      name,\n      parseValue(name, _value, 'object[]', 'browserName'),\n      addToExisting\n    );\n  } else if (name === 'excludeInstrumentation') {\n    emit('deprecated', {\n      original: 'excludeInstrumentation',\n      replacement: 'coverage'\n    });\n  } else if (name === 'tunnel') {\n    setOption(config, name, parseValue(name, value, 'string'));\n  } else if (\n    name === 'functionalCoverage' ||\n    name === 'serveOnly' ||\n    name === 'runInSync'\n  ) {\n    setOption(config, name, parseValue(name, value, 'boolean'));\n  } else if (name === 'leaveRemoteOpen') {\n    let parsed: boolean | 'fail';\n    try {\n      parsed = parseValue(name, value, 'boolean');\n    } catch (error) {\n      parsed = parseValue(name, value, 'string');\n      if (parsed !== 'fail') {\n        throw new Error(`Invalid value '${parsed}' for leaveRemoteOpen`);\n      }\n    }\n    setOption(config, name, parsed);\n  } else if (name === 'coverage') {\n    let parsed: boolean | string[];\n    try {\n      parsed = parseValue(name, value, 'boolean');\n    } catch (error) {\n      parsed = parseValue(name, value, 'string[]');\n    }\n    if (typeof parsed === 'boolean' && parsed !== false) {\n      throw new Error(\"Non-false boolean for 'coverage'\");\n    }\n    setOption(config, name, parsed);\n  } else if (name === 'functionalSuites') {\n    setOption(config, name, parseValue(name, value, 'string[]'), addToExisting);\n  } else if (name === 'functionalTimeouts') {\n    if (!config.functionalTimeouts) {\n      config.functionalTimeouts = {};\n    }\n    const parsedTimeout = parseValue(name, value, 'object');\n    if (parsedTimeout) {\n      // If the given value was an object, mix it in to the\n      // default functionalTimeouts\n      Object.keys(parsedTimeout).forEach(timeoutKey => {\n        const key = <keyof Config['functionalTimeouts']>timeoutKey;\n        if (key === 'connectTimeout') {\n          emit('deprecated', {\n            original: 'functionalTimeouts.connectTimeout',\n            replacement: 'connectTimeout'\n          });\n          setOption(config, key, parseValue(key, parsedTimeout[key], 'number'));\n        } else {\n          config.functionalTimeouts[key] = parseValue(\n            `functionalTimeouts.${key}`,\n            parsedTimeout[key],\n            'number'\n          );\n        }\n      });\n    } else {\n      // If the given value was null/undefined, clear out\n      // functionalTimeouts\n      setOption(config, name, {});\n    }\n  } else if (\n    name === 'connectTimeout' ||\n    name === 'heartbeatInterval' ||\n    name === 'maxConcurrency' ||\n    name === 'serverPort' ||\n    name === 'socketPort'\n  ) {\n    setOption(config, name, parseValue(name, value, 'number'));\n  } else {\n    emit('log', `Config has unknown option \"${name}\"`);\n    setOption(config, name, value);\n  }\n}\n\n/**\n * Remove all instances of of an item from any array and return the removed\n * instances.\n */\nexport function pullFromArray<T>(haystack: T[], needle: T): T[] {\n  let removed: T[] = [];\n  let i = 0;\n\n  while ((i = haystack.indexOf(needle, i)) > -1) {\n    removed.push(haystack.splice(i, 1)[0]);\n  }\n\n  return removed;\n}\n\n/**\n * Remove JS-style line and block comments from a string\n */\nfunction removeComments(text: string) {\n  let state: 'string' | 'block-comment' | 'line-comment' | 'default' =\n    'default';\n  let i = 0;\n\n  // Create an array of chars from the text, the blank out anything in a\n  // comment\n  const chars = text.split('');\n\n  while (i < chars.length) {\n    switch (state) {\n      case 'block-comment':\n        if (chars[i] === '*' && chars[i + 1] === '/') {\n          chars[i] = ' ';\n          chars[i + 1] = ' ';\n          state = 'default';\n          i += 2;\n        } else if (chars[i] !== '\\n') {\n          chars[i] = ' ';\n          i += 1;\n        } else {\n          i += 1;\n        }\n        break;\n\n      case 'line-comment':\n        if (chars[i] === '\\n') {\n          state = 'default';\n        } else {\n          chars[i] = ' ';\n        }\n        i += 1;\n        break;\n\n      case 'string':\n        if (chars[i] === '\"') {\n          state = 'default';\n          i += 1;\n        } else if (chars[i] === '\\\\' && chars[i + 1] === '\\\\') {\n          i += 2;\n        } else if (chars[i] === '\\\\' && chars[i + 1] === '\"') {\n          i += 2;\n        } else {\n          i += 1;\n        }\n        break;\n\n      default:\n        if (chars[i] === '\"') {\n          state = 'string';\n          i += 1;\n        } else if (chars[i] === '/' && chars[i + 1] === '*') {\n          chars[i] = ' ';\n          chars[i + 1] = ' ';\n          state = 'block-comment';\n          i += 2;\n        } else if (chars[i] === '/' && chars[i + 1] === '/') {\n          chars[i] = ' ';\n          chars[i + 1] = ' ';\n          state = 'line-comment';\n          i += 2;\n        } else {\n          i += 1;\n        }\n    }\n  }\n\n  return chars.join('');\n}\n\n/**\n * Set an option value.\n */\nexport function setOption(\n  config: Config,\n  name: keyof Config,\n  value: any,\n  addToExisting = false\n) {\n  if (addToExisting) {\n    const currentValue: any = config[name];\n    if (currentValue == null) {\n      config[name] = value;\n    } else if (Array.isArray(currentValue)) {\n      currentValue.push(...value);\n    } else if (typeof config[name] === 'object') {\n      config[name] = deepMixin({}, <object>config[name]!, value);\n    } else {\n      throw new Error('Only array or object options may be added');\n    }\n  } else {\n    config[name] = value;\n  }\n}\n\n/**\n * Split a config path into a file name and a child config name.\n *\n * This allows for the case where a file name itself may include the config\n * separator (e.g., a scoped npm package).\n */\nexport function splitConfigPath(\n  path: string,\n  separator = '/'\n): { configFile: string; childConfig?: string } {\n  const lastSep = path.lastIndexOf(configPathSeparator);\n  if (lastSep === 0) {\n    // path is like '@foo' -- specifies a child config\n    return { configFile: '', childConfig: path.slice(1) };\n  }\n  if (lastSep === -1 || path[lastSep - 1] === separator) {\n    // path is like 'foo' or 'node_modules/@foo' -- specifies a\n    // path\n    return { configFile: path };\n  }\n\n  // path is like 'foo@bar' or 'node_modules/@foo@bar' -- specifies a path and\n  // a child config\n  return {\n    configFile: path.slice(0, lastSep),\n    childConfig: path.slice(lastSep + 1)\n  };\n}\n\n/**\n * Convert an object to JSON, handling non-primitive properties\n *\n * @param object The object to serialise.\n * @returns A JSON string\n */\nexport function stringify(object: Object, indent?: string) {\n  return JSON.stringify(object, serializeReplacer, indent);\n}\n\n// ============================================================================\n// support functions\n\nfunction _loadConfig(\n  configPath: string,\n  loadText: TextLoader,\n  args?: { [key: string]: any },\n  childConfig?: string | string[]\n): CancellablePromise<any> {\n  return loadText(configPath)\n    .then(text => {\n      let preConfig: { [key: string]: any };\n\n      try {\n        preConfig = parseJson(text);\n      } catch (error) {\n        throw new Error(`Invalid JSON in ${configPath}`);\n      }\n\n      // extends paths are assumed to be relative and use '/'\n      if (preConfig.extends) {\n        const parts = configPath.split('/');\n        const { configFile, childConfig } = splitConfigPath(preConfig.extends);\n        const extensionPath = parts\n          .slice(0, parts.length - 1)\n          .concat(configFile)\n          .join('/');\n\n        return _loadConfig(\n          extensionPath,\n          loadText,\n          undefined,\n          childConfig\n        ).then(extension => {\n          // Process all keys except 'configs' from the config to the\n          // thing it's extending\n          Object.keys(preConfig)\n            .filter(key => key !== 'configs')\n            .forEach(key => {\n              processOption(<keyof Config>key, preConfig[key], extension);\n            });\n\n          // If config has a 'configs' property, mix its values into\n          // extension.configs (slightly deeper mixin)\n          if (preConfig.configs) {\n            if (extension.configs == null) {\n              extension.configs = {};\n            }\n            Object.keys(preConfig.configs).forEach(key => {\n              extension.configs[key] = preConfig.configs[key];\n            });\n          }\n          return extension;\n        });\n      } else {\n        const config: any = {};\n        Object.keys(preConfig).forEach(key => {\n          processOption(<keyof Config>key, preConfig[key], config);\n        });\n        return config;\n      }\n    })\n    .then(config => {\n      if (args && (args.showConfigs || args.help)) {\n        // If we're showing the configs, don't mix in children\n        return config;\n      }\n\n      if (childConfig) {\n        const mixinConfig = (childConfig: string | string[]) => {\n          const configs = Array.isArray(childConfig)\n            ? childConfig\n            : [childConfig];\n          configs.forEach(childConfig => {\n            const child = config.configs[childConfig];\n            if (!child) {\n              throw new Error(`Unknown child config \"${childConfig}\"`);\n            }\n            if (child.extends) {\n              mixinConfig(child.extends);\n            }\n\n            // Mix the child into the current config. Properties\n            // other than the environment resource keys ('node' and\n            // 'browser') will replace values on the parent. The\n            // environment resource objects will be mixed into the\n            // corresponding objects on the parent.\n            Object.keys(child)\n              .filter(key => key !== 'node' && key !== 'browser')\n              .forEach(key => {\n                processOption(<keyof Config>key, child[key], config);\n              });\n\n            ['node', 'browser'].forEach(key => {\n              if (child[key]) {\n                if (config[key]) {\n                  // Run the environment config through\n                  // setOption, then mix it into the main\n                  // config\n                  const envConfig: any = {};\n                  processOption(<keyof Config>key, child[key], envConfig);\n                  Object.assign(config[key], envConfig[key]);\n                } else {\n                  processOption(<keyof Config>key, child[key], config);\n                }\n              }\n            });\n          });\n        };\n\n        mixinConfig(childConfig);\n      }\n      return config;\n    })\n    .then(config => {\n      if (args) {\n        // If any non-additive resources are specified in args, they\n        // will apply to all environments and will override any\n        // environment specific resources.\n        const resources: (keyof ResourceConfig)[] = [\n          'plugins',\n          'reporters',\n          'suites'\n        ];\n        resources.filter(resource => resource in args).forEach(resource => {\n          const environments: (keyof Config)[] = ['node', 'browser'];\n          environments\n            .filter(environment => config[environment])\n            .forEach(environment => {\n              delete config[environment][resource];\n            });\n        });\n\n        Object.keys(args).forEach(key => {\n          processOption(<keyof Config>key, args[key], config);\n        });\n      }\n      return config;\n    });\n}\n\nconst configPathSeparator = '@';\n\n/**\n * Replacer function used in stringify\n */\nfunction serializeReplacer(_key: string, value: any) {\n  if (!value) {\n    return value;\n  }\n\n  if (value instanceof RegExp) {\n    return value.source;\n  }\n\n  if (typeof value === 'function') {\n    return value.toString();\n  }\n\n  return value;\n}\n"]}
{"version":3,"file":"ErrorFormatter.js","sourceRoot":"","sources":["../../../../src/lib/common/ErrorFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["import { diffJson, IDiffResult } from 'diff';\n\nimport { InternError } from '../types';\nimport { Executor } from '../executors/Executor';\n\nexport default class ErrorFormatter implements ErrorFormatterProperties {\n  readonly executor: Executor;\n\n  constructor(executor: Executor) {\n    this.executor = executor;\n  }\n\n  /**\n   * Generates a full error message from a plain Error object, avoiding\n   * duplicate error messages that might be caused by different opinions on\n   * what a stack trace should look like.\n   *\n   * @param error An object describing the error.\n   * @returns A string message describing the error.\n   */\n  format(\n    error: string | Error | InternError,\n    options?: ErrorFormatOptions\n  ): string {\n    options = options || {};\n    let message: string;\n\n    if (typeof error !== 'string' && (error.message || error.stack)) {\n      message =\n        (error.name || 'Error') + ': ' + (error.message || 'Unknown error');\n      let stack = error.stack;\n\n      if (stack) {\n        // V8 puts the original error at the top of the stack too; avoid\n        // redundant output that may cause confusion about how many\n        // times an assertion was actually called\n        if (stack.indexOf(message) === 0) {\n          stack = stack.slice(message.length);\n        } else if (stack.indexOf(error.message) === 0) {\n          stack = stack.slice(String(error.message).length);\n        } else if (stack.indexOf('Error\\n') === 0) {\n          // The stack for errors in Internet Explorer may start with\n          // 'Error'\n          stack = stack.slice('Error'.length);\n        }\n\n        stack = this._normalizeStackTrace(stack);\n      }\n\n      const anyError: any = error;\n\n      // Assertion errors may have showDiff, actual, and expected properties\n      if (\n        (anyError.showDiff &&\n          (typeof anyError.actual === 'object' &&\n            typeof anyError.expected === 'object')) ||\n        (typeof anyError.actual === 'string' &&\n          typeof anyError.expected === 'string')\n      ) {\n        const diff = this._createDiff(anyError.actual, anyError.expected);\n        if (diff) {\n          message += '\\n\\n' + diff + '\\n';\n        }\n      }\n\n      if (stack && /\\S/.test(stack)) {\n        message += stack;\n      } else if (anyError.fileName) {\n        // FireFox errors may have fileName, lineNumber, and\n        // columnNumber properties\n        message += '\\n  at ' + anyError.fileName;\n        if (anyError.lineNumber != null) {\n          message += ':' + anyError.lineNumber;\n\n          if (anyError.columnNumber != null) {\n            message += ':' + anyError.columnNumber;\n          }\n        }\n\n        message += '\\nNo stack';\n      } else {\n        message += '\\nNo stack or location';\n      }\n    } else {\n      message = String(error);\n    }\n\n    const space = options.space;\n    if (space != null) {\n      const lines = message.split('\\n');\n      message = [lines[0]]\n        .concat(\n          lines.slice(1).map(line => {\n            return space + line;\n          })\n        )\n        .join('\\n');\n    }\n\n    return message;\n  }\n\n  protected _getSource(tracepath: string): string {\n    if (tracepath === '<anonymous>') {\n      return 'anonymous';\n    }\n    return tracepath;\n  }\n\n  /**\n   * Creates a unified diff to explain the difference between two objects.\n   *\n   * @param actual The actual result.\n   * @param expected The expected result.\n   * @returns A unified diff formatted string representing the difference\n   * between the two objects.\n   */\n  protected _createDiff(actual: string, expected: string): string;\n  protected _createDiff(actual: object, expected: object): string;\n  protected _createDiff(\n    actual: string | object,\n    expected: string | object\n  ): string {\n    // TODO: Remove the casts when the diffJson typings are updated (the\n    // current typings are missing the options argument).\n    let diff = <IDiffResult[]>(<any>diffJson)(actual, expected, {\n      undefinedReplacement: null\n    });\n    if (diff.length === 1 && !diff[0].added && !diff[0].removed) {\n      return '';\n    }\n\n    return diff.reduce((d, { value, added, removed }) => {\n      const lastChar = value[value.length - 1] === '\\n' ? '\\n' : '';\n      const lines = value.split('\\n');\n      if (lastChar === '\\n') {\n        lines.pop();\n      }\n      let prefix = '';\n      if (d.length > 0 && d[d.length - 1] !== '\\n') {\n        prefix = '\\n';\n      }\n      const char = added ? 'E' : removed ? 'A' : ' ';\n      return d + `${prefix}${char} ` + lines.join(`\\n${char} `) + lastChar;\n    }, '');\n  }\n\n  /**\n   * Return a trace line in a standardized format.\n   */\n  protected _formatLine(data: { func?: string; source: string }) {\n    if (!data.func) {\n      return '  @ ' + this._getSource(data.source);\n    }\n    return '  at ' + data.func + ' @ ' + this._getSource(data.source);\n  }\n\n  /**\n   * Parse a stack trace, apply any source mappings, and normalize its format.\n   */\n  protected _normalizeStackTrace(stack: string) {\n    let lines = stack.replace(/\\s+$/, '').split('\\n');\n    let firstLine = '';\n\n    // strip leading blank lines\n    while (/^\\s*$/.test(lines[0])) {\n      lines = lines.slice(1);\n    }\n\n    let stackLines = /^\\s*at /.test(lines[0])\n      ? this._processChromeTrace(lines)\n      : this._processSafariTrace(lines);\n\n    if (this.executor.config.filterErrorStack) {\n      stackLines = stackLines.filter(line => {\n        return !(\n          /\\binternal\\/process\\//.test(line) ||\n          /\\bnode_modules\\/(?!digdug|leadfoot)/.test(line) ||\n          /\\/__intern\\//.test(line) ||\n          /\\bModule\\.(?:runMain|load)/.test(line) ||\n          /\\bModule\\._\\w+/.test(line) ||\n          /\\bbootstrap_node\\.js/.test(line) ||\n          /<module.js[:>]/.test(line) ||\n          /<anonymous>$/.test(line) ||\n          /<native>$/.test(line)\n        );\n      });\n    }\n\n    return '\\n' + firstLine + stackLines.join('\\n');\n  }\n\n  /**\n   * Process Chrome, Opera, and IE traces.\n   *\n   * Ex)\n   *   at Object._updateExpressionOptions (AxiomEditor.js:511)\n   *   at Object.<anonymous> (AxiomEditor.js:291)\n   *   at Function.m.emit (dojo.js.uncompressed.js:8875)\n   */\n  protected _processChromeTrace(lines: string[]) {\n    return lines.map(line => {\n      let match: RegExpMatchArray | null;\n      if ((match = /^\\s*at (.+?) \\(([^)]+)\\)$/.exec(line))) {\n        return this._formatLine({ func: match[1], source: match[2] });\n      } else if ((match = /^\\s*at (.*)/.exec(line))) {\n        return this._formatLine({ source: match[1] });\n      } else {\n        return line;\n      }\n    });\n  }\n\n  /**\n   * Process Safari and Firefox traces.\n   *\n   * Ex)\n   *   _updateExpressionOptions@http://localhost:8080/AxiomEditor.js:511:49\n   *   http://localhost:8080/AxiomEditor.js:291:34\n   *   dispatchEvent@[native code]\n   *   emit@http://ajax.googleapis.com/ajax/libs/dojo/1.12.2/dojo/dojo.js:118:282\n   */\n  protected _processSafariTrace(lines: string[]) {\n    return lines.map(line => {\n      let match: RegExpMatchArray | null;\n      if ((match = /^([^@]+)@(.*)/.exec(line))) {\n        return this._formatLine({ func: match[1], source: match[2] });\n      } else if ((match = /^(\\w+:\\/\\/.*)/.exec(line))) {\n        return this._formatLine({ source: match[1] });\n      } else {\n        return line;\n      }\n    });\n  }\n}\n\nexport interface ErrorFormatterProperties {\n  executor: Executor;\n}\n\nexport interface ErrorFormatOptions {\n  space?: string;\n}\n"]}
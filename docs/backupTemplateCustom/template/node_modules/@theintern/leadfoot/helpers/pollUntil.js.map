{"version":3,"file":"pollUntil.js","sourceRoot":"","sources":["../../../src/helpers/pollUntil.ts"],"names":[],"mappings":";;AAAA,kCAAoC;AAuHpC,SAAwB,SAAS,CAC/B,MAOU,EACV,aAA8B,EAC9B,OAAgB,EAChB,YAAqB;IAErB,IAAI,IAAuB,CAAC;IAE5B,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QACrC,YAAY,GAAG,OAAO,CAAC;QACvB,OAAO,GAAG,aAAa,CAAC;KACzB;SAAM;QACL,IAAI,GAAG,aAAa,CAAC;KACtB;IAED,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAClB,YAAY,GAAG,YAAY,IAAI,EAAE,CAAC;IAElC,OAAO;QACL,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,eAAuB,CAAC;QAE5B,OAAO,OAAO,CAAC,sBAAsB,EAAE,CAAC,IAAI,CAAC,UAAS,cAAc;YAClE,IAAI,aAAwB,CAAC;YAE7B,SAAS,WAAW,CAAC,MAAW;gBAC9B,aAAa,GAAG,MAAM,CAAC;YACzB,CAAC;YAED,SAAS,MAAM;gBACb,IAAI,aAAa,YAAY,KAAK,EAAE;oBAClC,MAAM,aAAa,CAAC;iBACrB;gBACD,IAAI,aAAa,IAAI,IAAI,EAAE;oBACzB,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;oBAC5D,KAAK,CAAC,IAAI,GAAG,eAAe,CAAC;oBAC7B,MAAM,KAAK,CAAC;iBACb;gBACD,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,SAAS,OAAO;gBACd,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;oBAC3B,OAAO,OAAO,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACrE;gBACD,OAAO,MAAM,EAAE,CAAC;YAClB,CAAC;YAED,IAAI,CAAC,KAAK,CAAS,OAAO,CAAC,EAAE;gBAC3B,eAAe,GAAG,cAAc,CAAC;aAClC;iBAAM;gBACL,OAAO,GAAG,cAAc,CAAC;aAC1B;YAED,OAAO,OAAO;iBACX,sBAAsB,CAAC,OAAQ,CAAC;iBAChC,IAAI,CAAC;gBACJ,uBAAuB;gBACvB,OAAO,OAAO,CAAC,YAAY;gBACzB,0BAA0B,CAAC,UACzB,MAAyB,EACzB,IAAW,EACX,OAAe,EACf,YAAoB,EACpB,IAAc;oBAEd,sBAAsB;oBACtB,MAAM,GAAa,IAAI,QAAQ,CAAS,MAAM,CAAC,CAAC;oBAEhD,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,OAAO,CAAC;oBAE7C,CAAC,SAAS,IAAI;wBACZ,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAExC,qBAAqB;wBACrB,IAAI,MAAM,IAAI,IAAI,EAAE;4BAClB,IAAI,CAAC,MAAM,CAAC,CAAC;yBACd;6BAAM,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,OAAO,EAAE;4BACvC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;yBAChC;6BAAM;4BACL,IAAI,CAAC,IAAI,CAAC,CAAC;yBACZ;oBACH,CAAC,CAAC,EAAE,CAAC;gBACP,CAAC,EACD,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAC5D,CAAC;YACJ,CAAC,CAAC;iBACD,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC;iBAC9B,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAlGD,4BAkGC","sourcesContent":["import * as util from '../lib/util';\nimport Command from '../Command';\nimport { CancellablePromise } from '@theintern/common';\n\n/**\n * A [[Command]] helper that polls for a value within the client environment\n * until the value exists or a timeout is reached.\n *\n * ```js\n * import Command from 'leadfoot/Command';\n * import pollUntil from 'leadfoot/helpers/pollUntil';\n *\n * new Command(session)\n *     .get('http://example.com')\n *     .then(pollUntil('return document.getElementById(\"a\");', 1000))\n *     .then(\n *         elementA => {\n *             // element was found\n *         },\n *         error => {\n *             // element was not found\n *         }\n *     );\n * ```\n *\n * ```js\n * import Command from 'leadfoot/Command';\n * import pollUntil from 'leadfoot/helpers/pollUntil';\n *\n * new Command(session)\n *     .get('http://example.com')\n *     .then(pollUntil(value => {\n *         const element = document.getElementById('a');\n *         return element && element.value === value ? true : null;\n *     }, [ 'foo' ], 1000))\n *     .then(\n *         () => {\n *             // value was set to 'foo'\n *         },\n *         error => {\n *             // value was never set\n *         }\n *     );\n * ```\n *\n * @param poller The poller function to execute on an interval. The function\n * should return `null` or `undefined` if there is not a result. If the poller\n * function throws, polling will halt.\n *\n * @param args An array of arguments to pass to the poller function when it is\n * invoked. Only values that can be serialised to JSON, plus [[Element]]\n * objects, can be specified as arguments.\n *\n * @param timeout The maximum amount of time to wait for a successful result,\n * in milliseconds. If not specified, the current `executeAsync` maximum\n * timeout for the session will be used.\n *\n * @param pollInterval The amount of time to wait between calls to the poller\n * function, in milliseconds. If not specified, defaults to 67ms.\n *\n * @returns A [[Command]] callback function that, when called, returns a\n * promise that resolves to the value returned by the poller function on\n * success and rejects on failure.\n */\nexport default function pollUntil<T>(\n  poller: (() => any) | string,\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntil<T>(\n  poller: string,\n  args?: any[],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntil<T>(\n  poller: () => any,\n  args?: never[],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntil<T, U>(\n  poller: (u: U) => any,\n  args?: [U],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntil<T, U, V>(\n  poller: (u: U, v: V) => any,\n  args?: [U, V],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntil<T, U, V, W>(\n  poller: (u: U, v: V, w: W) => any,\n  args?: [U, V, W],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntil<T, U, V, W, X>(\n  poller: (u: U, v: V, w: W, x: X) => any,\n  args?: [U, V, W, X],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntil<T, U, V, W, X, Y>(\n  poller: (u: U, v: V, w: W, x: X, y: Y) => any,\n  args?: [U, V, W, X, Y],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntil<T, U, V, W, X, Y>(\n  poller:\n    | (() => any)\n    | ((u: U) => any)\n    | ((u: U, v: V) => any)\n    | ((u: U, v: V, w: W) => any)\n    | ((u: U, v: V, w: W, x: X) => any)\n    | ((u: U, v: V, w: W, x: X, y: Y) => any)\n    | string,\n  argsOrTimeout?: any[] | number,\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T> {\n  let args: any[] | undefined;\n\n  if (typeof argsOrTimeout === 'number') {\n    pollInterval = timeout;\n    timeout = argsOrTimeout;\n  } else {\n    args = argsOrTimeout;\n  }\n\n  args = args || [];\n  pollInterval = pollInterval || 67;\n\n  return function(this: Command<any>) {\n    const session = this.session;\n    let originalTimeout: number;\n\n    return session.getExecuteAsyncTimeout().then(function(currentTimeout) {\n      let resultOrError: T | Error;\n\n      function storeResult(result: any) {\n        resultOrError = result;\n      }\n\n      function finish() {\n        if (resultOrError instanceof Error) {\n          throw resultOrError;\n        }\n        if (resultOrError == null) {\n          const error = new Error('Polling timed out with no result');\n          error.name = 'ScriptTimeout';\n          throw error;\n        }\n        return resultOrError;\n      }\n\n      function cleanup() {\n        if (!isNaN(originalTimeout)) {\n          return session.setExecuteAsyncTimeout(originalTimeout).then(finish);\n        }\n        return finish();\n      }\n\n      if (!isNaN(<number>timeout)) {\n        originalTimeout = currentTimeout;\n      } else {\n        timeout = currentTimeout;\n      }\n\n      return session\n        .setExecuteAsyncTimeout(timeout!)\n        .then(function() {\n          /* jshint maxlen:140 */\n          return session.executeAsync(\n            /* istanbul ignore next */ function(\n              poller: string | Function,\n              args: any[],\n              timeout: number,\n              pollInterval: number,\n              done: Function\n            ): void {\n              /* jshint evil:true */\n              poller = <Function>new Function(<string>poller);\n\n              const endTime = Number(new Date()) + timeout;\n\n              (function poll(this: any) {\n                const result = poller.apply(this, args);\n\n                /*jshint evil:true */\n                if (result != null) {\n                  done(result);\n                } else if (Number(new Date()) < endTime) {\n                  setTimeout(poll, pollInterval);\n                } else {\n                  done(null);\n                }\n              })();\n            },\n            [util.toExecuteString(poller), args, timeout, pollInterval]\n          );\n        })\n        .then(storeResult, storeResult)\n        .then(cleanup, cleanup);\n    });\n  };\n}\n"]}
{"version":3,"file":"pollUntilTruthy.js","sourceRoot":"","sources":["../../../src/helpers/pollUntilTruthy.ts"],"names":[],"mappings":";;AAAA,yCAAoC;AACpC,oCAA8C;AA0D9C,SAAwB,eAAe,CACrC,MAOU,EACV,aAA8B,EAC9B,OAAgB,EAChB,YAAqB;IAErB,IAAM,IAAI,GAAU,EAAE,CAAC;IAEvB,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;QACrC,YAAY,GAAG,OAAO,CAAC;QACvB,OAAO,GAAG,aAAa,CAAC;KACzB;SAAM,IAAI,aAAa,EAAE;QACxB,IAAI,CAAC,IAAI,OAAT,IAAI,EAAS,aAAa,EAAE;KAC7B;IAED,IAAI,CAAC,OAAO,CAAC,sBAAe,CAAC,MAAM,CAAC,CAAC,CAAC;IAEtC,IAAM,OAAO,GAAG,0BAA0B,CAAC,UAAS,MAAc;QAChE,IAAM,IAAI,GAAU,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACpE,IAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtD,sEAAsE;QACtE,4CAA4C;QAC5C,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;IACrC,CAAC,CAAC;IAEF,OAAO,mBAAS,CAAC,sBAAe,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;AAC1E,CAAC;AAjCD,kCAiCC","sourcesContent":["import pollUntil from './pollUntil';\nimport { toExecuteString } from '../lib/util';\nimport { CancellablePromise } from '@theintern/common';\n\nexport default function pollUntilTruthy<T>(\n  poller: (() => any) | string,\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntilTruthy<T>(\n  poller: string,\n  args?: any[],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntilTruthy<T>(\n  poller: () => any,\n  args?: never[],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntilTruthy<T, U>(\n  poller: (u: U) => any,\n  args?: [U],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntilTruthy<T, U, V>(\n  poller: (u: U, v: V) => any,\n  args?: [U, V],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntilTruthy<T, U, V, W>(\n  poller: (u: U, v: V, w: W) => any,\n  args?: [U, V, W],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntilTruthy<T, U, V, W, X>(\n  poller: (u: U, v: V, w: W, x: X) => any,\n  args?: [U, V, W, X],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntilTruthy<T, U, V, W, X, Y>(\n  poller: (u: U, v: V, w: W, x: X, y: Y) => any,\n  args?: [U, V, W, X, Y],\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T>;\n\nexport default function pollUntilTruthy<T, U, V, W, X, Y>(\n  poller:\n    | (() => any)\n    | ((u: U) => any)\n    | ((u: U, v: V) => any)\n    | ((u: U, v: V, w: W) => any)\n    | ((u: U, v: V, w: W, x: X) => any)\n    | ((u: U, v: V, w: W, x: X, y: Y) => any)\n    | string,\n  argsOrTimeout?: any[] | number,\n  timeout?: number,\n  pollInterval?: number\n): () => CancellablePromise<T> {\n  const args: any[] = [];\n\n  if (typeof argsOrTimeout === 'number') {\n    pollInterval = timeout;\n    timeout = argsOrTimeout;\n  } else if (argsOrTimeout) {\n    args.push(...argsOrTimeout);\n  }\n\n  args.unshift(toExecuteString(poller));\n\n  const _poller = /* istanbul ignore next */ function(poller: string) {\n    const args: any[] = Array.prototype.slice.apply(arguments).slice(1);\n    const result = new Function(poller).apply(null, args);\n    // If result is truthy, return it. Otherwise return `undefined`, which\n    // will cause pollUntil to continue polling.\n    return result ? result : undefined;\n  };\n\n  return pollUntil(toExecuteString(_poller), args, timeout, pollInterval);\n}\n"]}
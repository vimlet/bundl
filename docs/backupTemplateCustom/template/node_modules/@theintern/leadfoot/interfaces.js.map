{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { CancellablePromise } from '@theintern/common';\nimport { Url } from 'url';\n\nexport { CancellablePromise };\n\n/**\n * These interface describes the capabilities that may be implemented by a\n * WebDriver server. Many of these are standard\n * [[https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities|WebDriver capabilities]],\n * but the interface also includes a number of Leadfoot-specific feature and\n * defect indicators. For example, the [[interfaces.Capabilities.brokenClick]]\n * capability indicates that the remote doesn't properly support the 'click'\n * action.\n */\nexport interface Capabilities {\n  _filled?: boolean;\n\n  /**\n   * Whether the session can interact with the remote browser's application\n   * cache.\n   */\n  applicationCacheEnabled?: boolean;\n\n  /** The remote doesn't implement element/active */\n  brokenActiveElement?: boolean;\n\n  /** The remote doesn't properly implement native mouse clicks */\n  brokenClick?: boolean;\n\n  /** The remote may not return correct computed styles */\n  brokenComputedStyles?: boolean;\n\n  /** Native cookie manipulation doesn't work */\n  brokenCookies?: boolean;\n\n  /** Transformed CSS sizes may be reported incorrectly */\n  brokenCssTransformedSize?: boolean;\n\n  /** Native cookie deletion doesn't work */\n  brokenDeleteCookie?: boolean;\n\n  /** Native window deletion doesn't work */\n  brokenDeleteWindow?: boolean;\n\n  /** The double-click event doesn't work */\n  brokenDoubleClick?: boolean;\n\n  brokenElementDisplayedOffscreen?: boolean;\n  brokenElementDisplayedOpacity?: boolean;\n  brokenElementEnabled?: boolean;\n  brokenElementPosition?: boolean;\n  brokenElementProperty?: boolean;\n  brokenElementSerialization?: boolean;\n  brokenEmptyPost?: boolean;\n  brokenExecuteElementReturn?: boolean;\n  brokenExecuteForNonHttpUrl?: boolean;\n  brokenExecuteUndefinedReturn?: boolean;\n  brokenFileSendKeys?: boolean;\n  brokenFlickFinger?: boolean;\n  brokenHtmlMouseMove?: boolean;\n  brokenHtmlTagName?: boolean;\n  brokenLinkTextLocator?: boolean;\n  brokenLongTap?: boolean;\n  brokenMouseEvents?: boolean;\n  brokenMoveFinger?: boolean;\n  brokenNavigation?: boolean;\n  brokenNullGetSpecAttribute?: boolean;\n  brokenOptionSelect?: boolean;\n  brokenPageSource?: boolean;\n  brokenParentFrameSwitch?: boolean;\n  brokenRefresh?: boolean;\n  brokenSendKeys?: boolean;\n  brokenSessionList?: boolean;\n  brokenSubmitElement?: boolean;\n  brokenTouchScroll?: boolean;\n\n  /** \"Visible\" text includes text that should be hidden */\n  brokenVisibleText?: boolean;\n\n  brokenWhitespaceNormalization?: boolean;\n  brokenWindowClose?: boolean;\n  brokenWindowPosition?: boolean;\n  brokenWindowSize?: boolean;\n  brokenWindowSwitch?: boolean;\n  brokenZeroTimeout?: boolean;\n\n  /** The name of the remote browser (e.g., 'safari') */\n  browserName?: string;\n\n  /**\n   * The remote browser version. This may or may not correspond to the\n   * publicly visible version.\n   */\n  browserVersion?: string;\n\n  /**\n   * The name of the remote mobile device\n   */\n  deviceName?: string;\n\n  /** Whether the remote browser can be resized */\n  dynamicViewport?: boolean;\n\n  /** Whether or not to run capability tests */\n  fixSessionCapabilities?: 'no-detect' | boolean;\n\n  /** The actual log types supported by a remote */\n  fixedLogTypes?: false | string[] | CancellablePromise<string[]>;\n\n  /** Whether the remote can handle modal alerts */\n  handlesAlerts?: boolean;\n\n  /** Whether the remote has a touch screen */\n  hasTouchScreen?: boolean;\n\n  /** Allows the user to specify the initial URL loaded when IE starts. */\n  initialBrowserUrl?: string;\n\n  /** Whether the session can set and query the browser's location context. */\n  locationContextEnabled?: boolean;\n\n  /** Whether mouse actions are enabled */\n  mouseEnabled?: boolean;\n\n  /** Whether the remote browser supports native events */\n  nativeEvents?: boolean;\n\n  /** If true, the remote doesn't support the JWP /displayed endpoint */\n  noElementDisplayed?: boolean;\n\n  /** If true, the remote doesn't support the JWP /equals endpoint */\n  noElementEquals?: boolean;\n\n  /** If true, the remote doesn't support the JWP /keys endpoint */\n  noKeysCommand?: boolean;\n\n  /**\n   * The base platform the remote browser is running on, typically one of\n   * WINDOWS, XP, VISTA, MAC, LINUX, UNIX, ANDROID.\n   */\n  platform?: string;\n\n  /**\n   * The platform the remote browser is running on. This is typically more\n   * specifc than [[interfaces.Capabilities.platform]].\n   */\n  platformName?: string;\n\n  /**\n   * The version of the platform the remote browser is runnign no.\n   */\n  platformVersion?: string;\n\n  /**\n   * Whether the remote browser supports file uploads\n   */\n  remoteFiles?: boolean;\n\n  /**\n   * Whether the remote browser returns immediately after a click or waits\n   * for the click action to occur\n   */\n  returnsFromClickImmediately?: boolean;\n\n  /**\n   * Whether the remote viewport is rotatable between portrait and landscape\n   * views\n   */\n  rotatable?: boolean;\n\n  /**\n   * This indicates that trying to return a reference to a parent frame from\n   * a script will crash the remote browser\n   */\n  scriptedParentFrameCrashesBrowser?: boolean;\n\n  /**\n   * The [[keys.keys|key]] used to run shortcuts, typically Cmd (Mac) or Control\n   * (Windows, Linux)\n   */\n  shortcutKey?: any;\n\n  /** Whether the remote browser supports CSS transforms */\n  supportsCssTransforms?: boolean;\n\n  /** Whether scripts can be executed asynchronously in the remote browser */\n  supportsExecuteAsync?: boolean;\n\n  /** Whether the server supports the GET /timeouts endpoint */\n  supportsGetTimeouts?: boolean;\n\n  /** Whether the remote browser allows navigation via data URIs */\n  supportsNavigationDataUris?: boolean;\n\n  /** Whether the remote supports session commands */\n  supportsSessionCommands?: boolean;\n\n  /** Whether the remote browser can take screenshots */\n  takesScreenshot?: boolean;\n\n  /** Whether the remote browser supports touch events */\n  touchEnabled?: boolean;\n\n  /**\n   * Whether the remote server requires element keys to be sent as a flat array\n   */\n  usesFlatKeysArray?: boolean;\n\n  /** Whether window commands use 'handle' instead of 'name' */\n  usesHandleParameter?: boolean;\n\n  /** Whether the Element '/attribute' endpoint uses W3C semantics */\n  usesWebDriverElementAttribute?: boolean;\n\n  /** Whether the Element '/value' endpoint uses a 'text' property */\n  usesWebDriverElementValue?: boolean;\n\n  /**\n   * Whether getActiveElement uses a POST or GET\n   */\n  usesWebDriverActiveElement?: boolean;\n\n  /**\n   * Whether the remote uses `/execute/async` rathern than `/execute_async` for\n   * asynchronous execution\n   */\n  usesWebDriverExecuteASync?: boolean;\n\n  /**\n   * Whether the remote uses `/execute/sync` rathern than `/execute` for\n   * synchronous execution\n   */\n  usesWebDriverExecuteSync?: boolean;\n\n  /**\n   * Whether find commands should use WebDriver (vs JsonWireProtocol) locators\n   */\n  usesWebDriverLocators?: boolean;\n\n  /**\n   * Whether the remote browser uses WebDriver-style timeouts\n   */\n  usesWebDriverTimeouts?: boolean;\n\n  /**\n   * Whether the remote browser uses WebDriver-style window handle command (/window)\n   */\n  usesWebDriverWindowHandleCommands?: boolean;\n\n  /**\n   * Whether the remote browser uses WebDriver-style window commands (/rect, implicit handles)\n   */\n  usesWebDriverWindowCommands?: boolean;\n\n  /** The remote browser version */\n  version?: string;\n\n  /** Whether the session supports interactions with storage objects */\n  webStorageEnabled?: boolean;\n\n  [key: string]: any;\n}\n\nexport interface Geolocation {\n  altitude?: number;\n  latitude?: number;\n  longitude?: number;\n}\n\nexport interface LogEntry {\n  timestamp: number;\n  level: string;\n  message: string;\n}\n\nexport interface WebDriverCookie {\n  name: string;\n  value: string;\n  path?: string;\n  domain?: string;\n  secure?: boolean;\n  expiry?: string | Date | number;\n}\n\nexport interface LeadfootURL extends Url {\n  username?: string;\n  password?: string;\n  accessKey?: string;\n}\n\nexport interface LeadfootError extends Error {\n  response?: { text: string };\n}\n\nexport interface WebDriverResponse {\n  value: any;\n}\n"]}
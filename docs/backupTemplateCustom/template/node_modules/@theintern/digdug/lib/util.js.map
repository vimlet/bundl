{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/lib/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHandle, Handle } from '@theintern/common';\nimport { mkdirSync, statSync, writeFile as fsWriteFile } from 'fs';\nimport { dirname } from 'path';\nimport { execSync } from 'child_process';\n\n/**\n * Attaches an event to a Node.js EventEmitter and returns a handle for removing\n * the listener later.\n *\n * @param emitter A Node.js EventEmitter object.\n * @param event The name of the event to listen for.\n * @param listener The event listener that will be invoked when the event\n * occurs.\n * @returns A remove handle.\n */\nexport function on(\n  emitter: NodeJS.EventEmitter,\n  event: string | symbol,\n  listener: (...args: any[]) => void\n): Handle {\n  emitter.on(event, listener);\n  return createHandle(() => emitter.removeListener(event, listener));\n}\n\n/**\n * Returns true if a file or directory exists\n *\n * @param filename\n * @returns true if filename exists, false otherwise\n */\nexport function fileExists(filename: string): boolean {\n  try {\n    statSync(filename);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Kill a process and its immediate children\n *\n * This function will attempt to kill all processes that it should, and will\n * report an error at the end if any process could not be killed.\n */\nexport function kill(pid: number) {\n  let error: Error | undefined;\n\n  getChildProcesses(pid).forEach(childPid => {\n    try {\n      killProcess(childPid);\n    } catch (err) {\n      error = err;\n    }\n  });\n\n  try {\n    killProcess(pid);\n  } catch (err) {\n    error = err;\n  }\n\n  if (error) {\n    throw new Error(\n      `Failed to kill ${pid} or one of its children: ${error.message}`\n    );\n  }\n}\n\nfunction killProcess(pid: number) {\n  try {\n    process.kill(pid);\n  } catch (error) {\n    // Ignore the error if the process couldn't be found since that means\n    // it's already dead\n    if (error.code !== 'ESRCH') {\n      throw error;\n    }\n  }\n}\n\n/**\n * Writes data to a file.\n *\n * The file's parent directories will be created if they do not already exist.\n *\n * @param data\n * @param filename\n * @returns A Promise that resolves when the file has been written\n */\nexport function writeFile(data: any, filename: string) {\n  return new Promise<void>(function(resolve, reject) {\n    function mkdirp(dir: string) {\n      if (!dir) {\n        return;\n      }\n\n      try {\n        mkdirSync(dir);\n      } catch (error) {\n        // A parent directory didn't exist, create it\n        if (error.code === 'ENOENT') {\n          mkdirp(dirname(dir));\n          mkdirp(dir);\n        } else {\n          if (!statSync(dir).isDirectory()) {\n            throw error;\n          }\n        }\n      }\n    }\n\n    mkdirp(dirname(filename));\n    fsWriteFile(filename, data, function(error) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\n/**\n * Get the children of a process\n */\nfunction getChildProcesses(pid: number) {\n  const command =\n    process.platform === 'win32'\n      ? 'wmic PROCESS GET ParentProcessId,ProcessId'\n      : 'ps -A -o ppid,pid';\n\n  return execSync(command, { encoding: 'utf8' })\n    .trim()\n    .split('\\n')\n    .slice(1)\n    .map(line => line.trim())\n    .map(line => line.split(/\\s+/).map(word => word.trim()))\n    .map(words => ({ parent: Number(words[0]), child: Number(words[1]) }))\n    .filter(entry => entry.parent === pid)\n    .map(entry => entry.child);\n}\n"]}
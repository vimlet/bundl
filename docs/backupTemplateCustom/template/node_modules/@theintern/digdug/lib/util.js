"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@theintern/common");
var fs_1 = require("fs");
var path_1 = require("path");
var child_process_1 = require("child_process");
/**
 * Attaches an event to a Node.js EventEmitter and returns a handle for removing
 * the listener later.
 *
 * @param emitter A Node.js EventEmitter object.
 * @param event The name of the event to listen for.
 * @param listener The event listener that will be invoked when the event
 * occurs.
 * @returns A remove handle.
 */
function on(emitter, event, listener) {
    emitter.on(event, listener);
    return common_1.createHandle(function () { return emitter.removeListener(event, listener); });
}
exports.on = on;
/**
 * Returns true if a file or directory exists
 *
 * @param filename
 * @returns true if filename exists, false otherwise
 */
function fileExists(filename) {
    try {
        fs_1.statSync(filename);
        return true;
    }
    catch (error) {
        return false;
    }
}
exports.fileExists = fileExists;
/**
 * Kill a process and its immediate children
 *
 * This function will attempt to kill all processes that it should, and will
 * report an error at the end if any process could not be killed.
 */
function kill(pid) {
    var error;
    getChildProcesses(pid).forEach(function (childPid) {
        try {
            killProcess(childPid);
        }
        catch (err) {
            error = err;
        }
    });
    try {
        killProcess(pid);
    }
    catch (err) {
        error = err;
    }
    if (error) {
        throw new Error("Failed to kill " + pid + " or one of its children: " + error.message);
    }
}
exports.kill = kill;
function killProcess(pid) {
    try {
        process.kill(pid);
    }
    catch (error) {
        // Ignore the error if the process couldn't be found since that means
        // it's already dead
        if (error.code !== 'ESRCH') {
            throw error;
        }
    }
}
/**
 * Writes data to a file.
 *
 * The file's parent directories will be created if they do not already exist.
 *
 * @param data
 * @param filename
 * @returns A Promise that resolves when the file has been written
 */
function writeFile(data, filename) {
    return new Promise(function (resolve, reject) {
        function mkdirp(dir) {
            if (!dir) {
                return;
            }
            try {
                fs_1.mkdirSync(dir);
            }
            catch (error) {
                // A parent directory didn't exist, create it
                if (error.code === 'ENOENT') {
                    mkdirp(path_1.dirname(dir));
                    mkdirp(dir);
                }
                else {
                    if (!fs_1.statSync(dir).isDirectory()) {
                        throw error;
                    }
                }
            }
        }
        mkdirp(path_1.dirname(filename));
        fs_1.writeFile(filename, data, function (error) {
            if (error) {
                reject(error);
            }
            else {
                resolve();
            }
        });
    });
}
exports.writeFile = writeFile;
/**
 * Get the children of a process
 */
function getChildProcesses(pid) {
    var command = process.platform === 'win32'
        ? 'wmic PROCESS GET ParentProcessId,ProcessId'
        : 'ps -A -o ppid,pid';
    return child_process_1.execSync(command, { encoding: 'utf8' })
        .trim()
        .split('\n')
        .slice(1)
        .map(function (line) { return line.trim(); })
        .map(function (line) { return line.split(/\s+/).map(function (word) { return word.trim(); }); })
        .map(function (words) { return ({ parent: Number(words[0]), child: Number(words[1]) }); })
        .filter(function (entry) { return entry.parent === pid; })
        .map(function (entry) { return entry.child; });
}
//# sourceMappingURL=util.js.map
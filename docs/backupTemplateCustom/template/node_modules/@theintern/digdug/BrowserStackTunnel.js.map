{"version":3,"file":"BrowserStackTunnel.js","sourceRoot":"","sources":["../../src/BrowserStackTunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import { chmodSync } from 'fs';\nimport { join } from 'path';\nimport { CancellablePromise, request } from '@theintern/common';\nimport Tunnel, {\n  TunnelProperties,\n  DownloadOptions,\n  ChildExecutor,\n  NormalizedEnvironment\n} from './Tunnel';\nimport { parse as parseUrl, Url } from 'url';\nimport { JobState } from './interfaces';\nimport { kill, on } from './lib/util';\n\n/**\n * A BrowserStack tunnel.\n *\n * The accessKey and username properties will be initialized using\n * BROWSERSTACK_ACCESS_KEY and BROWSERSTACK_USERNAME.\n */\nexport default class BrowserStackTunnel extends Tunnel\n  implements BrowserStackProperties {\n  /**\n   * Whether or not to start the tunnel with only WebDriver support. Setting\n   * this value to `false` is not supported.\n   */\n  automateOnly!: true;\n\n  /**\n   * The URL of a service that provides a list of environments supported by\n   * the tunnel.\n   */\n  environmentUrl!: string;\n\n  /**\n   * If true, any other tunnels running on the account will be killed when\n   * the tunnel is started.\n   */\n  killOtherTunnels!: boolean;\n\n  /**\n   * A list of server URLs that should be proxied by the tunnel. Only the\n   * hostname, port, and protocol are used.\n   */\n  servers!: (Url | string)[];\n\n  /**\n   * Skip verification that the proxied servers are online and responding at\n   * the time the tunnel starts.\n   */\n  skipServerValidation!: boolean;\n\n  /** If true, route all traffic via the local machine. */\n  forceLocal!: boolean;\n\n  constructor(options?: BrowserStackOptions) {\n    super(\n      Object.assign(\n        {\n          accessKey: process.env.BROWSERSTACK_ACCESS_KEY,\n          automateOnly: true,\n          directory: join(__dirname, 'browserstack'),\n          environmentUrl: 'https://www.browserstack.com/automate/browsers.json',\n          forceLocal: false,\n          hostname: 'hub.browserstack.com',\n          killOtherTunnels: false,\n          port: '443',\n          protocol: 'https',\n          servers: [],\n          skipServerValidation: true,\n          username: process.env.BROWSERSTACK_USERNAME\n        },\n        options || {}\n      )\n    );\n  }\n\n  get auth() {\n    return `${this.username || ''}:${this.accessKey || ''}`;\n  }\n\n  get executable() {\n    return join(\n      this.directory,\n      `BrowserStackLocal${this.platform === 'win32' ? '.exe' : ''}`\n    );\n  }\n\n  get extraCapabilities(): Object {\n    const capabilities: any = {\n      'browserstack.local': 'true'\n    };\n\n    if (this.tunnelId) {\n      capabilities['browserstack.localIdentifier'] = this.tunnelId;\n    }\n\n    return capabilities;\n  }\n\n  get url() {\n    const platform = this.platform;\n    const architecture = this.architecture;\n    let url =\n      'https://www.browserstack.com/browserstack-local/BrowserStackLocal-';\n\n    if (platform === 'darwin' && architecture === 'x64') {\n      url += platform + '-' + architecture;\n    } else if (platform === 'win32') {\n      url += platform;\n    } else if (\n      platform === 'linux' &&\n      (architecture === 'ia32' || architecture === 'x64')\n    ) {\n      url += platform + '-' + architecture;\n    } else {\n      throw new Error(platform + ' on ' + architecture + ' is not supported');\n    }\n\n    url += '.zip';\n    return url;\n  }\n\n  protected _postDownloadFile(\n    data: Buffer,\n    options?: DownloadOptions\n  ): Promise<void> {\n    return super._postDownloadFile(data, options).then(() => {\n      const executable = this.executable;\n      chmodSync(executable, parseInt('0755', 8));\n    });\n  }\n\n  protected _makeArgs(..._values: string[]): string[] {\n    if (!this.username || !this.accessKey) {\n      throw new Error('BrowserStackTunnel requires a username and access key');\n    }\n\n    const args = [\n      this.accessKey,\n      this.servers\n        .map(function(server) {\n          const url = parseUrl(String(server));\n          return [\n            url.hostname,\n            url.port,\n            url.protocol === 'https:' ? 1 : 0\n          ].join(',');\n        })\n        .join(',')\n    ];\n\n    this.automateOnly && args.push('-onlyAutomate');\n    this.forceLocal && args.push('-forcelocal');\n    this.killOtherTunnels && args.push('-force');\n    this.skipServerValidation && args.push('-skipCheck');\n    this.tunnelId && args.push('-localIdentifier', this.tunnelId);\n    this.verbose && args.push('-v');\n\n    if (this.proxy) {\n      const proxy = parseUrl(this.proxy);\n\n      proxy.hostname && args.push('-proxyHost', proxy.hostname);\n      proxy.port && args.push('-proxyPort', proxy.port);\n\n      if (proxy.auth) {\n        const auth = proxy.auth.split(':');\n        args.push('-proxyUser', auth[0], '-proxyPass', auth[1]);\n      }\n      /*else {\n\t\t\t\tproxy.username && args.push('-proxyUser', proxy.username);\n\t\t\t\tproxy.password && args.push('-proxyPass', proxy.password);\n\t\t\t}*/\n    }\n\n    return args;\n  }\n\n  sendJobState(jobId: string, data: JobState): CancellablePromise<void> {\n    const payload = JSON.stringify({\n      status: data.status || data.success ? 'completed' : 'error'\n    });\n\n    const url = `https://www.browserstack.com/automate/sessions/${jobId}.json`;\n    return request(url, {\n      method: 'put',\n      data: payload,\n      headers: {\n        'Content-Length': String(Buffer.byteLength(payload, 'utf8')),\n        'Content-Type': 'application/json'\n      },\n      password: this.accessKey,\n      username: this.username,\n      proxy: this.proxy\n    }).then<void>(response => {\n      if (response.status < 200 || response.status >= 300) {\n        return response.text().then(text => {\n          throw new Error(\n            text || `Server reported ${response.status} with no other data.`\n          );\n        });\n      }\n    });\n  }\n\n  protected _start(executor: ChildExecutor) {\n    return this._makeChild((child, resolve, reject) => {\n      let handle = on(child.stdout, 'data', (data: any) => {\n        data = String(data);\n        const error = /\\s*\\*\\*\\* Error: (.*)$/m.exec(data);\n        if (error) {\n          handle.destroy();\n          reject(new Error(`The tunnel reported: ${error[1]}`));\n        } else if (\n          data.indexOf(\n            'You can now access your local server(s) in our remote browser'\n          ) > -1\n        ) {\n          handle.destroy();\n          resolve();\n        } else {\n          const line = data.replace(/^\\s+/, '').replace(/\\s+$/, '');\n          if (\n            /^BrowserStackLocal v/.test(line) ||\n            /^Connecting to BrowserStack/.test(line) ||\n            /^Connected/.test(line)\n          ) {\n            this.emit({\n              type: 'status',\n              target: this,\n              status: line\n            });\n          }\n        }\n      });\n\n      executor(child, resolve, reject);\n    });\n  }\n\n  protected _stop(): Promise<number> {\n    return new Promise(resolve => {\n      const childProcess = this._process;\n      if (!childProcess) {\n        resolve();\n        return;\n      }\n\n      let exited = false;\n\n      childProcess.once('exit', function(code) {\n        exited = true;\n        resolve(code);\n      });\n      kill(childProcess.pid);\n\n      // As of at least version 5.1, BrowserStackLocal spawns a secondary\n      // process. This is the one that needs to receive the CTRL-C, but\n      // Node doesn't provide an easy way to get the PID of the secondary\n      // process, so we'll just wait a few seconds, then kill the process\n      // if it hasn't ended cleanly.\n      setTimeout(function() {\n        if (!exited) {\n          kill(childProcess.pid);\n        }\n      }, 5000);\n    });\n  }\n\n  /**\n   * Attempt to normalize a BrowserStack described environment with the\n   * standard Selenium capabilities\n   *\n   * BrowserStack returns a list of environments that looks like:\n   *\n   * {\n   *     \"browser\": \"opera\",\n   *     \"os_version\": \"Lion\",\n   *     \"browser_version\":\"12.15\",\n   *     \"device\": null,\n   *     \"os\": \"OS X\"\n   * }\n   *\n   * @param environment a BrowserStack environment descriptor\n   * @returns a normalized descriptor\n   */\n  protected _normalizeEnvironment(environment: any): NormalizedEnvironment {\n    const platformMap: any = {\n      Windows: {\n        '10': 'WINDOWS',\n        '8.1': 'WIN8',\n        '8': 'WIN8',\n        '7': 'WINDOWS',\n        XP: 'XP'\n      },\n\n      'OS X': 'MAC'\n    };\n\n    const browserMap: any = {\n      ie: 'internet explorer'\n    };\n\n    // Create the BS platform name for a given os + version\n    let platform = platformMap[environment.os] || environment.os;\n    if (typeof platform === 'object') {\n      platform = platform[environment.os_version];\n    }\n\n    const browserName = browserMap[environment.browser] || environment.browser;\n    const version = environment.browser_version;\n\n    return {\n      platform,\n      platformName: environment.os,\n      platformVersion: environment.os_version,\n\n      browserName,\n      browserVersion: version,\n      version: environment.browser_version,\n\n      descriptor: environment,\n\n      intern: {\n        platform,\n        browserName,\n        version\n      }\n    };\n  }\n}\n\nexport interface BrowserStackProperties extends TunnelProperties {\n  /** [[BrowserStackTunnel.BrowserStackTunnel.automateOnly|More info]] */\n  automateOnly: true;\n\n  /** [[BrowserStackTunnel.BrowserStackTunnel.killOtherTunnels|More info]] */\n  killOtherTunnels: boolean;\n\n  /** [[BrowserStackTunnel.BrowserStackTunnel.servers|More info]] */\n  servers: (Url | string)[];\n\n  /** [[BrowserStackTunnel.BrowserStackTunnel.skipServerValidation|More info]] */\n  skipServerValidation: boolean;\n\n  /** [[BrowserStackTunnel.BrowserStackTunnel.forceLocal|More info]] */\n  forceLocal: boolean;\n\n  /** [[BrowserStackTunnel.BrowserStackTunnel.environmentUrl|More info]] */\n  environmentUrl: string;\n}\n\nexport type BrowserStackOptions = Partial<BrowserStackProperties>;\n"]}
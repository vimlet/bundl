{"version":3,"file":"SeleniumTunnel.js","sourceRoot":"","sources":["../../src/SeleniumTunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import Tunnel, {\n  TunnelProperties,\n  DownloadOptions,\n  ChildExecutor\n} from './Tunnel';\nimport { format } from 'util';\nimport { join } from 'path';\nimport { Handle, Task, CancellablePromise } from '@theintern/common';\nimport { fileExists, kill, on, writeFile } from './lib/util';\nimport { satisfies } from 'semver';\nimport { sync as commandExistsSync } from 'command-exists';\n\nconst driverInfo = {\n  SeleniumVersion: '3.141.59',\n  ChromeVersion: '74.0.3729.6',\n  FirefoxVersion: '0.24.0',\n  IEVersion: '3.141.59',\n\n  EdgeVersion: '17134',\n  EdgeUrls: {\n    '15063':\n      'https://download.microsoft.com/download/3/4/2/342316D7-EBE0-4F10-ABA2-AE8E0CDF36DD/MicrosoftWebDriver.exe',\n    '16299':\n      'https://download.microsoft.com/download/D/4/1/D417998A-58EE-4EFE-A7CC-39EF9E020768/MicrosoftWebDriver.exe',\n    '17134':\n      'https://download.microsoft.com/download/F/8/A/F8AF50AB-3C3A-4BC4-8773-DC27B32988DD/MicrosoftWebDriver.exe',\n    '75.0.137.0': {\n      x86:\n        'https://az813057.vo.msecnd.net/webdriver/msedgedriver_x86/msedgedriver.exe',\n      x64:\n        'https://az813057.vo.msecnd.net/webdriver/msedgedriver_x64/msedgedriver.exe'\n    }\n  }\n};\n\n/**\n * A Selenium tunnel. This tunnel downloads the\n * [[http://www.seleniumhq.org/download/|Selenium-standalone server]] and any\n * necessary WebDriver executables, and handles starting and stopping Selenium.\n *\n * The primary configuration option is [[SeleniumTunnel.drivers|drivers]], which\n * determines which browsers the Selenium tunnel will support.\n *\n * Note that Java must be installed and in the system path to use this tunnel.\n *\n * The standard browser names (for the `browserName` selenium capability) are:\n *\n * * `MicrosoftEdge`\n * * `chrome`\n * * `firefox`\n * * `internet explorer`\n * * `safari`\n */\nexport default class SeleniumTunnel extends Tunnel\n  implements SeleniumProperties {\n  /** Additional arguments to send to the Selenium server at startup */\n  seleniumArgs!: string[];\n\n  /**\n   * The desired Selenium drivers to install. Each entry may be a string or an\n   * object. Strings must be the names of existing drivers in SeleniumTunnel.\n   * An object with a 'name' property is a configuration object -- the name\n   * must be the name of an existing driver in SeleniumTunnel, and the\n   * remaining properties will be used to configure that driver. An object\n   * without a 'name' property is a driver definition. It must contain three\n   * properties:\n   *\n   * - executable - the name of the driver executable\n   * - url - the URL where the driver can be downloaded from\n   * - seleniumProperty - the name of the Java property used to tell\n   *   Selenium where the driver is\n   *\n   * ```js\n   * [\n   *     'chrome',\n   *     {\n   *         name: 'firefox',\n   *         version: '0.8.0'\n   *     },\n   *     {\n   *         url: 'https://github.com/operasoftware/operachromiumdriver/releases/.../operadriver_mac64.zip',\n   *         executable: 'operadriver',\n   *         seleniumProperty: 'webdriver.opera.driver'\n   *     }\n   * ]\n   *\n   * @default [ 'chrome' ]\n   */\n  drivers!: DriverDescriptor[];\n\n  /**\n   * The base address where Selenium artifacts may be found.\n   *\n   * @default https://selenium-release.storage.googleapis.com\n   */\n  baseUrl!: string;\n\n  /**\n   * The desired version of selenium to install.\n   *\n   * @default 3.3.1\n   */\n  version!: string;\n\n  /**\n   * Timeout in milliseconds for communicating with the Selenium server\n   *\n   * @default 5000\n   */\n  seleniumTimeout!: number;\n\n  constructor(options?: SeleniumOptions) {\n    super(\n      Object.assign(\n        {\n          seleniumArgs: [],\n          drivers: ['chrome'],\n          baseUrl: 'https://selenium-release.storage.googleapis.com',\n          version: driverInfo.SeleniumVersion,\n          seleniumTimeout: 5000\n        },\n        options || {}\n      )\n    );\n\n    // Emit a meaningful error if Java isn't available\n    if (!commandExistsSync('java')) {\n      throw new Error('Java must be installed to use SeleniumTunnel');\n    }\n  }\n\n  get artifact() {\n    return `selenium-server-standalone-${this.version}.jar`;\n  }\n\n  get directory() {\n    return join(__dirname, 'selenium-standalone');\n  }\n\n  get executable() {\n    return 'java';\n  }\n\n  get isDownloaded() {\n    const directory = this.directory;\n    return (\n      fileExists(join(directory, this.artifact)) &&\n      this._getDriverConfigs().every(config => {\n        return fileExists(join(directory, config.executable));\n      })\n    );\n  }\n\n  get url() {\n    const majorMinorVersion = this.version.slice(\n      0,\n      this.version.lastIndexOf('.')\n    );\n    return format('%s/%s/%s', this.baseUrl, majorMinorVersion, this.artifact);\n  }\n\n  download(forceDownload = false): CancellablePromise<void> {\n    if (!forceDownload && this.isDownloaded) {\n      return Task.resolve();\n    }\n\n    let tasks: CancellablePromise<void>[];\n\n    return new Task(\n      resolve => {\n        const configs: RemoteFile[] = [\n          {\n            url: this.url,\n            executable: this.artifact,\n            dontExtract: true\n          },\n          ...this._getDriverConfigs()\n        ];\n\n        tasks = configs.map(config => {\n          const executable = config.executable;\n          const dontExtract = Boolean(config.dontExtract);\n          const directory = config.directory;\n\n          if (fileExists(join(this.directory, executable))) {\n            return Task.resolve();\n          }\n\n          // TODO: progress events\n          return this._downloadFile(config.url, this.proxy, <\n            SeleniumDownloadOptions\n          >{\n            executable,\n            dontExtract,\n            directory\n          });\n        });\n\n        resolve(Task.all(tasks).then(() => {}));\n      },\n      () => {\n        tasks &&\n          tasks.forEach(task => {\n            task.cancel();\n          });\n      }\n    );\n  }\n\n  sendJobState(): CancellablePromise<void> {\n    // This is a noop for Selenium\n    return Task.resolve();\n  }\n\n  protected _getDriverConfigs(): DriverFile[] {\n    function getDriverConfig(name: string, options?: any) {\n      const Constructor = driverNameMap[name];\n      if (!Constructor) {\n        throw new Error('Invalid driver name \"' + name + '\"');\n      }\n      return new Constructor(options);\n    }\n\n    return this.drivers.map(function(data) {\n      if (typeof data === 'string') {\n        return getDriverConfig(data);\n      }\n\n      if (typeof data === 'object' && (<any>data).name) {\n        return getDriverConfig((<any>data).name, data);\n      }\n\n      // data is a driver definition\n      return <DriverFile>data;\n    });\n  }\n\n  protected _makeArgs(): string[] {\n    const directory = this.directory;\n    const driverConfigs = this._getDriverConfigs();\n    const args: string[] = [];\n\n    driverConfigs.reduce(function(args: string[], config) {\n      const file = join(directory, config.executable);\n      args.push('-D' + config.seleniumProperty + '=' + file);\n      return args;\n    }, args);\n\n    if (this.seleniumArgs) {\n      args.push(...this.seleniumArgs);\n    }\n\n    args.push('-jar', join(this.directory, this.artifact), '-port', this.port);\n\n    if (this.verbose) {\n      args.push('-debug');\n      if (satisfies(this.version, '>=3.1.0 <3.5.0')) {\n        args.push('true');\n      }\n      console.log('Starting with arguments: ', args.join(' '));\n    }\n\n    return args;\n  }\n\n  protected _postDownloadFile(data: Buffer, options: SeleniumDownloadOptions) {\n    const executable = options.executable!;\n    if (options.dontExtract) {\n      return writeFile(data, join(this.directory, executable));\n    }\n    return super._postDownloadFile(data, options);\n  }\n\n  protected _start(executor: ChildExecutor) {\n    let handle: Handle;\n    const task = this._makeChild((child, resolve, reject) => {\n      handle = on(child.stderr, 'data', (data: string) => {\n        // Selenium recommends that we poll the hub looking for a status\n        // response\n        // https://github.com/seleniumhq/selenium-google-code-issue-archive/issues/7957\n        // We're going against the recommendation here for a few reasons\n        // 1. There's no default pid or log to look for errors to\n        //    provide a specific failure\n        // 2. Polling on a failed server start could leave us with an\n        //    unpleasant wait\n        // 3. Just polling a selenium server doesn't guarantee it's the\n        //    server we started\n        // 4. This works pretty well\n        data = String(data);\n        if (data.indexOf('Selenium Server is up and running') > -1) {\n          resolve();\n        } else if (\n          /Address already in use/.test(data) ||\n          /Port \\d+ is busy/.test(data)\n        ) {\n          reject(new Error('Address is already in use'));\n\n          // Kill the child since we're reporting that startup failed\n          kill(child.pid);\n        }\n      });\n\n      if (this.verbose) {\n        on(child.stderr, 'data', (data: string) => {\n          process.stderr.write(data);\n        });\n      }\n\n      executor(child, resolve, reject);\n    });\n\n    task.then(() => handle.destroy(), () => handle.destroy());\n\n    return task;\n  }\n}\n\nexport interface DriverFile extends RemoteFile {\n  seleniumProperty: string;\n}\n\nexport interface RemoteFile {\n  dontExtract?: boolean;\n  directory?: string;\n  executable: string;\n  url: string;\n}\n\nexport type DriverDescriptor =\n  | 'chrome'\n  | 'ie'\n  | 'firefox'\n  | DriverFile\n  | { name: string; version?: string };\n\n/**\n * Options specific to SeleniumTunnel\n */\nexport interface SeleniumProperties extends TunnelProperties {\n  /** [[SeleniumTunnel.SeleniumTunnel.seleniumArgs|More info]] */\n  seleniumArgs: string[];\n\n  /** [[SeleniumTunnel.SeleniumTunnel.drivers|More info]] */\n  drivers: DriverDescriptor[];\n\n  /** [[SeleniumTunnel.SeleniumTunnel.baseUrl|More info]] */\n  baseUrl: string;\n\n  /** [[SeleniumTunnel.SeleniumTunnel.version|More info]] */\n  version: string;\n\n  /** [[SeleniumTunnel.SeleniumTunnel.seleniumTimeout|More info]] */\n  seleniumTimeout: number;\n}\n\nexport type SeleniumOptions = Partial<SeleniumProperties>;\n\nexport interface SeleniumDownloadOptions extends DownloadOptions {\n  executable?: string;\n  dontExtract?: boolean;\n}\n\ntype DriverConstructor = { new (config?: any): DriverFile };\n\nabstract class Config<T extends object> {\n  constructor(config: T) {\n    Object.assign(this, config);\n  }\n\n  abstract readonly executable: string;\n  abstract readonly url: string;\n  abstract readonly seleniumProperty?: string;\n}\n\ninterface ChromeProperties {\n  arch: string;\n  baseUrl: string;\n  platform: string;\n  version: string;\n}\n\ntype ChromeOptions = Partial<ChromeProperties>;\n\nclass ChromeConfig extends Config<ChromeOptions>\n  implements ChromeProperties, DriverFile {\n  arch!: string;\n  baseUrl!: string;\n  platform!: string;\n  version!: string;\n\n  constructor(options: ChromeOptions) {\n    super(\n      Object.assign(\n        {\n          arch: process.arch,\n          baseUrl: 'https://chromedriver.storage.googleapis.com',\n          platform: process.platform,\n          version: driverInfo.ChromeVersion\n        },\n        options\n      )\n    );\n  }\n\n  get artifact() {\n    let platform = this.platform;\n    if (platform === 'linux') {\n      platform = 'linux' + (this.arch === 'x86' ? '32' : '64');\n    } else if (platform === 'darwin') {\n      const parts = String(this.version)\n        .split('.')\n        .map(Number);\n      const isGreater = [2, 22].some(function(part, i) {\n        return parts[i] > part;\n      });\n      platform = isGreater ? 'mac64' : 'mac32';\n    }\n    return format('chromedriver_%s.zip', platform);\n  }\n\n  get directory() {\n    return this.version;\n  }\n\n  get url() {\n    return format('%s/%s/%s', this.baseUrl, this.version, this.artifact);\n  }\n\n  get executable() {\n    return join(\n      this.directory,\n      this.platform === 'win32' ? 'chromedriver.exe' : 'chromedriver'\n    );\n  }\n\n  get seleniumProperty() {\n    return 'webdriver.chrome.driver';\n  }\n}\n\ninterface FirefoxProperties {\n  arch: string;\n  baseUrl: string;\n  platform: string;\n  version: string;\n}\n\ntype FirefoxOptions = Partial<FirefoxProperties>;\n\nclass FirefoxConfig extends Config<FirefoxOptions>\n  implements FirefoxProperties, DriverFile {\n  arch!: string;\n  baseUrl!: string;\n  platform!: string;\n  version!: string;\n\n  constructor(options: FirefoxOptions) {\n    super(\n      Object.assign(\n        {\n          arch: process.arch,\n          baseUrl: 'https://github.com/mozilla/geckodriver/releases/download',\n          platform: process.platform,\n          version: driverInfo.FirefoxVersion\n        },\n        options\n      )\n    );\n  }\n\n  get artifact() {\n    let platform = this.platform;\n    if (platform === 'linux') {\n      platform = 'linux' + (this.arch === 'x64' ? '64' : '32');\n    } else if (platform === 'win32') {\n      platform = 'win' + (this.arch === 'x64' ? '64' : '32');\n    } else if (platform === 'darwin') {\n      platform = 'macos';\n    }\n    const extension = /^win/.test(platform) ? '.zip' : '.tar.gz';\n    return format('geckodriver-v%s-%s%s', this.version, platform, extension);\n  }\n\n  get url() {\n    return format('%s/v%s/%s', this.baseUrl, this.version, this.artifact);\n  }\n\n  get directory() {\n    return this.version;\n  }\n\n  get executable() {\n    return join(\n      this.directory,\n      this.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver'\n    );\n  }\n\n  get seleniumProperty() {\n    return 'webdriver.gecko.driver';\n  }\n}\n\n// tslint:disable-next-line:interface-name\ninterface IEProperties {\n  arch: string;\n  baseUrl: string;\n  version: string;\n}\n\ntype IEOptions = Partial<IEProperties>;\n\nclass IEConfig extends Config<IEOptions> implements IEProperties, DriverFile {\n  arch!: string;\n  baseUrl!: string;\n  version!: string;\n\n  constructor(options: IEOptions) {\n    super(\n      Object.assign(\n        {\n          arch: process.arch,\n          baseUrl: 'https://selenium-release.storage.googleapis.com',\n          version: driverInfo.IEVersion\n        },\n        options\n      )\n    );\n  }\n\n  get artifact() {\n    const architecture = this.arch === 'x64' ? 'x64' : 'Win32';\n    return format('IEDriverServer_%s_%s.zip', architecture, this.version);\n  }\n\n  get url() {\n    const majorMinorVersion = this.version.slice(\n      0,\n      this.version.lastIndexOf('.')\n    );\n    return format('%s/%s/%s', this.baseUrl, majorMinorVersion, this.artifact);\n  }\n\n  get directory() {\n    return this.version;\n  }\n\n  get executable() {\n    return join(this.directory, 'IEDriverServer.exe');\n  }\n\n  get seleniumProperty() {\n    return 'webdriver.ie.driver';\n  }\n}\n\ninterface EdgeProperties {\n  baseUrl: string;\n  uuid: string | undefined;\n  version: string;\n}\n\ntype EdgeOptions = Partial<EdgeProperties>;\n\nclass EdgeConfig extends Config<EdgeOptions>\n  implements EdgeProperties, DriverFile {\n  arch!: string;\n  baseUrl!: string;\n  uuid: string | undefined;\n  version!: keyof typeof driverInfo.EdgeUrls;\n\n  constructor(options: EdgeOptions) {\n    super(\n      Object.assign(\n        {\n          arch: process.arch,\n          baseUrl: 'https://download.microsoft.com/download',\n          version: driverInfo.EdgeVersion\n        },\n        options\n      )\n    );\n  }\n\n  get dontExtract() {\n    return true;\n  }\n\n  get url() {\n    const { uuid } = this;\n\n    if (uuid) {\n      const a = uuid[0];\n      const b = uuid[1];\n      const c = uuid[2];\n\n      return format(\n        '%s/%s/%s/%s/%s/%s',\n        this.baseUrl,\n        a,\n        b,\n        c,\n        uuid,\n        this.artifact\n      );\n    }\n\n    const urlOrObj = driverInfo.EdgeUrls[this.version];\n    if (typeof urlOrObj === 'string') {\n      return urlOrObj;\n    }\n\n    return urlOrObj[this.arch as keyof typeof urlOrObj];\n  }\n\n  get artifact() {\n    return 'MicrosoftWebDriver.exe';\n  }\n\n  get directory() {\n    return this.version;\n  }\n\n  get executable() {\n    return join(this.version, 'MicrosoftWebDriver.exe');\n  }\n\n  get seleniumProperty() {\n    return 'webdriver.edge.driver';\n  }\n}\n\nconst driverNameMap: { [key: string]: DriverConstructor } = {\n  chrome: ChromeConfig,\n  firefox: FirefoxConfig,\n  ie: IEConfig,\n  'internet explorer': IEConfig,\n  edge: EdgeConfig,\n  MicrosoftEdge: EdgeConfig\n};\n"]}
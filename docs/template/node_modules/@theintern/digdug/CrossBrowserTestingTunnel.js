"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var os_1 = require("os");
var path_1 = require("path");
var common_1 = require("@theintern/common");
var Tunnel_1 = require("./Tunnel");
var util_1 = require("./lib/util");
var child_process_1 = require("child_process");
var cbtVersion = '^0.9.9';
/**
 * A CrossBrowserTesting tunnel.
 *
 * This tunnel requires some non-standard configuration options (vs the other
 * tunnels):
 *
 * 1. The capabilities must include the username, API key, browser_api_name, and
 *    os_api_name properties
 * 2. The Intern proxyUrl must use 'local' instead of 'localhost'
 *
 * An Intern config using this tunnel might be look like:
 *
 * ```js
 * {
 *     "serverUrl": "http://local:9000",
 *     "tunnel": "cbt",
 *     "environments": [
 *         {
 *             "browserName": "chrome",
 *             "os_api_name": "Win10",
 *             "browser_api_name": "Chrome52"
 *         }
 *     ],
 * 	   // Other Intern config options...
 * }
 * ```
 *
 * The username and accessKey properties will be initialized using CBT_USERNAME
 * and CBT_APIKEY.
 */
var CrossBrowserTestingTunnel = /** @class */ (function (_super) {
    __extends(CrossBrowserTestingTunnel, _super);
    function CrossBrowserTestingTunnel(options) {
        return _super.call(this, Object.assign({
            accessKey: process.env.CBT_APIKEY,
            cbtVersion: cbtVersion,
            environmentUrl: 'https://crossbrowsertesting.com/api/v3/selenium/browsers?format=json',
            executable: 'node',
            hostname: 'hub.crossbrowsertesting.com',
            port: '80',
            username: process.env.CBT_USERNAME
        }, options || {})) || this;
    }
    Object.defineProperty(CrossBrowserTestingTunnel.prototype, "auth", {
        get: function () {
            return (this.username || '') + ":" + (this.accessKey || '');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CrossBrowserTestingTunnel.prototype, "extraCapabilities", {
        get: function () {
            return {
                username: this.username,
                password: this.accessKey
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CrossBrowserTestingTunnel.prototype, "isDownloaded", {
        get: function () {
            try {
                require('cbt_tunnels');
                return true;
            }
            catch (error) {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    CrossBrowserTestingTunnel.prototype.download = function (forceDownload) {
        var _this = this;
        if (forceDownload === void 0) { forceDownload = false; }
        if (!forceDownload && this.isDownloaded) {
            return common_1.Task.resolve();
        }
        return new common_1.Task(function (resolve, reject) {
            child_process_1.exec("npm install --no-save cbt_tunnels@" + _this.cbtVersion, function (error, _stdout, stderr) {
                if (error) {
                    console.error(stderr);
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    };
    CrossBrowserTestingTunnel.prototype._makeArgs = function (readyFile) {
        if (!this.username || !this.accessKey) {
            throw new Error('CrossBrowserTestingTunnel requires a username and access key');
        }
        return [
            'node_modules/.bin/cbt_tunnels',
            '--authkey',
            this.accessKey,
            '--username',
            this.username,
            '--ready',
            readyFile
        ];
    };
    CrossBrowserTestingTunnel.prototype.sendJobState = function (jobId, data) {
        var payload = JSON.stringify({
            action: 'set_score',
            score: data.status || data.success ? 'pass' : 'fail'
        });
        var url = "https://crossbrowsertesting.com/api/v3/selenium/" + jobId;
        return common_1.request(url, {
            method: 'put',
            data: payload,
            headers: {
                'Content-Length': String(Buffer.byteLength(payload, 'utf8')),
                'Content-Type': 'application/json'
            },
            username: this.username,
            password: this.accessKey,
            proxy: this.proxy
        }).then(function (response) {
            if (response.status !== 200) {
                return response.text().then(function (text) {
                    if (text) {
                        var data_1 = JSON.parse(text);
                        if (data_1.status) {
                            throw new Error("Could not save test status (" + data_1.message + ")");
                        }
                        throw new Error("Server reported " + response.status + " with: " + text);
                    }
                    else {
                        throw new Error("Server reported " + response.status + " with no other data.");
                    }
                });
            }
        });
    };
    CrossBrowserTestingTunnel.prototype._start = function (executor) {
        var _this = this;
        var readyFile = path_1.join(os_1.tmpdir(), 'CrossBrowserTesting-' + Date.now());
        return this._makeChild(function (child, resolve, reject) {
            var stdout = [];
            // Polling API is used because we are only watching for one file, so
            // efficiency is not a big deal, and the `fs.watch` API has extra
            // restrictions which are best avoided
            fs_1.watchFile(readyFile, { persistent: false, interval: 1007 }, function (current, previous) {
                if (Number(current.mtime) === Number(previous.mtime)) {
                    // readyFile hasn't been modified, so ignore the event
                    return;
                }
                fs_1.unwatchFile(readyFile);
                readHandle.destroy();
                exitHandle.destroy();
                stdout = null;
                resolve();
            });
            // The cbt tunnel outputs its startup error messages on stdout.
            // Capture any data on stdout and display it if the process exits
            // early.
            var readHandle = util_1.on(child.stdout, 'data', function (data) {
                stdout.push(String(data));
            });
            var exitHandle = util_1.on(child, 'exit', function () {
                process.stderr.write(stdout.join(''));
            });
            _this._handle = common_1.createCompositeHandle(readHandle, exitHandle);
            executor(child, resolve, reject);
        }, readyFile);
    };
    /**
     * Attempt to normalize a TestingBot described environment with the standard
     * Selenium capabilities
     *
     * TestingBot returns a list of environments that looks like:
     *
     * {
     *     "selenium_name": "Chrome36",
     *     "name": "googlechrome",
     *     "platform": "CAPITAN",
     *     "version":"36"
     * }
     *
     * @param environment a TestingBot environment descriptor
     * @returns a normalized descriptor
     */
    CrossBrowserTestingTunnel.prototype._normalizeEnvironment = function (environment) {
        var platform = environment.api_name;
        return environment.browsers.map(function (browser) {
            var browserName = browser.type.toLowerCase();
            return {
                platform: platform,
                browserName: browserName,
                version: browser.version,
                descriptor: environment,
                intern: {
                    browserName: browserName,
                    version: browser.version,
                    browser_api_name: browser.api_name,
                    os_api_name: platform
                }
            };
        });
    };
    return CrossBrowserTestingTunnel;
}(Tunnel_1.default));
exports.default = CrossBrowserTestingTunnel;
//# sourceMappingURL=CrossBrowserTestingTunnel.js.map
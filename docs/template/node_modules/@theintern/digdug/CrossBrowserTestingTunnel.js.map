{"version":3,"file":"CrossBrowserTestingTunnel.js","sourceRoot":"","sources":["../../src/CrossBrowserTestingTunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import { watchFile, unwatchFile } from 'fs';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport {\n  Task,\n  CancellablePromise,\n  createCompositeHandle,\n  request\n} from '@theintern/common';\nimport Tunnel, {\n  ChildExecutor,\n  NormalizedEnvironment,\n  TunnelProperties\n} from './Tunnel';\nimport { JobState } from './interfaces';\nimport { on } from './lib/util';\nimport { exec } from 'child_process';\n\nconst cbtVersion = '^0.9.9';\n\n/**\n * A CrossBrowserTesting tunnel.\n *\n * This tunnel requires some non-standard configuration options (vs the other\n * tunnels):\n *\n * 1. The capabilities must include the username, API key, browser_api_name, and\n *    os_api_name properties\n * 2. The Intern proxyUrl must use 'local' instead of 'localhost'\n *\n * An Intern config using this tunnel might be look like:\n *\n * ```js\n * {\n *     \"serverUrl\": \"http://local:9000\",\n *     \"tunnel\": \"cbt\",\n *     \"environments\": [\n *         {\n *             \"browserName\": \"chrome\",\n *             \"os_api_name\": \"Win10\",\n *             \"browser_api_name\": \"Chrome52\"\n *         }\n *     ],\n * \t   // Other Intern config options...\n * }\n * ```\n *\n * The username and accessKey properties will be initialized using CBT_USERNAME\n * and CBT_APIKEY.\n */\nexport default class CrossBrowserTestingTunnel extends Tunnel\n  implements CrossBrowserTestingProperties {\n  /** The version of the cbt_tunnels package to use */\n  cbtVersion!: string;\n\n  constructor(options?: CrossBrowserTestingOptions) {\n    super(\n      Object.assign(\n        {\n          accessKey: process.env.CBT_APIKEY,\n          cbtVersion,\n          environmentUrl:\n            'https://crossbrowsertesting.com/api/v3/selenium/browsers?format=json',\n          executable: 'node',\n          hostname: 'hub.crossbrowsertesting.com',\n          port: '80',\n          username: process.env.CBT_USERNAME\n        },\n        options || {}\n      )\n    );\n  }\n\n  get auth() {\n    return `${this.username || ''}:${this.accessKey || ''}`;\n  }\n\n  get extraCapabilities() {\n    return {\n      username: this.username,\n      password: this.accessKey\n    };\n  }\n\n  get isDownloaded() {\n    try {\n      require('cbt_tunnels');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  download(forceDownload = false): CancellablePromise<void> {\n    if (!forceDownload && this.isDownloaded) {\n      return Task.resolve();\n    }\n    return new Task((resolve, reject) => {\n      exec(\n        `npm install --no-save cbt_tunnels@${this.cbtVersion}`,\n        (error, _stdout, stderr) => {\n          if (error) {\n            console.error(stderr);\n            reject(error);\n          } else {\n            resolve();\n          }\n        }\n      );\n    });\n  }\n\n  protected _makeArgs(readyFile: string): string[] {\n    if (!this.username || !this.accessKey) {\n      throw new Error(\n        'CrossBrowserTestingTunnel requires a username and access key'\n      );\n    }\n\n    return [\n      'node_modules/.bin/cbt_tunnels',\n      '--authkey',\n      this.accessKey,\n      '--username',\n      this.username,\n      '--ready',\n      readyFile\n    ];\n  }\n\n  sendJobState(jobId: string, data: JobState): CancellablePromise<void> {\n    const payload = JSON.stringify({\n      action: 'set_score',\n      score: data.status || data.success ? 'pass' : 'fail'\n    });\n\n    const url = `https://crossbrowsertesting.com/api/v3/selenium/${jobId}`;\n    return request(url, {\n      method: 'put',\n      data: payload,\n      headers: {\n        'Content-Length': String(Buffer.byteLength(payload, 'utf8')),\n        'Content-Type': 'application/json'\n      },\n      username: this.username,\n      password: this.accessKey,\n      proxy: this.proxy\n    }).then<void>(response => {\n      if (response.status !== 200) {\n        return response.text().then(text => {\n          if (text) {\n            const data = JSON.parse(text);\n\n            if (data.status) {\n              throw new Error(`Could not save test status (${data.message})`);\n            }\n\n            throw new Error(`Server reported ${response.status} with: ${text}`);\n          } else {\n            throw new Error(\n              `Server reported ${response.status} with no other data.`\n            );\n          }\n        });\n      }\n    });\n  }\n\n  protected _start(executor: ChildExecutor): CancellablePromise<any> {\n    const readyFile = join(tmpdir(), 'CrossBrowserTesting-' + Date.now());\n\n    return this._makeChild((child, resolve, reject) => {\n      let stdout: string[] | null = [];\n\n      // Polling API is used because we are only watching for one file, so\n      // efficiency is not a big deal, and the `fs.watch` API has extra\n      // restrictions which are best avoided\n      watchFile(readyFile, { persistent: false, interval: 1007 }, function(\n        current,\n        previous\n      ) {\n        if (Number(current.mtime) === Number(previous.mtime)) {\n          // readyFile hasn't been modified, so ignore the event\n          return;\n        }\n\n        unwatchFile(readyFile);\n        readHandle.destroy();\n        exitHandle.destroy();\n        stdout = null;\n        resolve();\n      });\n\n      // The cbt tunnel outputs its startup error messages on stdout.\n      // Capture any data on stdout and display it if the process exits\n      // early.\n      const readHandle = on(child.stdout, 'data', (data: any) => {\n        stdout!.push(String(data));\n      });\n      const exitHandle = on(child, 'exit', function() {\n        process.stderr.write(stdout!.join(''));\n      });\n\n      this._handle = createCompositeHandle(readHandle, exitHandle);\n\n      executor(child, resolve, reject);\n    }, readyFile);\n  }\n\n  /**\n   * Attempt to normalize a TestingBot described environment with the standard\n   * Selenium capabilities\n   *\n   * TestingBot returns a list of environments that looks like:\n   *\n   * {\n   *     \"selenium_name\": \"Chrome36\",\n   *     \"name\": \"googlechrome\",\n   *     \"platform\": \"CAPITAN\",\n   *     \"version\":\"36\"\n   * }\n   *\n   * @param environment a TestingBot environment descriptor\n   * @returns a normalized descriptor\n   */\n  protected _normalizeEnvironment(environment: any): NormalizedEnvironment {\n    const platform = environment.api_name;\n\n    return environment.browsers.map(function(browser: any) {\n      const browserName = browser.type.toLowerCase();\n\n      return {\n        platform,\n        browserName,\n        version: browser.version,\n\n        descriptor: environment,\n\n        intern: {\n          browserName,\n          version: browser.version,\n          browser_api_name: browser.api_name,\n          os_api_name: platform\n        }\n      };\n    });\n  }\n}\n\n/**\n * Options specific to the CrossBrowserTestingTunnel\n */\nexport interface CrossBrowserTestingProperties extends TunnelProperties {\n  /** [[CrossBrowserTestingTunnel.CrossBrowserTestingTunnel.cbtVersion|More info]] */\n  cbtVersion: string;\n}\n\nexport type CrossBrowserTestingOptions = Partial<CrossBrowserTestingProperties>;\n"]}
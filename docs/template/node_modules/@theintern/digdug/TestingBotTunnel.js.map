{"version":3,"file":"TestingBotTunnel.js","sourceRoot":"","sources":["../../src/TestingBotTunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import Tunnel, {\n  TunnelProperties,\n  ChildExecutor,\n  NormalizedEnvironment\n} from './Tunnel';\nimport { existsSync, watchFile, unlinkSync, unwatchFile } from 'fs';\nimport { stringify } from 'querystring';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport { request, CancellablePromise } from '@theintern/common';\nimport { parse } from 'url';\nimport { fileExists, on } from './lib/util';\nimport { JobState } from './interfaces';\n\n/**\n * A TestingBot tunnel.\n *\n * The username and accessKey properties will be initialized using\n * TESTINGBOT_API_KEY and TESTINGBOT_API_SECRET.\n */\nexport default class TestingBotTunnel extends Tunnel\n  implements TestingBotProperties {\n  directory!: string;\n\n  /**\n   * A list of regular expressions corresponding to domains whose connections\n   * should fail immediately if the VM attempts to make a connection to them.\n   */\n  fastFailDomains!: string[];\n\n  /** A filename where additional logs from the tunnel should be output. */\n  logFile!: string | null;\n\n  /** Whether or not to use rabbIT compression for the tunnel connection. */\n  useCompression!: boolean;\n\n  /** Whether or not to use the default local Jetty proxy for the tunnel. */\n  useJettyProxy!: boolean;\n\n  /** Whether or not to use the default remote Squid proxy for the VM. */\n  useSquidProxy!: boolean;\n\n  /**\n   * Whether or not to re-encrypt data encrypted by self-signed certificates.\n   */\n  useSsl!: boolean;\n\n  constructor(options?: TestingBotOptions) {\n    super(\n      Object.assign(\n        {\n          username: process.env.TESTINGBOT_KEY,\n          accessKey: process.env.TESTINGBOT_SECRET,\n          directory: join(__dirname, 'testingbot'),\n          environmentUrl: 'https://api.testingbot.com/v1/browsers',\n          executable: 'java',\n          fastFailDomains: [],\n          logFile: null,\n          port: 4445,\n          url: 'https://testingbot.com/downloads/testingbot-tunnel.zip',\n          useCompression: false,\n          useJettyProxy: true,\n          useSquidProxy: true,\n          useSsl: false\n        },\n        options || {}\n      )\n    );\n  }\n\n  get auth() {\n    return `${this.username || ''}:${this.accessKey || ''}`;\n  }\n\n  get isDownloaded() {\n    return fileExists(\n      join(this.directory, 'testingbot-tunnel/testingbot-tunnel.jar')\n    );\n  }\n\n  protected _makeArgs(readyFile: string): string[] {\n    if (!this.username || !this.accessKey) {\n      throw new Error('TestingBotTunnel requires a username and access key');\n    }\n\n    const args = [\n      '-jar',\n      join(this.directory, 'testingbot-tunnel', 'testingbot-tunnel.jar'),\n      this.username,\n      this.accessKey,\n      '-P',\n      this.port,\n      '-f',\n      readyFile\n    ];\n\n    this.fastFailDomains.length &&\n      args.push('-F', this.fastFailDomains.join(','));\n    this.logFile && args.push('-l', this.logFile);\n    this.useJettyProxy || args.push('-x');\n    this.useSquidProxy || args.push('-q');\n    this.useCompression && args.push('-b');\n    this.useSsl && args.push('-s');\n    this.verbose && args.push('-d');\n\n    if (this.proxy) {\n      const proxy = parse(this.proxy);\n\n      proxy.hostname && args.unshift('-Dhttp.proxyHost=', proxy.hostname);\n      proxy.port && args.unshift('-Dhttp.proxyPort=', proxy.port);\n    }\n\n    return args;\n  }\n\n  sendJobState(jobId: string, data: JobState): CancellablePromise<void> {\n    const params: { [key: string]: string | number } = {};\n\n    if (data.success != null) {\n      params['test[success]'] = String(data.success ? 1 : 0);\n    }\n    if (data.status) {\n      params['test[status_message]'] = data.status;\n    }\n    if (data.name) {\n      params['test[name]'] = data.name;\n    }\n    if (data.extra) {\n      params['test[extra]'] = JSON.stringify(data.extra);\n    }\n    if (data.tags && data.tags.length) {\n      params['groups'] = data.tags.join(',');\n    }\n\n    const url = `https://api.testingbot.com/v1/tests/${jobId}`;\n    const payload = stringify(params);\n    return request(url, {\n      method: 'put',\n      data: payload,\n      headers: {\n        'Content-Length': String(Buffer.byteLength(payload, 'utf8')),\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      password: this.accessKey,\n      username: this.username,\n      proxy: this.proxy\n    }).then(function(response) {\n      return response.text().then(text => {\n        if (text) {\n          const data = JSON.parse(text);\n\n          if (data.error) {\n            throw new Error(data.error);\n          } else if (!data.success) {\n            throw new Error('Job data failed to save.');\n          } else if (response.status !== 200) {\n            throw new Error(`Server reported ${response.status} with: ${text}`);\n          }\n        } else {\n          throw new Error(\n            `Server reported ${response.status} with no other data.`\n          );\n        }\n      });\n    });\n  }\n\n  protected _start(executor: ChildExecutor) {\n    const readyFile = join(tmpdir(), 'testingbot-' + Date.now());\n\n    return this._makeChild((child, resolve, reject) => {\n      function _reject(message: string) {\n        const pidFile = 'testingbot-tunnel.pid';\n        if (existsSync(pidFile)) {\n          // Remove the pidfile to ensure the running tunnel app shuts\n          // down\n          unlinkSync(pidFile);\n        }\n        reject(message);\n      }\n\n      // Polling API is used because we are only watching for one file, so\n      // efficiency is not a big deal, and the `fs.watch` API has extra\n      // restrictions which are best avoided\n      watchFile(readyFile, { persistent: false, interval: 1007 }, function(\n        current,\n        previous\n      ) {\n        if (Number(current.mtime) === Number(previous.mtime)) {\n          // readyFile hasn't been modified, so ignore the event\n          return;\n        }\n\n        unwatchFile(readyFile);\n        resolve();\n      });\n\n      let lastMessage: string;\n      this._handle = on(child.stderr, 'data', (data: string) => {\n        data = String(data);\n        data.split('\\n').forEach(message => {\n          if (message.indexOf('INFO: ') === 0) {\n            message = message.slice('INFO: '.length);\n            // the tunnel produces a lot of repeating messages\n            // during setup when the status is pending; deduplicate\n            // them for sanity\n            if (\n              message !== lastMessage &&\n              message.indexOf('>> [') === -1 &&\n              message.indexOf('<< [') === -1\n            ) {\n              this.emit({\n                type: 'status',\n                target: this,\n                status: message\n              });\n              lastMessage = message;\n            }\n          } else if (message.indexOf('SEVERE: ') === 0) {\n            _reject(message);\n          } else if (message.indexOf('An error ocurred:') === 0) {\n            _reject(message);\n          }\n        });\n      });\n\n      executor(child, resolve, reject);\n    }, readyFile);\n  }\n\n  /**\n   * Attempt to normalize a TestingBot described environment with the standard\n   * Selenium capabilities\n   *\n   * TestingBot returns a list of environments that looks like:\n   *\n   * {\n   *     \"selenium_name\": \"Chrome36\",\n   *     \"name\": \"googlechrome\",\n   *     \"platform\": \"CAPITAN\",\n   *     \"version\":\"36\"\n   * }\n   *\n   * @param environment a TestingBot environment descriptor\n   * @returns a normalized descriptor\n   */\n  protected _normalizeEnvironment(environment: any): NormalizedEnvironment {\n    const browserMap: any = {\n      googlechrome: 'chrome',\n      iexplore: 'internet explorer'\n    };\n\n    const platform = environment.platform;\n    const browserName = browserMap[environment.name] || environment.name;\n    const version = environment.version;\n\n    return {\n      platform,\n      browserName,\n      version,\n      descriptor: environment,\n\n      intern: {\n        platform,\n        browserName,\n        version\n      }\n    };\n  }\n}\n\n/**\n * Options specific to TestingBotTunnel\n */\nexport interface TestingBotProperties extends TunnelProperties {\n  /** [[TestingBotTunnel.TestingBotTunnel.fastFailDomains|More info]] */\n  fastFailDomains: string[];\n\n  /** [[TestingBotTunnel.TestingBotTunnel.logFile|More info]] */\n  logFile: string | null;\n\n  /** [[TestingBotTunnel.TestingBotTunnel.useCompression|More info]] */\n  useCompression: boolean;\n\n  /** [[TestingBotTunnel.TestingBotTunnel.useJettyProxy|More info]] */\n  useJettyProxy: boolean;\n\n  /** [[TestingBotTunnel.TestingBotTunnel.useSquidProxy|More info]] */\n  useSquidProxy: boolean;\n\n  /** [[TestingBotTunnel.TestingBotTunnel.useSsl|More info]] */\n  useSsl: boolean;\n}\n\nexport type TestingBotOptions = Partial<TestingBotProperties>;\n"]}
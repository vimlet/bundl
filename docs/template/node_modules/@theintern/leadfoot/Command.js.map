{"version":3,"file":"Command.js","sourceRoot":"","sources":["../../src/Command.ts"],"names":[],"mappings":"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","sourcesContent":["import { getMethods, sleep, trimStack } from './lib/util';\nimport Element from './Element';\nimport { Task, CancellablePromise } from '@theintern/common';\nimport Session from './Session';\nimport Locator, { Strategy } from './lib/Locator';\nimport { LogEntry, Geolocation, WebDriverCookie } from './interfaces';\n\n/**\n * The Command class is a chainable, subclassable object type that can be used\n * to execute commands serially against a remote WebDriver environment. The\n * standard Command class includes methods from the [[Session]] and [[Element]]\n * classes, so you can perform all standard session and element operations that\n * come with Leadfoot without being forced to author long promise chains.\n *\n * In order to use the Command class, you first need to pass it a [[Session]]\n * instance for it to use:\n *\n * ```js\n * const command = new Command(session);\n * ```\n *\n * Once you have created the Command, you can then start chaining methods, and\n * they will execute in order one after another:\n *\n * ```js\n * command.get('http://example.com')\n *     .findByTagName('h1')\n *     .getVisibleText()\n *     .then(function (text) {\n *         assert.strictEqual(text, 'Example Domain');\n *     });\n * ```\n *\n * Because these operations are asynchronous, you need to use a `then` callback\n * in order to retrieve the value from the last method. Command objects are\n * PromiseLikes, which means that they can be used with any Promises/A+ or\n * ES6-conformant Promises implementation, though there are some specific\n * differences in the arguments and context that are provided to callbacks; see\n * [[Command.Command.then]] for more details.\n *\n * Because Commands are promise-like, they may also be used with `async/await`:\n *\n * ```js\n * const page = await command.get('http://example.com');\n * const h1 = await page.findByTagName('h1');\n * const text = await h1.getVisibleText();\n * assert.strictEqual(text, 'Example Domain');\n * ```\n *\n * ---\n *\n * Each call on a Command generates a new Command object, which means that\n * certain operations can be parallelised:\n *\n * ```js\n * command = command.get('http://example.com');\n * Promise.all([\n *     command.getPageTitle(),\n *     command.findByTagName('h1').getVisibleText()\n * ]).then(results => {\n *     assert.strictEqual(results[0], results[1]);\n * });\n * ```\n *\n * In this example, the commands on line 3 and 4 both depend upon the `get`\n * call completing successfully but are otherwise independent of each other and\n * so execute here in parallel. This is different from commands in Intern 1\n * which were always chained onto the last called method within a given test.\n *\n * ---\n *\n * Command objects actually encapsulate two different types of interaction:\n * *session* interactions, which operate against the entire browser session,\n * and *element* interactions, which operate against specific elements taken\n * from the currently loaded page. Things like navigating the browser, moving\n * the mouse cursor, and executing scripts are session interactions; things\n * like getting text displayed on the page, typing into form fields, and\n * getting element attributes are element interactions.\n *\n * Session interactions can be performed at any time, from any Command. On the\n * other hand, to perform element interactions, you first need to retrieve one\n * or more elements to interact with. This can be done using any of the `find`\n * or `findAll` methods, by the `getActiveElement` method, or by returning\n * elements from `execute` or `executeAsync` calls. The retrieved elements are\n * stored internally as the *element context* of all chained Commands. When an\n * element method is called on a chained Command with a single element context,\n * the result will be returned as-is:\n *\n * ```js\n * command = command.get('http://example.com')\n *     // finds one element -> single element context\n *     .findByTagName('h1')\n *     .getVisibleText()\n *     .then(text => {\n *         // `text` is the text from the element context\n *         assert.strictEqual(text, 'Example Domain');\n *     });\n * ```\n *\n * When an element method is called on a chained Command with a multiple\n * element context, the result will be returned as an array:\n *\n * ```js\n * command = command.get('http://example.com')\n *     // finds multiple elements -> multiple element context\n *     .findAllByTagName('p')\n *     .getVisibleText()\n *     .then(texts => {\n *         // `texts` is an array of text from each of the `p` elements\n *         assert.deepEqual(texts, [\n *             'This domain is established to be used for […]',\n *             'More information...'\n *         ]);\n *     });\n * ```\n *\n * The `find` and `findAll` methods are special and change their behaviour\n * based on the current element filtering state of a given command. If a\n * command has been filtered by element, the `find` and `findAll` commands will\n * only find elements *within* the currently filtered set of elements.\n * Otherwise, they will find elements throughout the page.\n *\n * Some method names, like `click`, are identical for both Session and Element\n * APIs; in this case, the element APIs are suffixed with the word `Element` in\n * order to identify them uniquely.\n *\n * ---\n *\n * Commands can be subclassed in order to add additional functionality without\n * making direct modifications to the default Command prototype that might\n * break other parts of the system:\n *\n * ```ts\n * class CustomCommand extends Command {\n *     login(username: string, password: string) {\n *         return new this.constructor(this, function () {\n *             return this.parent\n *                 .findById('username')\n *                 .click()\n *                 .type(username)\n *                 .end()\n *\n *                 .findById('password')\n *                 .click()\n *                 .type(password)\n *                 .end()\n *\n *                 .findById('login')\n *                 .click()\n *                 .end();\n *         });\n *     }\n * }\n * ```\n *\n * >  ⚠️Note that returning `this`, or a command chain starting from `this`,\n * from a callback or command initialiser will deadlock the Command, as it\n * waits for itself to settle before settling.\n */\nexport default class Command<T, P = any, StringResult = string>\n  extends Locator<\n    Command<Element, P, string>,\n    Command<Element[], P, string[]>,\n    Command<void, P, StringResult>\n  >\n  implements PromiseLike<T> {\n  /**\n   * Augments `target` with a conversion of the `originalFn` method that\n   * enables its use with a Command object. This can be used to easily add\n   * new methods from any custom object that implements the Session API to\n   * any target object that implements the Command API.\n   *\n   * Functions that are copied may have the following extra properties in\n   * order to change the way that Command works with these functions:\n   *\n   * * `createsContext` (boolean): If this property is specified, the return\n   *   value from the function will be used as the new context for the\n   *   returned Command.\n   * * `usesElement` (boolean): If this property is specified, element(s)\n   *   from the current context will be used as the first argument to the\n   *   function, if the explicitly specified first argument is not already an\n   *   element.\n   *\n   * @param {module:leadfoot/Command} target\n   * @param {string} key\n   * @param {Function} originalFn\n   */\n  static addSessionMethod<U, P, S>(\n    target: Command<U, P, S>,\n    key: string,\n    originalFn: Function\n  ) {\n    // Checking for private/non-functions here deduplicates this logic;\n    // otherwise it would need to exist in both the Command constructor\n    // (for copying functions from sessions) as well as the Command factory\n    // below\n    // this\n    if (\n      key.charAt(0) !== '_' &&\n      !(<any>target)[key] &&\n      typeof originalFn === 'function'\n    ) {\n      (<any>target)[key] = function(\n        this: Command<U>,\n        ...args: any[]\n      ): Command<U, P, S> {\n        return new (this.constructor as typeof Command)<U>(this, function(\n          this,\n          setContext: SetContextMethod\n        ) {\n          const parentContext = this._context;\n          const session = this._session;\n          let promise: CancellablePromise<any>;\n          // The function may have come from a session object\n          // prototype but have been overridden on the actual session\n          // instance; in such a case, the overridden function should\n          // be used instead of the one from the original source\n          // object. The original source object may still be used,\n          // however, if the function is being added like a mixin and\n          // does not exist on the actual session object for this\n          // session\n          const fn = (<any>session)[key] || originalFn;\n\n          if (\n            fn.usesElement &&\n            parentContext.length &&\n            (!args[0] || !args[0].elementId)\n          ) {\n            // Defer converting arguments into an array until it is\n            // necessary to avoid overhead\n            args = Array.prototype.slice.call(args, 0);\n\n            if (parentContext.isSingle) {\n              promise = fn.apply(session, [parentContext[0]].concat(args));\n            } else {\n              promise = Task.all(\n                parentContext.map((element: Element) =>\n                  fn.apply(session, [element].concat(args))\n                )\n              );\n            }\n          } else {\n            promise = fn.apply(session, args);\n          }\n\n          if (fn.createsContext) {\n            promise = promise.then(function(newContext) {\n              setContext(newContext);\n              return newContext;\n            });\n          }\n\n          return <CancellablePromise<U>>promise;\n        });\n      };\n    }\n  }\n\n  /**\n   * Augments `target` with a method that will call `key` on all context\n   * elements stored within `target`. This can be used to easily add new\n   * methods from any custom object that implements the Element API to any\n   * target object that implements the Command API.\n   *\n   * Functions that are copied may have the following extra properties in\n   * order to change the way that Command works with these functions:\n   *\n   * * `createsContext` (boolean): If this property is specified, the return\n   *   value from the function will be used as the new context for the\n   *   returned Command.\n   *\n   * @param {module:leadfoot/Command} target\n   * @param {string} key\n   */\n  static addElementMethod<T, P, S>(target: Command<T, P, S>, key: string) {\n    const anyTarget = <any>target;\n    if (key.charAt(0) !== '_') {\n      // some methods, like `click`, exist on both Session and Element;\n      // deduplicate these methods by appending the element ones with\n      // 'Element'\n      const targetKey = key + (anyTarget[key] ? 'Element' : '');\n      anyTarget[targetKey] = function(\n        this: Command<T, any, S>,\n        ...args: any[]\n      ): Command<T, P, S> {\n        return new (this.constructor as typeof Command)<T>(this, function(\n          setContext: SetContextMethod\n        ) {\n          const parentContext = this._context;\n          let promise: CancellablePromise<any>;\n          let fn = (<any>parentContext)[0] && (<any>parentContext)[0][key];\n\n          if (parentContext.isSingle) {\n            promise = fn.apply(parentContext[0], args);\n          } else {\n            promise = Task.all(\n              parentContext.map(function(element: any) {\n                return element[key].apply(element, args);\n              })\n            );\n          }\n\n          if (fn && fn.createsContext) {\n            promise = promise.then(function(newContext) {\n              setContext(newContext);\n              return newContext;\n            });\n          }\n\n          return <CancellablePromise<T>>promise;\n        });\n      };\n    }\n  }\n\n  private _parent: Command<P, any, StringResult> | undefined;\n  private _session: Session;\n  private _context!: Context;\n  private _task: CancellablePromise<any>;\n\n  /**\n   * @param parent The parent command that this command is chained to, or a\n   * [[Sesssion]] object if this is the first command in a command chain.\n   *\n   * @param initialiser A function that will be executed when all parent\n   * commands have completed execution. This function can create a new\n   * context for this command by calling the passed `setContext` function any\n   * time prior to resolving the Promise that it returns. If no context is\n   * explicitly provided, the context from the parent command will be used.\n   *\n   * @param errback A function that will be executed if any parent commands\n   * failed to complete successfully. This function can create a new context\n   * for the current command by calling the passed `setContext` function any\n   * time prior to resolving the Promise that it returns. If no context is\n   * explicitly provided, the context from the parent command will be used.\n   */\n  // TODO: Need to show that parent is mixed into this Command\n  constructor(\n    parentOrSession: Session | Command<P, any, StringResult> | null,\n    initialiser?: (\n      this: Command<T>,\n      setContext: SetContextMethod,\n      value: T\n    ) => T | CancellablePromise<T>,\n    errback?: (\n      this: Command<T>,\n      setContext: SetContextMethod,\n      error: Error\n    ) => T | CancellablePromise<T>\n  ) {\n    super();\n\n    const self = this;\n    let session: Session;\n    const trace: any = {};\n\n    function setContext(contextValue: Element | Element[]) {\n      let context: Context;\n      if (!Array.isArray(contextValue)) {\n        context = <Context>[contextValue];\n        context.isSingle = true;\n      } else {\n        context = contextValue;\n      }\n\n      const parent = <Command<P, any, StringResult>>parentOrSession;\n\n      // If the context being set has depth, then it is coming from\n      // `Command#end`, or someone smart knows what they are doing; do\n      // not change the depth\n      if (!('depth' in context)) {\n        context.depth = parent ? parent.context.depth! + 1 : 0;\n      }\n\n      self._context = context;\n    }\n\n    function fixStack(error: Error) {\n      error.stack = error.stack + trimStack(trace.stack);\n      throw error;\n    }\n\n    if (parentOrSession instanceof Command) {\n      this._parent = parentOrSession;\n      session = this._session = parentOrSession.session;\n    } else if (parentOrSession instanceof Session) {\n      session = this._session = parentOrSession;\n      parentOrSession = null;\n    } else {\n      throw new Error(\n        'A parent Command or Session must be provided to a new Command'\n      );\n    }\n\n    // Add any custom functions from the session to this command object so\n    // they can be accessed automatically using the fluid interfaces\n    // TODO: Test\n    getMethods(session).forEach(name => {\n      const key = <keyof Session>name;\n      if (session[key] !== Session.prototype[key]) {\n        Command.addSessionMethod(this, key, (<any>session)[key]);\n      }\n    });\n\n    Error.captureStackTrace(trace, Command);\n\n    // parentCommand will be null if parentOrSession was a session\n    let parentCommand = <Command<P, any, StringResult>>parentOrSession;\n    this._task = (parentCommand\n      ? parentCommand.promise\n      : Task.resolve(undefined)\n    )\n      .then(\n        function(returnValue) {\n          self._context = parentCommand ? parentCommand.context : TOP_CONTEXT;\n          return returnValue;\n        },\n        function(error) {\n          self._context = parentCommand ? parentCommand.context : TOP_CONTEXT;\n          throw error;\n        }\n      )\n      .then(\n        initialiser &&\n          function(returnValue) {\n            return Task.resolve(returnValue)\n              .then(initialiser.bind(self, setContext))\n              .catch(fixStack);\n          },\n        errback &&\n          function(error) {\n            return Task.reject(error)\n              .catch(errback.bind(self, setContext))\n              .catch(fixStack);\n          }\n      );\n  }\n\n  /**\n   * The parent Command of the Command, if one exists. This will be defined\n   * for all commands but the top-level Session command (i.e., in most\n   * contexts user code will call it).\n   */\n  get parent() {\n    return this._parent!;\n  }\n\n  /**\n   * The parent Session of the Command.\n   */\n  get session() {\n    return this._session;\n  }\n\n  /**\n   * The filtered elements that will be used if an element-specific method is\n   * invoked. Note that this property is not valid until the parent Command\n   * has been settled. The context array also has two additional properties:\n   *\n   * * `isSingle` (boolean): If true, the context will always contain a\n   *   single element. This is used to differentiate between methods that\n   *   should still return scalar values (`find`) and methods that should\n   *   return arrays of values even if there is only one element in the\n   *   context (`findAll`).\n   * * `depth` (number): The depth of the context within the command chain.\n   *   This is used to prevent traversal into higher filtering levels by\n   *   [[Command.Command.end]].\n   */\n  get context() {\n    return this._context;\n  }\n\n  /**\n   * The underlying Promise for the Command.\n   *\n   * @readonly\n   */\n  get promise() {\n    return this._task;\n  }\n\n  /**\n   * Pauses execution of the next command in the chain for `ms` milliseconds.\n   *\n   * @param ms Time to delay, in milliseconds.\n   */\n  sleep(ms: number): Command<void, P, StringResult> {\n    return new (this.constructor as typeof Command)<void>(this, function() {\n      return sleep(ms);\n    });\n  }\n\n  /**\n   * Ends the most recent filtering operation in the current Command chain\n   * and returns the set of matched elements to the previous state. This is\n   * equivalent to the `jQuery#end` method.\n   *\n   * ```js\n   * command\n   *     .findById('parent') // sets filter to #parent\n   *     .findByClassName('child') // sets filter to all .child inside #parent\n   *     .getVisibleText()\n   *     .then(function (visibleTexts) {\n   *         // all the visible texts from the children\n   *     })\n   *     .end() // resets filter to #parent\n   *     .end(); // resets filter to nothing (the whole document)\n   *  ```\n   *\n   * @param numCommandsToPop The number of element contexts to pop. Defaults\n   * to 1.\n   */\n  end(numCommandsToPop: number = 1): Command<void, P, StringResult> {\n    return new (this.constructor as typeof Command)<void>(this, function(\n      setContext: Function\n    ) {\n      let command: Command<any> | undefined = this;\n      let depth: number | undefined = this.context.depth;\n\n      while (depth && numCommandsToPop && (command = command.parent)) {\n        if (command.context.depth != null && command.context.depth < depth) {\n          --numCommandsToPop;\n          depth = command.context.depth;\n        }\n      }\n\n      setContext(command!.context);\n    });\n  }\n\n  /**\n   * Adds a callback to be invoked once the previously chained operation has\n   * completed.\n   *\n   * This method is compatible with the `Promise#then` API, with two\n   * important differences:\n   *\n   * 1. The context (`this`) of the callback is set to the Command object,\n   *    rather than being `undefined`. This allows promise helpers to be\n   *    created that can retrieve the appropriate session and element\n   *    contexts for execution.\n   * 2. A second non-standard `setContext` argument is passed to the\n   *    callback. This `setContext` function can be called at any time before\n   *    the callback fulfills its return value and expects either a single\n   *    [[Element]] or an array of Elements to be provided as its only\n   *    argument. The provided element(s) will be used as the context for\n   *    subsequent element method invocations (`click`, etc.). If the\n   *    `setContext` method is not called, the element context from the\n   *    parent will be passed through unmodified.\n   */\n  then<U = T, R = never>(\n    // tslint:disable:indent\n    callback?:\n      | ((\n          this: Command<T>,\n          value: T,\n          setContext: SetContextMethod\n        ) => U | PromiseLike<U>)\n      | null\n      | undefined,\n    errback?:\n      | ((this: Command<T>, error: any) => R | PromiseLike<R>)\n      | null\n      | undefined\n  ): Command<U | R, P, StringResult> {\n    function runCallback(\n      command: Command<U>,\n      callback:\n        | ((\n            this: Command<T>,\n            value: T,\n            setContext: SetContextMethod\n          ) => U | PromiseLike<U>)\n        | ((this: Command<T>, error: any) => R | PromiseLike<R>),\n      value: U,\n      setContext: SetContextMethod\n    ) {\n      const returnValue = callback.call(command, value, setContext);\n\n      // If someone returns `this` (or a chain starting from `this`) from\n      // the callback, it will cause a deadlock where the child command\n      // is waiting for the child command to resolve\n      if (returnValue instanceof Command) {\n        // maybeCommand can be a Session or a Command, both of which\n        // inherit from Locator\n        let maybeCommand: Command<any> | Session | undefined = returnValue;\n        do {\n          if (maybeCommand === command) {\n            throw new Error(\n              'Deadlock: do not use `return this` from a Command callback'\n            );\n          }\n        } while ((maybeCommand = getParent(maybeCommand)));\n      }\n\n      return returnValue;\n    }\n\n    return new (this.constructor as typeof Command)<U>(\n      this,\n      callback\n        ? function(setContext: SetContextMethod, value: U) {\n            return runCallback(this, callback, value, setContext);\n          }\n        : undefined,\n      errback\n        ? function(setContext: SetContextMethod, value: any) {\n            return runCallback(this, errback, value, setContext);\n          }\n        : undefined\n    );\n  }\n\n  /**\n   * Adds a callback to be invoked when any of the previously chained\n   * operations have failed.\n   */\n  catch<R = never>(\n    errback: (this: Command<T>, reason: any) => R | PromiseLike<R>\n  ) {\n    return this.then(null, errback);\n  }\n\n  /**\n   * Adds a callback to be invoked once the previously chained operations\n   * have resolved.\n   */\n  finally(callback: () => void) {\n    this._task = this._task.finally(callback);\n    return this;\n  }\n\n  /**\n   * Cancels all outstanding chained operations of the Command. Calling this\n   * method will cause this command and all subsequent chained commands to\n   * fail with a CancelError.\n   */\n  cancel() {\n    this._task.cancel();\n    return this;\n  }\n\n  find(strategy: Strategy, value: string) {\n    return this._callFindElementMethod('find', strategy, value);\n  }\n\n  findAll(strategy: Strategy, value: string) {\n    return this._callFindElementMethod('findAll', strategy, value);\n  }\n\n  findDisplayed(strategy: Strategy, value: string) {\n    return this._callFindElementMethod('findDisplayed', strategy, value);\n  }\n\n  /**\n   * a function that, when called, creates a new Command that retrieves\n   * elements from the parent context and uses them as the context for the\n   * newly created Command.\n   */\n  private _callFindElementMethod(\n    method: 'find' | 'findDisplayed',\n    strategy: Strategy,\n    value: string\n  ): Command<Element, P, string>;\n  private _callFindElementMethod(\n    method: 'findAll',\n    strategy: Strategy,\n    value: string\n  ): Command<Element[], P, string[]>;\n  private _callFindElementMethod(\n    method: 'find' | 'findAll' | 'findDisplayed',\n    strategy: Strategy,\n    value: string\n  ): Command<Element, P, string> | Command<Element[], P, string[]> {\n    return new (this.constructor as typeof Command)<any>(this, function(\n      setContext: SetContextMethod\n    ) {\n      const parentContext = this._context;\n      let task: CancellablePromise<Element | Element[]>;\n\n      if (parentContext.length && parentContext.isSingle) {\n        task = parentContext[0][method](strategy, value);\n      } else if (parentContext.length) {\n        task = Task.all(\n          parentContext.map(element => element[method](strategy, value))\n          // findAll against an array context will result in arrays\n          // of arrays; flatten into a single array of elments. It\n          // would also be possible to resort in document order but\n          // other parallel operations could not be sorted so we just\n          // don't do it anywhere and say not to rely on a particular\n          // order for results\n        ).then(elements => Array.prototype.concat.apply([], elements));\n      } else {\n        task = this.session[method](strategy, value);\n      }\n\n      return task.then(newContext => {\n        setContext(newContext);\n        return newContext;\n      });\n    });\n  }\n\n  private _callElementMethod<U>(\n    method: keyof Element,\n    ...args: any[]\n  ): Command<U, P, StringResult> {\n    return new (this.constructor as typeof Command)<U>(this, function(\n      setContext: SetContextMethod\n    ) {\n      const parentContext = this._context;\n      let task: CancellablePromise<U>;\n      let fn = parentContext[0] && parentContext[0][method];\n\n      if (parentContext.isSingle) {\n        task = fn.apply(parentContext[0], args);\n      } else {\n        task = Task.all(\n          parentContext.map(element => (<Function>element[method])(...args))\n        ).then(values => Array.prototype.concat.apply([], values));\n      }\n\n      if (fn && fn.createsContext) {\n        task = task.then(function(newContext) {\n          setContext(<any>newContext);\n          return newContext;\n        });\n      }\n\n      return task;\n    });\n  }\n\n  private _callSessionMethod<U>(\n    method: keyof Session,\n    ...args: any[]\n  ): Command<U, P, StringResult> {\n    return new (this.constructor as typeof Command)<U>(this, function(\n      setContext: SetContextMethod\n    ) {\n      const parentContext = this._context;\n      const session = this._session;\n      let task: CancellablePromise<U>;\n\n      // The function may have come from a session object prototype but\n      // have been overridden on the actual session instance; in such a\n      // case, the overridden function should be used instead of the one\n      // from the original source object. The original source object may\n      // still be used, however, if the function is being added like a\n      // mixin and does not exist on the actual session object for this\n      // session\n      const sessionMethod = (...args: any[]) => {\n        return (<Function>session[method])(...args);\n      };\n\n      if (\n        (<any>session[method]).usesElement &&\n        parentContext.length &&\n        (!args[0] || !args[0].elementId)\n      ) {\n        if (parentContext.isSingle) {\n          task = sessionMethod(...[parentContext[0], ...args]);\n        } else {\n          task = Task.all(\n            parentContext.map(element => sessionMethod(...[element, ...args]))\n          ).then(values => Array.prototype.concat.apply([], values));\n        }\n      } else {\n        task = sessionMethod(...args);\n      }\n\n      if ((<any>session[method]).createsContext) {\n        task = task.then(newContext => {\n          setContext(<any>newContext);\n          return newContext;\n        });\n      }\n\n      return task;\n    });\n  }\n\n  // Session methods\n\n  /**\n   * Gets the current value of a timeout for the session.\n   *\n   * @param type The type of timeout to retrieve. One of 'script',\n   * 'implicit', or 'page load'.\n   * @returns The timeout, in milliseconds.\n   */\n  getTimeout(type: string) {\n    return this._callSessionMethod<number>('getTimeout', type);\n  }\n\n  /**\n   * Sets the value of a timeout for the session.\n   *\n   * @param type The type of timeout to set. One of 'script', 'implicit', or\n   * 'page load'.\n   *\n   * @param ms The length of time to use for the timeout, in milliseconds. A\n   * value of 0 will cause operations to time out immediately.\n   */\n  setTimeout(type: string, ms: number) {\n    return this._callSessionMethod<void>('setTimeout', type, ms);\n  }\n\n  /**\n   * Gets the identifier for the window that is currently focused.\n   *\n   * @returns A window handle identifier that can be used with other window\n   * handling functions.\n   */\n  getCurrentWindowHandle() {\n    return this._callSessionMethod<string>('getCurrentWindowHandle');\n  }\n\n  /**\n   * Gets a list of identifiers for all currently open windows.\n   */\n  getAllWindowHandles() {\n    return this._callSessionMethod<string[]>('getAllWindowHandles');\n  }\n\n  /**\n   * Gets the URL that is loaded in the focused window/frame.\n   */\n  getCurrentUrl() {\n    return this._callSessionMethod<string>('getCurrentUrl');\n  }\n\n  /**\n   * Navigates the focused window/frame to a new URL.\n   */\n  get(url: string) {\n    return this._callSessionMethod<void>('get', url);\n  }\n\n  /**\n   * Navigates the focused window/frame forward one page using the browser’s\n   * navigation history.\n   */\n  goForward() {\n    return this._callSessionMethod<void>('goForward');\n  }\n\n  /**\n   * Navigates the focused window/frame back one page using the browser’s\n   * navigation history.\n   */\n  goBack() {\n    return this._callSessionMethod<void>('goBack');\n  }\n\n  /**\n   * Reloads the current browser window/frame.\n   */\n  refresh() {\n    return this._callSessionMethod<void>('refresh');\n  }\n\n  /**\n   * Executes JavaScript code within the focused window/frame. The code\n   * should return a value synchronously.\n   *\n   * See [[Command.Command.executeAsync]] to execute code that returns values\n   * asynchronously.\n   *\n   * @param script The code to execute. This function will always be\n   * converted to a string, sent to the remote environment, and reassembled\n   * as a new anonymous function on the remote end. This means that you\n   * cannot access any variables through closure. If your code needs to get\n   * data from variables on the local end, they should be passed using\n   * `args`.\n   *\n   * @param args An array of arguments that will be passed to the executed\n   * code. Only values that can be serialised to JSON, plus [[Element]]\n   * objects, can be specified as arguments.\n   *\n   * @returns The value returned by the remote code. Only values that can be\n   * serialised to JSON, plus DOM elements, can be returned.\n   */\n  execute<T = any>(script: Function | string, args?: any[]) {\n    return this._callSessionMethod<T>('execute', script, args);\n  }\n\n  /**\n   * Executes JavaScript code within the focused window/frame. The code must\n   * invoke the provided callback in order to signal that it has completed\n   * execution.\n   *\n   * See [[Command.Command.execute]] to execute code that returns values\n   * synchronously.\n   *\n   * See [[Command.Command.setExecuteAsyncTimeout]] to set the time until an\n   * asynchronous script is considered timed out.\n   *\n   * @param script The code to execute. This function will always be\n   * converted to a string, sent to the remote environment, and reassembled\n   * as a new anonymous function on the remote end. This means that you\n   * cannot access any variables through closure. If your code needs to get\n   * data from variables on the local end, they should be passed using\n   * `args`.\n   *\n   * @param args An array of arguments that will be passed to the executed\n   * code. Only values that can be serialised to JSON, plus [[Element]]\n   * objects, can be specified as arguments. In addition to these arguments,\n   * a callback function will always be passed as the final argument to the\n   * function specified in `script`. This callback function must be invoked\n   * in order to signal that execution has completed. The return value of the\n   * execution, if any, should be passed to this callback function.\n   *\n   * @returns The value returned by the remote code. Only values that can be\n   * serialised to JSON, plus DOM elements, can be returned.\n   */\n  executeAsync<T = any>(script: Function | string, args?: any[]) {\n    return this._callSessionMethod<T>('executeAsync', script, args);\n  }\n\n  /**\n   * Gets a screenshot of the focused window and returns it in PNG format.\n   */\n  takeScreenshot() {\n    return this._callSessionMethod<Buffer>('takeScreenshot');\n  }\n\n  /**\n   * Gets a list of input method editor engines available to the remote\n   * environment. As of April 2014, no known remote environments support IME\n   * functions.\n   */\n  getAvailableImeEngines() {\n    return this._callSessionMethod<string[]>('getAvailableImeEngines');\n  }\n\n  /**\n   * Gets the currently active input method editor for the remote environment.\n   * As of April 2014, no known remote environments support IME functions.\n   */\n  getActiveImeEngine() {\n    return this._callSessionMethod<string>('getActiveImeEngine');\n  }\n\n  /**\n   * Returns whether or not an input method editor is currently active in the\n   * remote environment. As of April 2014, no known remote environments\n   * support IME functions.\n   */\n  isImeActivated() {\n    return this._callSessionMethod<boolean>('isImeActivated');\n  }\n\n  /**\n   * Deactivates any active input method editor in the remote environment.\n   * As of April 2014, no known remote environments support IME functions.\n   */\n  deactivateIme() {\n    return this._callSessionMethod<void>('deactivateIme');\n  }\n\n  /**\n   * Activates an input method editor in the remote environment.\n   * As of April 2014, no known remote environments support IME functions.\n   *\n   * @param engine The type of IME to activate.\n   */\n  activateIme(engine: string) {\n    return this._callSessionMethod<void>('activateIme', engine);\n  }\n\n  /**\n   * Switches the currently focused frame to a new frame.\n   *\n   * @param id The frame to switch to. In most environments, a number or\n   * string value corresponds to a key in the `window.frames` object of the\n   * currently active frame. If `null`, the topmost (default) frame will be\n   * used. If an Element is provided, it must correspond to a `<frame>` or\n   * `<iframe>` element.\n   */\n  switchToFrame(id: string | number | Element | null) {\n    return this._callSessionMethod<void>('switchToFrame', id);\n  }\n\n  /**\n   * Switches the currently focused window to a new window.\n   *\n   * In environments using the JsonWireProtocol, this value corresponds to\n   * the `window.name` property of a window.\n   *\n   * @param handle The handle of the window to switch to. In mobile\n   * environments and environments based on the W3C WebDriver standard, this\n   * should be a handle as returned by\n   * [[Command.Command.getAllWindowHandles]].\n   */\n  switchToWindow(handle: string) {\n    return this._callSessionMethod<void>('switchToWindow', handle);\n  }\n\n  /**\n   * Switches the currently focused frame to the parent of the currently\n   * focused frame.\n   */\n  switchToParentFrame() {\n    return this._callSessionMethod<void>('switchToParentFrame');\n  }\n\n  /**\n   * Closes the currently focused window. In most environments, after the\n   * window has been closed, it is necessary to explicitly switch to whatever\n   * window is now focused.\n   */\n  closeCurrentWindow() {\n    return this._callSessionMethod<void>('closeCurrentWindow');\n  }\n\n  /**\n   * Sets the dimensions of a window.\n   *\n   * @param windowHandle The name of the window to resize. See\n   * [[Command.Command.switchToWindow]] to learn about valid window names.\n   * Omit this argument to resize the currently focused window.\n   *\n   * @param width The new width of the window, in CSS pixels.\n   *\n   * @param height The new height of the window, in CSS pixels.\n   */\n  setWindowSize(width: number, height: number): Command<void, P, StringResult>;\n  setWindowSize(\n    windowHandle: string,\n    width: number,\n    height: number\n  ): Command<void, P, StringResult>;\n  setWindowSize(...args: any[]) {\n    return this._callSessionMethod<void>('setWindowSize', ...args);\n  }\n\n  /**\n   * Gets the dimensions of a window.\n   *\n   * @param windowHandle The name of the window to query. See\n   * [[Command.Command.switchToWindow]] to learn about valid window names.\n   * Omit this argument to query the currently focused window.\n   *\n   * @returns An object describing the width and height of the window, in CSS\n   * pixels.\n   */\n  getWindowSize(_windowHandle?: string) {\n    return this._callSessionMethod<{ width: number; height: number }>(\n      'getWindowSize'\n    );\n  }\n\n  /**\n   * Sets the position of a window.\n   *\n   * Note that this method is not part of the W3C WebDriver standard.\n   *\n   * @param windowHandle The name of the window to move. See\n   * [[Command.Command.switchToWindow]] to learn about valid window names.\n   * Omit this argument to move the currently focused window.\n   *\n   * @param x The screen x-coordinate to move to, in CSS pixels, relative to\n   * the left edge of the primary monitor.\n   *\n   * @param y The screen y-coordinate to move to, in CSS pixels, relative to\n   * the top edge of the primary monitor.\n   */\n  setWindowPosition(x: number, y: number): Command<void, P, StringResult>;\n  setWindowPosition(\n    windowHandle: string,\n    x: number,\n    y: number\n  ): Command<void, P, StringResult>;\n  setWindowPosition(...args: any[]) {\n    return this._callSessionMethod<void>('setWindowPosition', ...args);\n  }\n\n  /**\n   * Gets the position of a window.\n   *\n   * Note that this method is not part of the W3C WebDriver standard.\n   *\n   * @param windowHandle The name of the window to query. See\n   * [[Command.Command.switchToWindow]] to learn about valid window names.\n   * Omit this argument to query the currently focused window.\n   *\n   * @returns An object describing the position of the window, in CSS pixels,\n   * relative to the top-left corner of the primary monitor. If a secondary\n   * monitor exists above or to the left of the primary monitor, these values\n   * will be negative.\n   */\n  getWindowPosition(windowHandle?: string) {\n    return this._callSessionMethod<{ x: number; y: number }>(\n      'getWindowPosition',\n      windowHandle\n    );\n  }\n\n  /**\n   * Maximises a window according to the platform’s window system behaviour.\n   *\n   * @param windowHandle The name of the window to resize. See\n   * [[Command.Command.switchToWindow] to learn about valid window names.\n   * Omit this argument to resize the currently focused window.\n   */\n  maximizeWindow(windowHandle?: string) {\n    return this._callSessionMethod<void>('maximizeWindow', windowHandle);\n  }\n\n  /**\n   * Gets all cookies set on the current page.\n   */\n  getCookies() {\n    return this._callSessionMethod<WebDriverCookie[]>('getCookies');\n  }\n\n  /**\n   * Sets a cookie on the current page.\n   */\n  setCookie(cookie: WebDriverCookie) {\n    return this._callSessionMethod<void>('setCookie', cookie);\n  }\n\n  /**\n   * Clears all cookies for the current page.\n   */\n  clearCookies() {\n    return this._callSessionMethod<void>('clearCookies');\n  }\n\n  /**\n   * Deletes a cookie on the current page.\n   *\n   * @param name The name of the cookie to delete.\n   */\n  deleteCookie(name: string) {\n    return this._callSessionMethod<void>('deleteCookie', name);\n  }\n\n  /**\n   * Gets the HTML loaded in the focused window/frame. This markup is\n   * serialised by the remote environment so may not exactly match the HTML\n   * provided by the Web server.\n   */\n  getPageSource() {\n    return this._callSessionMethod<string>('getPageSource');\n  }\n\n  /**\n   * Gets the title of the top-level browsing context of the current window\n   * or tab.\n   */\n  getPageTitle() {\n    return this._callSessionMethod<string>('getPageTitle');\n  }\n\n  /**\n   * Gets the currently focused element from the focused window/frame.\n   */\n  getActiveElement() {\n    return this._callSessionMethod<Element>('getActiveElement');\n  }\n\n  /**\n   * Types into the focused window/frame/element.\n   *\n   * @param keys The text to type in the remote environment. It is possible\n   * to type keys that do not have normal character representations (modifier\n   * keys, function keys, etc.) as well as keys that have two different\n   * representations on a typical US-ASCII keyboard (numpad keys); use the\n   * values from [[keys]] to type these special characters. Any modifier keys\n   * that are activated by this call will persist until they are deactivated.\n   * To deactivate a modifier key, type the same modifier key a second time,\n   * or send `\\uE000` ('NULL') to deactivate all currently active modifier\n   * keys.\n   */\n  pressKeys(keys: string | string[]) {\n    return this._callSessionMethod<void>('pressKeys', keys);\n  }\n\n  /**\n   * Gets the current screen orientation.\n   */\n  getOrientation() {\n    return this._callSessionMethod<'portrait' | 'landscape'>('getOrientation');\n  }\n\n  /**\n   * Sets the screen orientation.\n   *\n   * @param orientation Either 'portrait' or 'landscape'.\n   */\n  setOrientation(orientation: 'portrait' | 'landscape') {\n    return this._callSessionMethod<void>('setOrientation', orientation);\n  }\n\n  /**\n   * Gets the text displayed in the currently active alert pop-up.\n   */\n  getAlertText() {\n    return this._callSessionMethod<string>('getAlertText');\n  }\n\n  /**\n   * Types into the currently active prompt pop-up.\n   *\n   * @param text The text to type into the pop-up’s input box.\n   */\n  typeInPrompt(text: string | string[]) {\n    return this._callSessionMethod<void>('typeInPrompt', text);\n  }\n\n  /**\n   * Accepts an alert, prompt, or confirmation pop-up. Equivalent to clicking\n   * the 'OK' button.\n   */\n  acceptAlert() {\n    return this._callSessionMethod<void>('acceptAlert');\n  }\n\n  /**\n   * Dismisses an alert, prompt, or confirmation pop-up. Equivalent to\n   * clicking the 'OK' button of an alert pop-up or the 'Cancel' button of a\n   * prompt or confirmation pop-up.\n   */\n  dismissAlert() {\n    return this._callSessionMethod<void>('dismissAlert');\n  }\n\n  /**\n   * Moves the remote environment’s mouse cursor to the specified element or\n   * relative position. If the element is outside of the viewport, the remote\n   * driver will attempt to scroll it into view automatically.\n   *\n   * @param element The element to move the mouse to. If x-offset and\n   * y-offset are not specified, the mouse will be moved to the centre of the\n   * element.\n   *\n   * @param xOffset The x-offset of the cursor, maybe in CSS pixels, relative\n   * to the left edge of the specified element’s bounding client rectangle.\n   * If no element is specified, the offset is relative to the previous\n   * position of the mouse, or to the left edge of the page’s root element if\n   * the mouse was never moved before.\n   *\n   * @param yOffset The y-offset of the cursor, maybe in CSS pixels, relative\n   * to the top edge of the specified element’s bounding client rectangle. If\n   * no element is specified, the offset is relative to the previous position\n   * of the mouse, or to the top edge of the page’s root element if the mouse\n   * was never moved before.\n   */\n  moveMouseTo(\n    element?: Element,\n    xOffset?: number,\n    yOffset?: number\n  ): Command<void, P, StringResult>;\n  moveMouseTo(\n    xOffset?: number,\n    yOffset?: number\n  ): Command<void, P, StringResult>;\n  moveMouseTo(...args: any[]) {\n    return this._callSessionMethod<void>('moveMouseTo', ...args);\n  }\n\n  /**\n   * Clicks a mouse button at the point where the mouse cursor is currently\n   * positioned. This method may fail to execute with an error if the mouse\n   * has not been moved anywhere since the page was loaded.\n   *\n   * @param button The button to click. 0 corresponds to the primary mouse\n   * button, 1 to the middle mouse button, 2 to the secondary mouse button.\n   * Numbers above 2 correspond to any additional buttons a mouse might\n   * provide.\n   */\n  clickMouseButton(button?: number) {\n    return this._callSessionMethod<void>('clickMouseButton', button);\n  }\n\n  /**\n   * Depresses a mouse button without releasing it.\n   *\n   * @param button The button to press. See [[Command.Command.click]] for\n   * available options.\n   */\n  pressMouseButton(button?: number) {\n    return this._callSessionMethod<void>('pressMouseButton', button);\n  }\n\n  /**\n   * Releases a previously depressed mouse button.\n   *\n   * @param button The button to press. See [[Command.Command.click]] for\n   * available options.\n   */\n  releaseMouseButton(button?: number) {\n    return this._callSessionMethod<void>('releaseMouseButton', button);\n  }\n\n  /**\n   * Double-clicks the primary mouse button.\n   */\n  doubleClick() {\n    return this._callSessionMethod<void>('doubleClick');\n  }\n\n  /**\n   * Taps an element on a touch screen device. If the element is outside of\n   * the viewport, the remote driver will attempt to scroll it into view\n   * automatically.\n   *\n   * @param element The element to tap.\n   */\n  tap(element: Element) {\n    return this._callSessionMethod<void>('tap', element);\n  }\n\n  /**\n   * Depresses a new finger at the given point on a touch screen device\n   * without releasing it.\n   *\n   * @param x The screen x-coordinate to press, maybe in device pixels.\n   * @param y The screen y-coordinate to press, maybe in device pixels.\n   */\n  pressFinger(x: number, y: number) {\n    return this._callSessionMethod<void>('pressFinger', x, y);\n  }\n\n  /**\n   * Releases whatever finger exists at the given point on a touch screen\n   * device.\n   *\n   * @param x The screen x-coordinate where a finger is pressed, maybe in\n   * device pixels.\n   * @param y The screen y-coordinate where a finger is pressed, maybe in\n   * device pixels.\n   */\n  releaseFinger(x: number, y: number) {\n    return this._callSessionMethod<void>('releaseFinger', x, y);\n  }\n\n  /**\n   * Moves the last depressed finger to a new point on the touch screen.\n   *\n   * @param x The screen x-coordinate to move to, maybe in device pixels.\n   * @param y The screen y-coordinate to move to, maybe in device pixels.\n   */\n  moveFinger(x: number, y: number) {\n    return this._callSessionMethod<void>('moveFinger', x, y);\n  }\n\n  /**\n   * Scrolls the currently focused window on a touch screen device.\n   *\n   * @param element An element to scroll to. The window will be scrolled so\n   * the element is as close to the top-left corner of the window as\n   * possible.\n   *\n   * @param xOffset An optional x-offset, relative to the left edge of the\n   * element, in CSS pixels. If no element is specified, the offset is\n   * relative to the previous scroll position of the window.\n   *\n   * @param yOffset An optional y-offset, relative to the top edge of the\n   * element, in CSS pixels. If no element is specified, the offset is\n   * relative to the previous scroll position of the window.\n   */\n  touchScroll(xOffset: number, yOffset: number): Command<void, P, StringResult>;\n  touchScroll(\n    element?: Element,\n    xOffset?: number,\n    yOffset?: number\n  ): Command<void, P, StringResult>;\n  touchScroll(...args: any[]) {\n    return this._callSessionMethod<void>('touchScroll', ...args);\n  }\n\n  /**\n   * Performs a double-tap gesture on an element.\n   *\n   * @method\n   * @param element The element to double-tap.\n   */\n  doubleTap(element?: Element) {\n    return this._callSessionMethod<void>('doubleTap', element);\n  }\n\n  /**\n   * Performs a long-tap gesture on an element.\n   *\n   * @method\n   * @param element The element to long-tap.\n   */\n  longTap(element?: Element) {\n    return this._callSessionMethod<void>('longTap', element);\n  }\n\n  /**\n   * Flicks a finger. Note that this method is currently badly specified and\n   * highly dysfunctional and is only provided for the sake of completeness.\n   *\n   * @param element The element where the flick should start.\n   * @param xOffset The x-offset in pixels to flick by.\n   * @param yOffset The x-offset in pixels to flick by.\n   * @param speed The speed of the flick, in pixels per *second*. Most human\n   * flicks are 100–200ms, so this value will be higher than expected.\n   */\n  flickFinger(\n    element: Element,\n    xOffset: number,\n    yOffset: number,\n    speed?: number\n  ): Command<void, P, StringResult>;\n  flickFinger(\n    xOffset: number,\n    yOffset: number,\n    speed?: number\n  ): Command<void, P, StringResult>;\n  flickFinger(...args: any[]) {\n    return this._callSessionMethod<void>('flickFinger', ...args);\n  }\n\n  /**\n   * Gets the current geographical location of the remote environment.\n   *\n   * @returns a [[interfaces.Geolocation]] value with latitude and longitude\n   * specified using standard WGS84 decimal latitude/longitude. Altitude is\n   * specified as meters above the WGS84 ellipsoid. Not all environments\n   * support altitude.\n   */\n  getGeolocation() {\n    return this._callSessionMethod<Geolocation>('getGeolocation');\n  }\n\n  /**\n   * Sets the geographical location of the remote environment.\n   *\n   * @param location Latitude and longitude are specified using standard\n   * WGS84 decimal latitude/longitude. Altitude is specified as meters above\n   * the WGS84 ellipsoid. Not all environments support altitude.\n   */\n  setGeolocation(location: Geolocation) {\n    return this._callSessionMethod<void>('setGeolocation', location);\n  }\n\n  /**\n   * Gets all logs from the remote environment of the given type. The logs in\n   * the remote environment are cleared once they have been retrieved.\n   *\n   * @param type The type of log entries to retrieve. Available log types\n   * differ between remote environments. Use\n   * [[Command.Command.getAvailableLogTypes]] to learn what log types are\n   * currently available. Not all environments support all possible log\n   * types.\n   *\n   * @returns An array of log entry objects. Timestamps in log entries are\n   * Unix timestamps, in seconds.\n   */\n  getLogsFor(type: string) {\n    return this._callSessionMethod<LogEntry[]>('getLogsFor', type);\n  }\n\n  /**\n   * Gets the types of logs that are currently available for retrieval from\n   * the remote environment.\n   */\n  getAvailableLogTypes() {\n    return this._callSessionMethod<string[]>('getAvailableLogTypes');\n  }\n\n  /**\n   * Gets the current state of the HTML5 application cache for the current\n   * page.\n   *\n   * @returns The cache status. One of 0 (uncached), 1 (cached/idle), 2\n   * (checking), 3 (downloading), 4 (update ready), 5 (obsolete).\n   */\n  getApplicationCacheStatus() {\n    return this._callSessionMethod<number>('getApplicationCacheStatus');\n  }\n\n  /**\n   * Terminates the session. No more commands will be accepted by the remote\n   * after this point.\n   */\n  quit() {\n    return this._callSessionMethod<void>('quit');\n  }\n\n  /**\n   * Waits for all elements findable in the currently active window/frame\n   * using the given strategy and value to be destroyed.\n   *\n   * @param using The element retrieval strategy to use. See\n   * [[Command.Command.find]] for options.\n   *\n   * @param value The strategy-specific value to search for. See\n   * [[Command.Command.find]] for details.\n   */\n  waitForDeleted(using: Strategy, value: string) {\n    return this._callSessionMethod<void>('waitForDeleted', using, value);\n  }\n\n  /**\n   * Gets the timeout for [[Command.Command.executeAsync]] calls.\n   */\n  getExecuteAsyncTimeout() {\n    return this._callSessionMethod<number>('getExecuteAsyncTimeout');\n  }\n\n  /**\n   * Sets the timeout for [[Command.Command.executeAsync]] calls.\n   *\n   * @param ms The length of the timeout, in milliseconds.\n   */\n  setExecuteAsyncTimeout(ms: number) {\n    return this._callSessionMethod<void>('setExecuteAsyncTimeout', ms);\n  }\n\n  /**\n   * Gets the timeout for [[Command.Command.find]] calls.\n   */\n  getFindTimeout() {\n    return this._callSessionMethod<number>('getFindTimeout');\n  }\n\n  /**\n   * Sets the timeout for [[Command.Command.find]] calls.\n   *\n   * @param ms The length of the timeout, in milliseconds.\n   */\n  setFindTimeout(ms: number) {\n    return this._callSessionMethod<void>('setFindTimeout', ms);\n  }\n\n  /**\n   * Gets the timeout for [[Command.Command.get]] calls.\n   */\n  getPageLoadTimeout() {\n    return this._callSessionMethod<number>('getPageLoadTimeout');\n  }\n\n  /**\n   * Sets the timeout for [[Command.Command.get]] calls.\n   *\n   * @param ms The length of the timeout, in milliseconds.\n   */\n  setPageLoadTimeout(ms: number) {\n    return this._callSessionMethod<void>('setPageLoadTimeout', ms);\n  }\n\n  // Element methods\n\n  /**\n   * Clicks the element. This method works on both mouse and touch platforms.\n   */\n  click() {\n    return this._callElementMethod<void>('click');\n  }\n\n  /**\n   * Submits the element, if it is a form, or the form belonging to the\n   * element, if it is a form element.\n   */\n  submit() {\n    return this._callElementMethod<void>('submit');\n  }\n\n  /**\n   * Gets the visible text within the element. `<br>` elements are converted\n   * to line breaks in the returned text, and whitespace is normalised per\n   * the usual XML/HTML whitespace normalisation rules.\n   */\n  getVisibleText() {\n    return this._callElementMethod<StringResult>('getVisibleText');\n  }\n\n  /**\n   * Types into the element. This method works the same as the\n   * [[Command.Command.pressKeys]] method except that any modifier keys are\n   * automatically released at the end of the command. This method should be\n   * used instead of [[Command.Command.pressKeys]] to type filenames into\n   * file upload fields.\n   *\n   * Since 1.5, if the WebDriver server supports remote file uploads, and you\n   * type a path to a file on your local computer, that file will be\n   * transparently uploaded to the remote server and the remote filename will\n   * be typed instead. If you do not want to upload local files, use\n   * [[Command.Command.pressKeys]] instead.\n   *\n   * @param value The text to type in the remote environment. See\n   * [[Command.Command.pressKeys]] for more information.\n   */\n  type(value: string | string[]) {\n    return this._callElementMethod<void>('type', value);\n  }\n\n  /**\n   * Gets the tag name of the element. For HTML documents, the value is\n   * always lowercase.\n   */\n  getTagName() {\n    return this._callElementMethod<StringResult>('getTagName');\n  }\n\n  /**\n   * Clears the value of a form element.\n   */\n  clearValue() {\n    return this._callElementMethod<void>('clearValue');\n  }\n\n  /**\n   * Returns whether or not a form element is currently selected (for\n   * drop-down options and radio buttons), or whether or not the element is\n   * currently checked (for checkboxes).\n   */\n  isSelected() {\n    return this._callElementMethod<boolean>('isSelected');\n  }\n\n  /**\n   * Returns whether or not a form element can be interacted with.\n   */\n  isEnabled() {\n    return this._callElementMethod<boolean>('isEnabled');\n  }\n\n  /**\n   * Gets a property or attribute of the element according to the WebDriver\n   * specification algorithm. Use of this method is not recommended; instead,\n   * use [[Command.Command.getAttribute]] to retrieve DOM attributes and\n   * [[Command.Command.getProperty]] to retrieve DOM properties.\n   *\n   * This method uses the following algorithm on the server to determine what\n   * value to return:\n   *\n   * 1. If `name` is 'style', returns the `style.cssText` property of the\n   *    element.\n   * 2. If the attribute exists and is a boolean attribute, returns 'true' if\n   *    the attribute is true, or null otherwise.\n   * 3. If the element is an `<option>` element and `name` is 'value',\n   *    returns the `value` attribute if it exists, otherwise returns the\n   *    visible text content of the option.\n   * 4. If the element is a checkbox or radio button and `name` is\n   *    'selected', returns 'true' if the element is checked, or null\n   *    otherwise.\n   * 5. If the returned value is expected to be a URL (e.g. element is `<a>`\n   *    and attribute is `href`), returns the fully resolved URL from the\n   *    `href`/`src` property of the element, not the attribute.\n   * 6. If `name` is 'class', returns the `className` property of the\n   *    element.\n   * 7. If `name` is 'readonly', returns 'true' if the `readOnly` property is\n   *    true, or null otherwise.\n   * 8. If `name` corresponds to a property of the element, and the property\n   *    is not an Object, return the property value coerced to a string.\n   * 9. If `name` corresponds to an attribute of the element, return the\n   *    attribute value.\n   *\n   * @param name The property or attribute name.\n   * @returns The value of the attribute as a string, or `null` if no such\n   * property or attribute exists.\n   */\n  getSpecAttribute(name: string) {\n    return this._callElementMethod<StringResult>('getSpecAttribute', name);\n  }\n\n  /**\n   * Gets an attribute of the element.\n   *\n   * See [[Element.Element.getProperty]] to retrieve an element property.\n   *\n   * @param name The name of the attribute.\n   * @returns The value of the attribute, or `null` if no such attribute\n   * exists.\n   */\n  getAttribute<S = StringResult>(name: string) {\n    return this._callElementMethod<S>('getAttribute', name);\n  }\n\n  /**\n   * Gets a property of the element.\n   *\n   * See [[Element.Element.getAttribute]] to retrieve an element attribute.\n   *\n   * @param name The name of the property.\n   * @returns The value of the property.\n   */\n  getProperty<T = any>(name: string) {\n    return this._callElementMethod<T>('getProperty', name);\n  }\n\n  /**\n   * Determines if this element is equal to another element.\n   */\n  equals(other: Element) {\n    return this._callElementMethod<boolean>('equals', other);\n  }\n\n  /**\n   * Returns whether or not the element would be visible to an actual user.\n   * This means that the following types of elements are considered to be not\n   * displayed:\n   *\n   * 1. Elements with `display: none`\n   * 2. Elements with `visibility: hidden`\n   * 3. Elements positioned outside of the viewport that cannot be scrolled\n   *    into view\n   * 4. Elements with `opacity: 0`\n   * 5. Elements with no `offsetWidth` or `offsetHeight`\n   */\n  isDisplayed() {\n    return this._callElementMethod<boolean>('isDisplayed');\n  }\n\n  /**\n   * Gets the position of the element relative to the top-left corner of the\n   * document, taking into account scrolling and CSS transformations (if they\n   * are supported).\n   */\n  getPosition() {\n    return this._callElementMethod<{ x: number; y: number }>('getPosition');\n  }\n\n  /**\n   * Gets the size of the element, taking into account CSS transformations\n   * (if they are supported).\n   */\n  getSize() {\n    return this._callElementMethod<{ width: number; height: number }>(\n      'getSize'\n    );\n  }\n\n  /**\n   * Gets a CSS computed property value for the element.\n   *\n   * @param propertyName The CSS property to retrieve. This argument must be\n   * hyphenated, *not* camel-case.\n   */\n  getComputedStyle(propertyName: string) {\n    return this._callElementMethod<StringResult>(\n      'getComputedStyle',\n      propertyName\n    );\n  }\n}\n\n/**\n * The method passed to Command `then` callbacks that can be used to manually\n * set the Command chain context\n */\nexport interface SetContextMethod {\n  (context: Element | Element[]): void;\n}\n\n/**\n * The current Context of a Command\n */\nexport interface Context extends Array<any> {\n  isSingle?: boolean;\n  depth?: number;\n}\n\nconst TOP_CONTEXT: Context = [];\nTOP_CONTEXT.isSingle = true;\nTOP_CONTEXT.depth = 0;\n\nlet chaiAsPromised: any = null;\ntry {\n  chaiAsPromised = require('chai-as-promised');\n} catch (error) {}\n\n// TODO: Add unit test\nif (chaiAsPromised) {\n  (<any>chaiAsPromised).transferPromiseness = function(\n    assertion: any,\n    promise: any\n  ) {\n    assertion.then = promise.then.bind(promise);\n    for (let method in promise) {\n      if (typeof promise[method] === 'function') {\n        assertion[method] = promise[method].bind(promise);\n      }\n    }\n  };\n}\n\n// Return the 'parent' of a value, which is assumed to be a Command or Session\nfunction getParent(value: any): Command<any> | Session | undefined {\n  return value && value.parent;\n}\n"]}
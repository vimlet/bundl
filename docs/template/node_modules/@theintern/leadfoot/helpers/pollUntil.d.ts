import { CancellablePromise } from '@theintern/common';
export default function pollUntil<T>(poller: (() => any) | string, timeout?: number, pollInterval?: number): () => CancellablePromise<T>;
export default function pollUntil<T>(poller: string, args?: any[], timeout?: number, pollInterval?: number): () => CancellablePromise<T>;
export default function pollUntil<T>(poller: () => any, args?: never[], timeout?: number, pollInterval?: number): () => CancellablePromise<T>;
export default function pollUntil<T, U>(poller: (u: U) => any, args?: [U], timeout?: number, pollInterval?: number): () => CancellablePromise<T>;
export default function pollUntil<T, U, V>(poller: (u: U, v: V) => any, args?: [U, V], timeout?: number, pollInterval?: number): () => CancellablePromise<T>;
export default function pollUntil<T, U, V, W>(poller: (u: U, v: V, w: W) => any, args?: [U, V, W], timeout?: number, pollInterval?: number): () => CancellablePromise<T>;
export default function pollUntil<T, U, V, W, X>(poller: (u: U, v: V, w: W, x: X) => any, args?: [U, V, W, X], timeout?: number, pollInterval?: number): () => CancellablePromise<T>;
export default function pollUntil<T, U, V, W, X, Y>(poller: (u: U, v: V, w: W, x: X, y: Y) => any, args?: [U, V, W, X, Y], timeout?: number, pollInterval?: number): () => CancellablePromise<T>;

{"version":3,"file":"Locator.js","sourceRoot":"","sources":["../../../src/lib/Locator.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;GAWG;AACH;IAAA;IAgVA,CAAC;IAvUC;;;;;OAKG;IACH,iCAAe,GAAf,UAAgB,SAAiB;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACH,mCAAiB,GAAjB,UAAkB,QAAgB;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACH,0BAAQ,GAAR,UAAS,EAAU;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACH,4BAAU,GAAV,UAAW,IAAY;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;;;OAKG;IACH,gCAAc,GAAd,UAAe,IAAY;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACH,uCAAqB,GAArB,UAAsB,IAAY;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACH,+BAAa,GAAb,UAAc,OAAe;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACH,6BAAW,GAAX,UAAY,IAAY;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,oCAAkB,GAAlB,UAAmB,SAAiB;QAClC,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACH,sCAAoB,GAApB,UAAqB,QAAgB;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACH,+BAAa,GAAb,UAAc,IAAY;QACxB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACH,mCAAiB,GAAjB,UAAkB,IAAY;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACH,0CAAwB,GAAxB,UAAyB,IAAY;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACH,kCAAgB,GAAhB,UAAiB,OAAe;QAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,gCAAc,GAAd,UAAe,IAAY;QACzB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;;OAQG;IACH,0CAAwB,GAAxB,UAAyB,SAAiB;QACxC,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;;;OAQG;IACH,4CAA0B,GAA1B,UAA2B,QAAgB;QACzC,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;;OAQG;IACH,mCAAiB,GAAjB,UAAkB,EAAU;QAC1B,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;OAQG;IACH,qCAAmB,GAAnB,UAAoB,IAAY;QAC9B,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;;;OAQG;IACH,yCAAuB,GAAvB,UAAwB,IAAY;QAClC,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;;;;OAQG;IACH,gDAA8B,GAA9B,UAA+B,IAAY;QACzC,OAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAED;;;;;;;;OAQG;IACH,wCAAsB,GAAtB,UAAuB,OAAe;QACpC,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;;;OAQG;IACH,sCAAoB,GAApB,UAAqB,IAAY;QAC/B,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,2CAAyB,GAAzB,UAA0B,SAAiB;QACzC,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACH,6CAA2B,GAA3B,UAA4B,QAAgB;QAC1C,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACH,oCAAkB,GAAlB,UAAmB,EAAU;QAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACH,sCAAoB,GAApB,UAAqB,IAAY;QAC/B,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,0CAAwB,GAAxB,UAAyB,IAAY;QACnC,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACH,iDAA+B,GAA/B,UAAgC,IAAY;QAC1C,OAAO,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACH,yCAAuB,GAAvB,UAAwB,OAAe;QACrC,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACH,uCAAqB,GAArB,UAAsB,IAAY;QAChC,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IACH,cAAC;AAAD,CAAC,AAhVD,IAgVC;AAED,kBAAe,OAAO,CAAC;AAEV,QAAA,aAAa,GAAG;IAC3B,cAAc,EAAE,IAAI;IACpB,WAAW,EAAE,IAAI;IACjB,mBAAmB,EAAE,IAAI;IACzB,KAAK,EAAE,IAAI;CACZ,CAAC;AASW,QAAA,UAAU,gBAClB,qBAAa,IAChB,YAAY,EAAE,IAAI,EAClB,EAAE,EAAE,IAAI,EACR,IAAI,EAAE,IAAI,EACV,mBAAmB,EAAE,IAAI,EACzB,UAAU,EAAE,IAAI,IAChB;AAIF,SAAgB,YAAY,CAAC,KAAe,EAAE,KAAa;IACzD,QAAQ,KAAK,EAAE;QACb,KAAK,IAAI;YACP,KAAK,GAAG,cAAc,CAAC;YACvB,KAAK,GAAG,MAAI,KAAO,CAAC;YACpB,MAAM;QACR,KAAK,YAAY;YACf,KAAK,GAAG,cAAc,CAAC;YACvB,KAAK,GAAG,MAAI,KAAO,CAAC;YACpB,MAAM;QACR,KAAK,MAAM;YACT,KAAK,GAAG,cAAc,CAAC;YACvB,KAAK,GAAG,aAAU,KAAK,QAAI,CAAC;YAC5B,MAAM;QACR,KAAK,UAAU;YACb,KAAK,GAAG,cAAc,CAAC;YACvB,MAAM;KACT;IAED,OAAO,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AAC1B,CAAC;AApBD,oCAoBC","sourcesContent":["/**\n * Locator is a class that supports searching for specific element (E), list\n * (L), and void (V) types by various strategies.\n *\n * Note that this class includes JSONWireProtocol strategies. W3C Webdriver\n * only understands 4 strategies:\n *\n * 1. css selector\n * 2. link text\n * 3. partial link text\n * 4. xpath\n */\nabstract class Locator<E, L, V> {\n  abstract find(strategy: Strategy, value: string): E;\n\n  abstract findAll(strategy: Strategy, value: string): L;\n\n  abstract findDisplayed(strategy: Strategy, value: string): E;\n\n  abstract waitForDeleted(strategy: Strategy, value: string): V;\n\n  /**\n   * Gets the first element inside this element matching the given CSS class\n   * name.\n   *\n   * @param className The CSS class name to search for.\n   */\n  findByClassName(className: string) {\n    return this.find('class name', className);\n  }\n\n  /**\n   * Gets the first element inside this element matching the given CSS\n   * selector.\n   *\n   * @param selector The CSS selector to search for.\n   */\n  findByCssSelector(selector: string) {\n    return this.find('css selector', selector);\n  }\n\n  /**\n   * Gets the first element inside this element matching the given ID.\n   *\n   * @param id The ID of the element.\n   */\n  findById(id: string) {\n    return this.find('id', id);\n  }\n\n  /**\n   * Gets the first element inside this element matching the given name\n   * attribute.\n   *\n   * @param name The name of the element.\n   */\n  findByName(name: string) {\n    return this.find('name', name);\n  }\n\n  /**\n   * Gets the first element inside this element matching the given\n   * case-insensitive link text.\n   *\n   * @param text The link text of the element.\n   */\n  findByLinkText(text: string) {\n    return this.find('link text', text);\n  }\n\n  /**\n   * Gets the first element inside this element partially matching the given\n   * case-insensitive link text.\n   *\n   * @param text The partial link text of the element.\n   */\n  findByPartialLinkText(text: string) {\n    return this.find('partial link text', text);\n  }\n\n  /**\n   * Gets the first element inside this element matching the given HTML tag\n   * name.\n   *\n   * @param tagName The tag name of the element.\n   */\n  findByTagName(tagName: string) {\n    return this.find('tag name', tagName);\n  }\n\n  /**\n   * Gets the first element inside this element matching the given XPath\n   * selector.\n   *\n   * @param path The XPath selector to search for.\n   */\n  findByXpath(path: string) {\n    return this.find('xpath', path);\n  }\n\n  /**\n   * Gets all elements inside this element matching the given CSS class name.\n   *\n   * @param className The CSS class name to search for.\n   */\n  findAllByClassName(className: string) {\n    return this.findAll('class name', className);\n  }\n\n  /**\n   * Gets all elements inside this element matching the given CSS selector.\n   *\n   * @param selector The CSS selector to search for.\n   */\n  findAllByCssSelector(selector: string) {\n    return this.findAll('css selector', selector);\n  }\n\n  /**\n   * Gets all elements inside this element matching the given name attribute.\n   *\n   * @param name The name of the element.\n   */\n  findAllByName(name: string) {\n    return this.findAll('name', name);\n  }\n\n  /**\n   * Gets all elements inside this element matching the given\n   * case-insensitive link text.\n   *\n   * @param text The link text of the element.\n   */\n  findAllByLinkText(text: string) {\n    return this.findAll('link text', text);\n  }\n\n  /**\n   * Gets all elements inside this element partially matching the given\n   * case-insensitive link text.\n   *\n   * @param text The partial link text of the element.\n   */\n  findAllByPartialLinkText(text: string) {\n    return this.findAll('partial link text', text);\n  }\n\n  /**\n   * Gets all elements inside this element matching the given HTML tag name.\n   *\n   * @param tagName The tag name of the element.\n   */\n  findAllByTagName(tagName: string) {\n    return this.findAll('tag name', tagName);\n  }\n\n  /**\n   * Gets all elements inside this element matching the given XPath selector.\n   *\n   * @param path The XPath selector to search for.\n   */\n  findAllByXpath(path: string) {\n    return this.findAll('xpath', path);\n  }\n\n  /**\n   * Gets the first [[Element.isDisplayed|displayed]] element inside this\n   * element matching the given CSS class name. This is inherently slower\n   * than [[Element.find]], so should only be used in cases where the\n   * visibility of an element cannot be ensured in advance.\n   *\n   * @since 1.6\n   * @param className The CSS class name to search for.\n   */\n  findDisplayedByClassName(className: string) {\n    return this.findDisplayed('class name', className);\n  }\n\n  /**\n   * Gets the first [[Element.isDisplayed|displayed]] element inside this\n   * element matching the given CSS selector. This is inherently slower than\n   * [[Element.find]], so should only be used in cases where the visibility\n   * of an element cannot be ensured in advance.\n   *\n   * @since 1.6\n   * @param selector The CSS selector to search for.\n   */\n  findDisplayedByCssSelector(selector: string) {\n    return this.findDisplayed('css selector', selector);\n  }\n\n  /**\n   * Gets the first [[Element.isDisplayed|displayed]] element inside this\n   * element matching the given ID. This is inherently slower than\n   * [[Element.find]], so should only be used in cases where the visibility\n   * of an element cannot be ensured in advance.\n   *\n   * @since 1.6\n   * @param id The ID of the element.\n   */\n  findDisplayedById(id: string) {\n    return this.findDisplayed('id', id);\n  }\n\n  /**\n   * Gets the first [[Element.isDisplayed|displayed]] element inside this\n   * element matching the given name attribute. This is inherently slower\n   * than [[Element.find]], so should only be used in cases where the\n   * visibility of an element cannot be ensured in advance.\n   *\n   * @since 1.6\n   * @param name The name of the element.\n   */\n  findDisplayedByName(name: string) {\n    return this.findDisplayed('name', name);\n  }\n\n  /**\n   * Gets the first [[Element.isDisplayed|displayed]] element inside this\n   * element matching the given case-insensitive link text. This is\n   * inherently slower than [[Element.find]], so should only be used in cases\n   * where the visibility of an element cannot be ensured in advance.\n   *\n   * @since 1.6\n   * @param text The link text of the element.\n   */\n  findDisplayedByLinkText(text: string) {\n    return this.findDisplayed('link text', text);\n  }\n\n  /**\n   * Gets the first [[Element.isDisplayed|displayed]] element inside this\n   * element partially matching the given case-insensitive link text. This is\n   * inherently slower than [[Element.find]], so should only be used in cases\n   * where the visibility of an element cannot be ensured in advance.\n   *\n   * @since 1.6\n   * @param text The partial link text of the element.\n   */\n  findDisplayedByPartialLinkText(text: string) {\n    return this.findDisplayed('partial link text', text);\n  }\n\n  /**\n   * Gets the first [[Element.isDisplayed|displayed]] element inside this\n   * element matching the given HTML tag name. This is inherently slower than\n   * [[Element.find]], so should only be used in cases where the visibility\n   * of an element cannot be ensured in advance.\n   *\n   * @since 1.6\n   * @param tagName The tag name of the element.\n   */\n  findDisplayedByTagName(tagName: string) {\n    return this.findDisplayed('tag name', tagName);\n  }\n\n  /**\n   * Gets the first [[Element.isDisplayed|displayed]] element inside this\n   * element matching the given XPath selector. This is inherently slower\n   * than [[Element.find]], so should only be used in cases where the\n   * visibility of an element cannot be ensured in advance.\n   *\n   * @since 1.6\n   * @param path The XPath selector to search for.\n   */\n  findDisplayedByXpath(path: string) {\n    return this.findDisplayed('xpath', path);\n  }\n\n  /**\n   * Waits for all elements inside this element matching the given CSS class\n   * name to be destroyed.\n   *\n   * @param className The CSS class name to search for.\n   */\n  waitForDeletedByClassName(className: string) {\n    return this.waitForDeleted('class name', className);\n  }\n\n  /**\n   * Waits for all elements inside this element matching the given CSS\n   * selector to be destroyed.\n   *\n   * @param selector The CSS selector to search for.\n   */\n  waitForDeletedByCssSelector(selector: string) {\n    return this.waitForDeleted('css selector', selector);\n  }\n\n  /**\n   * Waits for all elements inside this element matching the given ID to be\n   * destroyed.\n   *\n   * @param id The ID of the element.\n   */\n  waitForDeletedById(id: string) {\n    return this.waitForDeleted('id', id);\n  }\n\n  /**\n   * Waits for all elements inside this element matching the given name\n   * attribute to be destroyed.\n   *\n   * @param name The name of the element.\n   */\n  waitForDeletedByName(name: string) {\n    return this.waitForDeleted('name', name);\n  }\n\n  /**\n   * Waits for all elements inside this element matching the given\n   * case-insensitive link text to be destroyed.\n   *\n   * @param text The link text of the element.\n   */\n  waitForDeletedByLinkText(text: string) {\n    return this.waitForDeleted('link text', text);\n  }\n\n  /**\n   * Waits for all elements inside this element partially matching the given\n   * case-insensitive link text to be destroyed.\n   *\n   * @param text The partial link text of the element.\n   */\n  waitForDeletedByPartialLinkText(text: string) {\n    return this.waitForDeleted('partial link text', text);\n  }\n\n  /**\n   * Waits for all elements inside this element matching the given HTML tag\n   * name to be destroyed.\n   *\n   * @param tagName The tag name of the element.\n   */\n  waitForDeletedByTagName(tagName: string) {\n    return this.waitForDeleted('tag name', tagName);\n  }\n\n  /**\n   * Waits for all elements inside this element matching the given XPath\n   * selector to be destroyed.\n   *\n   * @param path The XPath selector to search for.\n   */\n  waitForDeletedByXpath(path: string) {\n    return this.waitForDeleted('xpath', path);\n  }\n}\n\nexport default Locator;\n\nexport const w3cStrategies = {\n  'css selector': true,\n  'link text': true,\n  'partial link text': true,\n  xpath: true\n};\n\nexport type W3cStrategy = keyof typeof w3cStrategies;\n\nexport interface W3cLocator {\n  using: W3cStrategy;\n  value: string;\n}\n\nexport const strategies = {\n  ...w3cStrategies,\n  'class name': true,\n  id: true,\n  name: true,\n  'partial link text': true,\n  'tag name': true\n};\n\nexport type Strategy = keyof typeof strategies;\n\nexport function toW3cLocator(using: Strategy, value: string): W3cLocator {\n  switch (using) {\n    case 'id':\n      using = 'css selector';\n      value = `#${value}`;\n      break;\n    case 'class name':\n      using = 'css selector';\n      value = `.${value}`;\n      break;\n    case 'name':\n      using = 'css selector';\n      value = `[name=\"${value}\"]`;\n      break;\n    case 'tag name':\n      using = 'css selector';\n      break;\n  }\n\n  return { using, value };\n}\n"]}
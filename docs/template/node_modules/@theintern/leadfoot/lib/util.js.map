{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/lib/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { Task, CancellablePromise } from '@theintern/common';\n\n/**\n * Creates a promise that resolves itself after `ms` milliseconds.\n *\n * @param ms Time until resolution in milliseconds.\n */\nexport function sleep(ms: number): CancellablePromise<void> {\n  let timer: NodeJS.Timer;\n  return new Task<void>(\n    function(resolve) {\n      timer = setTimeout(() => {\n        resolve();\n      }, ms);\n    },\n    () => clearTimeout(timer)\n  );\n}\n\n/**\n * Annotates the method with additional properties that provide guidance to\n * [[Command]] about how the method interacts with stored context elements.\n */\nexport function forCommand(\n  fn: Function,\n  properties: { usesElement?: boolean; createsContext?: boolean }\n): Function {\n  return Object.assign(fn, properties);\n}\n\n/**\n * Get method names, including inherited methods, on an object\n */\nexport function getMethods(obj: object) {\n  return getOwnProperties(obj).filter(\n    name => typeof (<any>obj)[name] === 'function'\n  );\n}\n\n/**\n * Get all property names for an object, including non-enumerable properties\n */\nexport function getOwnProperties(obj: Object): string[] {\n  if (obj === Object.prototype) {\n    return [];\n  }\n  return [\n    ...Object.getOwnPropertyNames(obj).filter(\n      name => name !== 'constructor' && name.indexOf('__') !== 0\n    ),\n    ...getOwnProperties(Object.getPrototypeOf(obj))\n  ];\n}\n\n/**\n * Searches a document or element subtree for links with the given\n * normalized text. This method works for 'link text' and 'partial link\n * text' search strategies.\n *\n * Note that this method should be passed to an `execute` call, not called\n * directly. It has an 'istanbul ignore' comment for this reason.\n *\n * @param using The strategy in use ('link text' or 'partial link text')\n * @param value The link text to search for\n * @param multiple If true, return all matching links\n * @param element A context element\n * @returns The found element or elements\n */\n/* istanbul ignore next */\nexport function manualFindByLinkText(\n  using: string,\n  value: string,\n  multiple: boolean,\n  element?: HTMLElement\n) {\n  const check =\n    using === 'link text'\n      ? function(linkText: string, text: string) {\n          return linkText === text;\n          // tslint:disable-next-line:indent\n        }\n      : function(linkText: string, text: string) {\n          return linkText.indexOf(text) !== -1;\n          // tslint:disable-next-line:indent\n        };\n\n  const links = (element || document).getElementsByTagName('a');\n  let linkText: string;\n  const found: HTMLElement[] = [];\n\n  for (let i = 0; i < links.length; i++) {\n    // Normalize the link text whitespace\n    linkText = links[i].innerText\n      .replace(/^\\s+/, '')\n      .replace(/\\s+$/, '')\n      .replace(/\\s*\\r\\n\\s*/g, '\\n')\n      .replace(/ +/g, ' ');\n    if (check(linkText, value)) {\n      if (!multiple) {\n        return links[i];\n      }\n      found.push(links[i]);\n    }\n  }\n\n  if (multiple) {\n    return found;\n  }\n}\n\n/**\n * Converts a function to a string representation suitable for use with the\n * `execute` API endpoint.\n */\nexport function toExecuteString(fn: Function | string): string {\n  if (typeof fn === 'function') {\n    // If someone runs code through Istanbul in the test runner, inline\n    // functions that are supposed to execute on the client will contain\n    // code coverage variables that will cause script execution failure.\n    // These statements are very simple and are generated in a consistent\n    // manner, so we can get rid of them easily with a regular expression\n    fn = fn.toString().replace(/\\b__cov_[^,;]+[,;]/g, '');\n    fn = 'return (' + fn + ').apply(this, arguments);';\n  }\n\n  return fn;\n}\n\n/**\n * Removes the first line of a stack trace, which in V8 is the string\n * representation of the object holding the stack trace (which is garbage for\n * captured stack traces).\n */\nexport function trimStack(stack: string): string {\n  return stack.replace(/^[^\\n]+/, '');\n}\n"]}
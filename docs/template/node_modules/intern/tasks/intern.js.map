{"version":3,"file":"intern.js","sourceRoot":"","sources":["../../../src/tasks/intern.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,4CAA2C;IAE3C,8CAAyC;IAEzC,yCAA6C;IA+B7C,SAAS,mBAAmB,CAC1B,OAAoB;QAKpB,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,OAAO,gBAAS,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,EAAU;oBAAR,kBAAM;gBACjD,IAAM,IAAI,wBAAQ,OAAO,CAAE,CAAC;gBAC5B,OAAO,IAAI,CAAC,MAAM,CAAC;gBACnB,OAAO,EAAE,MAAM,QAAA,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;IAClD,CAAC;IA5CD,OAAS,UAAS,KAAa;QAC7B,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE;YAChC,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YAC1B,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAc,EAAE,CAAC,CAAC;YAG9C,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC;YAEjC,mBAAmB,CAAC,OAAO,CAAC;iBACzB,IAAI,CAAC,UAAC,EAAmB;oBAAjB,kBAAM,EAAE,oBAAO;gBACtB,IAAM,MAAM,GAAG,CAAC,eAAM,CAAC,MAAM,GAAG,IAAI,cAAI,EAAE,CAAC,CAAC;gBAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBACzB,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAE1B,OAAO,MAAM,CAAC,GAAG,EAAE,CAAC;YACtB,CAAC,CAAC;iBACD,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAExB,SAAS,MAAM,CAAC,KAAW;gBACzB,eAAM,CAAC,MAAM,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,KAAK,CAAC,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC","sourcesContent":["import { global } from '@theintern/common';\n\nimport Node from '../lib/executors/Node';\nimport { Config } from '../lib/common/config';\nimport { getConfig } from '../lib/node/util';\n\nexport = function(grunt: IGrunt) {\n  grunt.registerMultiTask('intern', function() {\n    const done = this.async();\n    const options = this.options<TaskOptions>({});\n\n    // Force colored output for istanbul report\n    process.env.FORCE_COLOR = 'true';\n\n    getConfigAndOptions(options)\n      .then(({ config, options }) => {\n        const intern = (global.intern = new Node());\n        intern.configure(config);\n        intern.configure(options);\n\n        return intern.run();\n      })\n      .then(finish, finish);\n\n    function finish(error?: any) {\n      global.intern = null;\n      done(error);\n    }\n  });\n};\n\ninterface TaskOptions extends grunt.task.ITaskOptions, Partial<Config> {\n  [key: string]: any;\n}\n\nfunction getConfigAndOptions(\n  options: TaskOptions\n): Promise<{\n  config: Partial<Config>;\n  options: TaskOptions;\n}> {\n  if (options.config) {\n    return getConfig(options.config, []).then(({ config }) => {\n      const opts = { ...options };\n      delete opts.config;\n      return { config, options: opts };\n    });\n  }\n\n  return Promise.resolve({ config: {}, options });\n}\n"]}
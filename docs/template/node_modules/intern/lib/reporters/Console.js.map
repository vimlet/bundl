{"version":3,"file":"Console.js","sourceRoot":"","sources":["../../../../src/lib/reporters/Console.ts"],"names":[],"mappings":"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","sourcesContent":["import { Executor } from '../executors/Executor';\nimport Suite from '../Suite';\nimport Test from '../Test';\nimport Reporter, { eventHandler, ReporterOptions } from './Reporter';\n\n/**\n * The console reporter outputs to the browser console.\n */\nexport default class ConsoleReporter extends Reporter {\n  private _hasGrouping: boolean;\n  private _testId: keyof Test;\n\n  constructor(executor: Executor, options: ReporterOptions = {}) {\n    super(executor, options);\n    this._hasGrouping = 'group' in this.console && 'groupEnd' in this.console;\n    this._testId = this._hasGrouping ? 'name' : 'id';\n  }\n\n  @eventHandler()\n  error(error: Error) {\n    this.console.warn('FATAL ERROR');\n    this.console.error(this.formatError(error));\n  }\n\n  @eventHandler()\n  suiteEnd(suite: Suite) {\n    // IE<10 does not provide a global console object when Developer Tools\n    // is turned off\n    if (!this.console) {\n      return;\n    }\n\n    if (suite.error) {\n      this.console.warn('SUITE ERROR');\n      this.console.error(this.formatError(suite.error));\n    } else {\n      const numTests = suite.numTests;\n      const numFailedTests = suite.numFailedTests;\n      const numSkippedTests = suite.numSkippedTests;\n      const numNotRunTests =\n        numTests - (suite.numPassedTests + numFailedTests + numSkippedTests);\n      let message = numFailedTests + '/' + numTests + ' tests failed';\n\n      if (numSkippedTests + numNotRunTests > 0) {\n        message += ` (${numSkippedTests + numNotRunTests} not run)`;\n      }\n\n      this.console[numFailedTests ? 'warn' : 'info'](message);\n    }\n\n    this._hasGrouping && this.console.groupEnd();\n  }\n\n  @eventHandler()\n  suiteStart(suite: Suite) {\n    // only start group for non-root suite\n    this._hasGrouping && suite.hasParent && this.console.group(suite.name);\n  }\n\n  @eventHandler()\n  testEnd(test: Test) {\n    if (test.error) {\n      this.console.error(`FAIL: ${test[this._testId]} (${test.timeElapsed}ms)`);\n      this.console.error(this.formatError(test.error));\n    } else if (test.skipped) {\n      this.console.log(`SKIP: ${test[this._testId]} (${test.skipped})`);\n    } else {\n      this.console.log(`PASS: ${test[this._testId]} (${test.timeElapsed}ms)`);\n    }\n  }\n}\n"]}
{"version":3,"file":"Cobertura.js","sourceRoot":"","sources":["../../../../src/lib/reporters/Cobertura.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,uCAAsE;IAGtE;QAAuC,qCAAQ;QAK7C,mBAAY,QAAc,EAAE,OAAsC;YAAtC,wBAAA,EAAA,YAAsC;YAAlE,YACE,kBAAM,QAAQ,EAAE,OAAO,CAAC,SAKzB;YATQ,gBAAU,GAAe,WAAW,CAAC;YAM5C,IAAI,OAAO,CAAC,WAAW,EAAE;gBACvB,KAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;aACxC;;QACH,CAAC;QAED,sCAAkB,GAAlB;YACE,IAAM,OAAO,GAAG,iBAAM,kBAAkB,WAAE,CAAC;YAE3C,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YAEvC,OAAO,OAAO,CAAC;QACjB,CAAC;QACH,gBAAC;IAAD,CAAC,AApBD,CAAuC,kBAAQ,GAoB9C","sourcesContent":["import Coverage, { ReportType, CoverageProperties } from './Coverage';\nimport Node from '../executors/Node';\n\nexport default class Cobertura extends Coverage\n  implements CoberturaCoverageProperties {\n  readonly reportType: ReportType = 'cobertura';\n  projectRoot: string | undefined;\n\n  constructor(executor: Node, options: CoberturaCoverageOptions = {}) {\n    super(executor, options);\n\n    if (options.projectRoot) {\n      this.projectRoot = options.projectRoot;\n    }\n  }\n\n  getReporterOptions(): { [key: string]: any } {\n    const options = super.getReporterOptions();\n\n    options.projectRoot = this.projectRoot;\n\n    return options;\n  }\n}\n\nexport interface CoberturaCoverageProperties extends CoverageProperties {\n  projectRoot?: string;\n}\n\nexport type CoberturaCoverageOptions = Partial<CoberturaCoverageProperties>;\n"]}
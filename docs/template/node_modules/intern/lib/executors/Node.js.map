{"version":3,"file":"Node.js","sourceRoot":"","sources":["../../../../src/lib/executors/Node.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport { dirname, normalize, resolve, sep } from 'path';\nimport { sync as nodeResolve } from 'resolve';\nimport { CoverageMap, createCoverageMap } from 'istanbul-lib-coverage';\nimport { createInstrumenter, Instrumenter } from 'istanbul-lib-instrument';\nimport { createSourceMapStore, MapStore } from 'istanbul-lib-source-maps';\nimport {\n  hookRunInThisContext,\n  hookRequire,\n  unhookRunInThisContext\n} from 'istanbul-lib-hook';\nimport { global, Task, CancellablePromise, deepMixin } from '@theintern/common';\nimport Command from '@theintern/leadfoot/Command';\nimport LeadfootServer from '@theintern/leadfoot/Server';\nimport Tunnel, { DownloadProgressEvent } from '@theintern/digdug/Tunnel';\n\n// Dig Dug tunnels\nimport SeleniumTunnel from '@theintern/digdug/SeleniumTunnel';\nimport BrowserStackTunnel, {\n  BrowserStackOptions\n} from '@theintern/digdug/BrowserStackTunnel';\nimport SauceLabsTunnel from '@theintern/digdug/SauceLabsTunnel';\nimport TestingBotTunnel from '@theintern/digdug/TestingBotTunnel';\nimport CrossBrowserTestingTunnel from '@theintern/digdug/CrossBrowserTestingTunnel';\nimport NullTunnel from '@theintern/digdug/NullTunnel';\n\nimport { Config, EnvironmentSpec } from '../common/config';\nimport Executor, { Events, Plugins } from './Executor';\nimport { normalizePathEnding } from '../common/path';\nimport { pullFromArray } from '../common/util';\nimport { expandFiles, readSourceMap } from '../node/util';\nimport ErrorFormatter from '../node/ErrorFormatter';\nimport ProxiedSession from '../ProxiedSession';\nimport Environment from '../Environment';\nimport resolveEnvironments from '../resolveEnvironments';\nimport Server from '../Server';\nimport Suite, { isSuite } from '../Suite';\nimport RemoteSuite from '../RemoteSuite';\nimport { RuntimeEnvironment } from '../types';\nimport * as console from '../common/console';\n\n// Reporters\nimport Pretty from '../reporters/Pretty';\nimport Runner from '../reporters/Runner';\nimport Simple from '../reporters/Simple';\nimport JUnit from '../reporters/JUnit';\nimport Cobertura from '../reporters/Cobertura';\nimport JsonCoverage from '../reporters/JsonCoverage';\nimport HtmlCoverage from '../reporters/HtmlCoverage';\nimport Lcov from '../reporters/Lcov';\nimport Benchmark from '../reporters/Benchmark';\nimport TeamCity from '../reporters/TeamCity';\n\nconst process: NodeJS.Process = global.process;\n\nexport default class Node extends Executor<NodeEvents, Config, NodePlugins> {\n  server: Server | undefined;\n  tunnel: Tunnel | undefined;\n\n  protected _coverageMap: CoverageMap;\n  protected _coverageFiles: string[] | undefined;\n  protected _loadingFunctionalSuites: boolean | undefined;\n  protected _instrumentBasePath: string | undefined;\n  protected _instrumenter: Instrumenter | undefined;\n  protected _sourceMaps: MapStore;\n  protected _instrumentedMaps: MapStore;\n  protected _unhookRequire: (() => void) | undefined;\n  protected _sessionSuites: Suite[] | undefined;\n\n  constructor(options?: { [key in keyof Config]?: any }) {\n    super({\n      basePath: process.cwd() + sep,\n      capabilities: {},\n      coverage: [],\n      environments: [],\n      functionalCoverage: true,\n      functionalSuites: [],\n      functionalTimeouts: {},\n      instrumenterOptions: {},\n      maxConcurrency: Infinity,\n      name: 'node',\n      reporters: [],\n      runInSync: false,\n      serveOnly: false,\n      serverPort: 9000,\n      serverUrl: '',\n      socketPort: 9001,\n      tunnel: 'selenium',\n      tunnelOptions: { tunnelId: String(Date.now()) }\n    });\n\n    this._sourceMaps = createSourceMapStore();\n    this._instrumentedMaps = createSourceMapStore();\n    this._errorFormatter = new ErrorFormatter(this);\n    this._coverageMap = createCoverageMap();\n\n    this.registerReporter('pretty', options => new Pretty(this, options));\n    this.registerReporter('simple', options => new Simple(this, options));\n    this.registerReporter('runner', options => new Runner(this, options));\n    this.registerReporter('benchmark', options => new Benchmark(this, options));\n    this.registerReporter('junit', options => new JUnit(this, options));\n    this.registerReporter(\n      'jsoncoverage',\n      options => new JsonCoverage(this, options)\n    );\n    this.registerReporter(\n      'htmlcoverage',\n      options => new HtmlCoverage(this, options)\n    );\n    this.registerReporter('lcov', options => new Lcov(this, options));\n    this.registerReporter('cobertura', options => new Cobertura(this, options));\n    this.registerReporter('teamcity', options => new TeamCity(this, options));\n\n    this.registerTunnel('null', NullTunnel);\n    this.registerTunnel('selenium', SeleniumTunnel);\n    this.registerTunnel('saucelabs', SauceLabsTunnel);\n    this.registerTunnel('browserstack', BrowserStackTunnel);\n    this.registerTunnel('testingbot', TestingBotTunnel);\n    this.registerTunnel('cbt', CrossBrowserTestingTunnel);\n\n    if (options) {\n      this.configure(options);\n    }\n\n    // Report uncaught errors\n    process.on('unhandledRejection', (reason: Error, promise: Promise<any>) => {\n      console.warn('Unhandled rejection:', reason, promise);\n      this.emit('error', reason);\n    });\n\n    process.on('uncaughtException', (reason: Error) => {\n      console.warn('Unhandled error:', reason);\n      this.emit('error', reason);\n    });\n\n    this.on('coverage', message => {\n      this._coverageMap.merge(message.coverage);\n    });\n  }\n\n  get coverageMap() {\n    return this._coverageMap;\n  }\n\n  get environment(): RuntimeEnvironment {\n    return 'node';\n  }\n\n  get instrumentedMapStore() {\n    return this._instrumentedMaps;\n  }\n\n  get sourceMapStore() {\n    return this._sourceMaps;\n  }\n\n  get hasCoveredFiles() {\n    return this._coverageFiles && this._coverageFiles.length > 0;\n  }\n\n  /**\n   * The root suites managed by this executor\n   */\n  get suites() {\n    const suites = [];\n\n    // Only include the rootSuite if some suites were added to it.\n    if (this._rootSuite.tests.length > 0) {\n      suites.push(this._rootSuite);\n    }\n\n    if (this._sessionSuites) {\n      suites.push(...this._sessionSuites);\n    }\n\n    return suites;\n  }\n\n  /**\n   * Override Executor#addSuite to handle functional suites\n   */\n  addSuite(factory: (parentSuite: Suite) => void) {\n    if (this._loadingFunctionalSuites) {\n      this._sessionSuites!.forEach(factory);\n    } else {\n      super.addSuite(factory);\n    }\n  }\n\n  /**\n   * Retrieve a registered tunnel constructor\n   */\n  getTunnel(name: string): typeof Tunnel {\n    return this.getPlugin<typeof Tunnel>(`tunnel.${name}`);\n  }\n\n  /**\n   * Insert coverage instrumentation into a given code string\n   */\n  instrumentCode(code: string, filename: string): string {\n    this.log('Instrumenting', filename);\n    const sourceMap = readSourceMap(filename, code);\n    if (sourceMap) {\n      this._sourceMaps.registerMap(filename, sourceMap);\n    }\n\n    try {\n      const instrumenter = this._instrumenter!;\n      const newCode = instrumenter.instrumentSync(\n        code,\n        normalize(filename),\n        sourceMap\n      );\n\n      this._coverageMap.addFileCoverage(instrumenter.lastFileCoverage());\n      this._instrumentedMaps.registerMap(\n        filename,\n        instrumenter.lastSourceMap()\n      );\n\n      return newCode;\n    } catch (error) {\n      this.emit('warning', `Error instrumenting ${filename}: ${error.message}`);\n      return code;\n    }\n  }\n\n  /**\n   * Load scripts using Node's require\n   */\n  loadScript(script: string | string[]): CancellablePromise<void> {\n    const scripts = Array.isArray(script) ? script : [script];\n\n    try {\n      for (const script of scripts) {\n        const file = resolve(script);\n        if (existsSync(file)) {\n          require(file);\n        } else {\n          // `script` isn't a valid file path, so maybe it's a\n          // Node-resolvable module\n          require(nodeResolve(script, { basedir: process.cwd() }));\n        }\n      }\n    } catch (error) {\n      return Task.reject<void>(error);\n    }\n\n    return Task.resolve();\n  }\n\n  /**\n   * Register a tunnel constructor with the plugin system. It can be retrieved\n   * later with getTunnel or getPlugin.\n   */\n  registerTunnel(name: string, Ctor: typeof Tunnel) {\n    this.registerPlugin('tunnel', name, () => Ctor);\n  }\n\n  /**\n   * Return true if a given file should be instrumented based on the current\n   * config\n   */\n  shouldInstrumentFile(filename: string) {\n    return this._coverageFiles\n      ? this._coverageFiles.indexOf(filename) !== -1\n      : false;\n  }\n\n  protected _afterRun() {\n    return super._afterRun().finally(() => {\n      this._removeInstrumentationHooks();\n\n      const promises: Promise<any>[] = [];\n      if (this.server) {\n        promises.push(\n          this.server\n            .stop()\n            .then(() => this.emit('serverEnd', <any>this.server))\n        );\n      }\n      if (this.tunnel) {\n        const tunnel = this.tunnel;\n        promises.push(\n          tunnel.stop().then(() => this.emit('tunnelStop', { tunnel }))\n        );\n      }\n      // We do not want to actually return an array of values, so chain a\n      // callback that resolves to undefined\n      return Promise.all(promises).then(\n        () => {},\n        error => this.emit('error', error)\n      );\n    });\n  }\n\n  protected _beforeRun() {\n    return super._beforeRun().then(() => {\n      const config = this.config;\n\n      const suite = this._rootSuite;\n      suite.grep = config.grep;\n      suite.timeout = config.defaultTimeout;\n      suite.bail = config.bail;\n\n      if (\n        // Only start the server if there are remote environments *and*\n        // either functionalSuites or browser suites\n        (config.environments.filter(isRemoteEnvironment).length > 0 &&\n          config.functionalSuites.length + config.browser.suites.length > 0) ||\n        // User can start the server without planning to run functional\n        // tests\n        config.serveOnly\n      ) {\n        const serverTask: CancellablePromise<void> = new Task<void>(\n          (resolve, reject) => {\n            const server: Server = new Server({\n              basePath: config.basePath,\n              executor: this,\n              port: config.serverPort,\n              runInSync: config.runInSync,\n              socketPort: config.socketPort\n            });\n\n            server\n              .start()\n              .then(() => {\n                this.server = server;\n                return this.emit('serverStart', server);\n              })\n              .then(resolve, reject);\n          }\n        );\n\n        // If we're in serveOnly mode, just start the server server.\n        // Don't create session suites or start a tunnel.\n        if (config.serveOnly) {\n          return serverTask.then(() => {\n            // In serveOnly mode we just start the server to static\n            // file serving and instrumentation. Return an\n            // unresolved Task to pause indefinitely until canceled.\n            return new Task<boolean>(resolve => {\n              process.on('SIGINT', () => {\n                resolve(true);\n              });\n            });\n          });\n        }\n\n        return serverTask\n          .then(() => {\n            const tunnelOptions = config.tunnelOptions;\n            if (config.tunnel === 'browserstack') {\n              const options = <BrowserStackOptions>tunnelOptions;\n              options.servers = options.servers || [];\n              options.servers.push(config.serverUrl);\n            }\n\n            if ('proxy' in config && !('proxy' in tunnelOptions)) {\n              tunnelOptions.proxy = config.proxy;\n            }\n\n            let TunnelConstructor = this.getTunnel(config.tunnel);\n            const tunnel = (this.tunnel = new TunnelConstructor(\n              this.config.tunnelOptions\n            ));\n\n            tunnel.on('downloadprogress', progress => {\n              this.emit('tunnelDownloadProgress', {\n                tunnel,\n                progress\n              });\n            });\n\n            tunnel.on('status', status => {\n              this.emit('tunnelStatus', {\n                tunnel,\n                status: status.status\n              });\n            });\n\n            config.capabilities = deepMixin(\n              tunnel.extraCapabilities,\n              config.capabilities\n            );\n\n            return this._createSessionSuites().then(() => {\n              return tunnel\n                .start()\n                .then(() => this.emit('tunnelStart', { tunnel }));\n            });\n          })\n          .then(() => {\n            return false;\n          });\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * Creates suites for each environment in which tests will be executed. This\n   * method will only be called if there are both environments and suites to\n   * run.\n   */\n  protected _createSessionSuites() {\n    const tunnel = this.tunnel!;\n    const config = this.config;\n\n    const leadfootServer = new LeadfootServer(tunnel.clientUrl, {\n      proxy: 'proxy' in config ? config.proxy : tunnel.proxy\n    });\n\n    const executor = this;\n\n    // Create a subclass of ProxiedSession here that will ensure the\n    // executor is set\n    class InitializedProxiedSession extends ProxiedSession {\n      executor = executor;\n      coverageVariable = config.coverageVariable;\n      baseUrl = config.functionalBaseUrl || config.serverUrl;\n    }\n\n    leadfootServer.sessionConstructor = InitializedProxiedSession;\n\n    return tunnel.getEnvironments().then(tunnelEnvironments => {\n      this._sessionSuites = resolveEnvironments(\n        config.capabilities,\n        config.environments.filter(isRemoteEnvironment),\n        tunnelEnvironments\n      ).map(environmentType => {\n        let session: ProxiedSession;\n\n        // Create a new root suite for each environment\n        const suite = new Suite({\n          name: String(environmentType),\n          publishAfterSetup: true,\n          grep: config.grep,\n          bail: config.bail,\n          tests: [],\n          timeout: config.defaultTimeout,\n          executor: this,\n\n          before() {\n            executor.log('Creating session for', environmentType);\n            return leadfootServer\n              .createSession<ProxiedSession>(environmentType)\n              .then(_session => {\n                session = _session;\n                this.executor.log('Created session:', session.capabilities);\n\n                let remote: Remote = <Remote>new Command(session);\n                remote.environmentType = new Environment(session.capabilities);\n                this.remote = remote;\n                this.sessionId = remote.session.sessionId;\n\n                // Update the name with details from the remote\n                // environment\n                this.name = remote.environmentType.toString();\n\n                const timeouts = config.functionalTimeouts;\n                let promise = Promise.resolve();\n                if (timeouts.executeAsync != null) {\n                  promise = promise.then(() =>\n                    remote.setExecuteAsyncTimeout(timeouts.executeAsync!)\n                  );\n                  this.executor.log(\n                    'Set remote executeAsync timeout to ',\n                    timeouts.executeAsync\n                  );\n                }\n                if (timeouts.find != null) {\n                  promise = promise.then(() =>\n                    remote.setFindTimeout(timeouts.find!)\n                  );\n                  this.executor.log(\n                    'Set remote find timeout to ',\n                    timeouts.find\n                  );\n                }\n                if (timeouts.pageLoad != null) {\n                  promise = promise.then(() =>\n                    remote.setPageLoadTimeout(timeouts.pageLoad!)\n                  );\n                  this.executor.log(\n                    'Set remote pageLoad timeout to ',\n                    timeouts.pageLoad\n                  );\n                }\n\n                return promise;\n              });\n          },\n\n          after() {\n            const remote = this.remote;\n\n            if (remote) {\n              const endSession = () => {\n                // Check for an error in this suite or a\n                // sub-suite. This check is a bit more involved\n                // than just checking for a local suite error or\n                // failed tests since sub-suites may have\n                // failures that don't result in failed tests.\n                function hasError(suite: Suite): boolean {\n                  if (suite.error != null || suite.numFailedTests > 0) {\n                    return true;\n                  }\n                  return suite.tests.filter(isSuite).some(hasError);\n                }\n                return tunnel.sendJobState(remote.session.sessionId, {\n                  success: !hasError(this)\n                });\n              };\n\n              if (\n                config.leaveRemoteOpen === true ||\n                (config.leaveRemoteOpen === 'fail' && this.numFailedTests > 0)\n              ) {\n                return endSession();\n              }\n\n              return remote.quit().finally(endSession);\n            }\n          }\n        });\n\n        // If browser-compatible unit tests were added to this executor,\n        // add a RemoteSuite to the session suite. The RemoteSuite will\n        // run the suites listed in config.browser.suites.\n        if (config.browser.suites.length > 0) {\n          suite.add(new RemoteSuite());\n        }\n\n        return suite;\n      });\n    });\n  }\n\n  /**\n   * Load functional test suites\n   */\n  protected _loadFunctionalSuites(): CancellablePromise<void> {\n    this._loadingFunctionalSuites = true;\n    const suites = this.config.functionalSuites;\n\n    // Set the instrumentation hooks if necessary\n    if (\n      this.config.functionalCoverage !== false &&\n      !this._unhookRequire &&\n      this.hasCoveredFiles\n    ) {\n      this._setInstrumentationHooks();\n    }\n\n    return Task.resolve(this._loader(suites))\n      .then(() => {\n        this.log('Loaded functional suites:', suites);\n      })\n      .finally(() => {\n        this._loadingFunctionalSuites = false;\n      });\n  }\n\n  /**\n   * Override Executor#_loadSuites to set instrumentetion hooks before loading\n   * suites\n   */\n  protected _loadSuites(): CancellablePromise<void> {\n    // Don't load suites if there isn't a local environment, or if we're\n    // in serveOnly mode\n    if (\n      !this.config.environments.some(isLocalEnvironment) ||\n      this.config.serveOnly\n    ) {\n      return Task.resolve();\n    }\n\n    if (this.hasCoveredFiles) {\n      this._setInstrumentationHooks();\n    }\n\n    return super._loadSuites();\n  }\n\n  protected _resolveConfig() {\n    return super._resolveConfig().then(() => {\n      const config = this.config;\n\n      if (config.environments.length === 0) {\n        this.log(\"Adding default 'node' environment\");\n        config.environments.push({ browserName: 'node' });\n      }\n\n      if (!config.internPath) {\n        config.internPath = dirname(dirname(__dirname));\n\n        // If internPath isn't under cwd, intern is most likely\n        // symlinked into the project's node_modules. In that case, use\n        // the package location as resolved from the project root.\n        if (config.internPath.indexOf(process.cwd()) !== 0) {\n          // nodeResolve will resolve to index.js; we want the base\n          // intern directory\n          config.internPath = dirname(\n            nodeResolve('intern', {\n              basedir: process.cwd()\n            })\n          );\n        }\n      }\n\n      ['basePath', 'internPath'].forEach(property => {\n        const key = <keyof Config>property;\n        config[key] = normalizePathEnding(resolve(<string>config[key]), sep);\n      });\n\n      if (config.benchmarkConfig) {\n        config.reporters.push({\n          name: 'benchmark',\n          options: config.benchmarkConfig\n        });\n      }\n\n      this._instrumentBasePath = config.basePath;\n      this._coverageFiles = [];\n\n      if (config.coverage) {\n        // Coverage file entries should be absolute paths\n        this._coverageFiles = expandFiles(config.coverage).map(path =>\n          resolve(path)\n        );\n      }\n\n      if (!config.serverUrl) {\n        config.serverUrl = `http://localhost:${config.serverPort}/`;\n      }\n\n      if (config.connectTimeout == null) {\n        config.connectTimeout = 30000;\n      }\n\n      if (config.heartbeatInterval == null) {\n        const idleTimeout = config.capabilities['idle-timeout'];\n        config.heartbeatInterval = idleTimeout == null ? 60 : idleTimeout;\n      }\n\n      // Ensure URLs end with a '/'\n      ['serverUrl', 'functionalBaseUrl'].forEach(key => {\n        const property = <keyof Config>key;\n        if (config[property]) {\n          config[property] = (<string>config[property]).replace(/\\/*$/, '/');\n        }\n      });\n\n      // Set a default name for a WebDriver session\n      if (!config.capabilities.name) {\n        config.capabilities.name = 'intern';\n      }\n\n      // idle-timeout isn't universally supported, but keep setting it by\n      // default\n      if (config.capabilities['idle-timeout'] == null) {\n        config.capabilities['idle-timeout'] = config.heartbeatInterval;\n      }\n\n      const buildId = process.env.TRAVIS_COMMIT || process.env.BUILD_TAG;\n      if (buildId) {\n        config.capabilities.build = buildId;\n      }\n\n      // Expand suite globs\n      config.functionalSuites = expandFiles(config.functionalSuites);\n\n      // Expand suite globs into the node and browser objects\n      config.node.suites = expandFiles([\n        ...config.suites,\n        ...config.node.suites\n      ]);\n      config.browser.suites = expandFiles([\n        ...config.suites,\n        ...config.browser.suites\n      ]);\n\n      // Clear out the suites list after combining the suites\n      delete config.suites;\n\n      // Install the instrumenter in resolve config so it will be able to\n      // handle suites\n      this._instrumenter = createInstrumenter(\n        Object.assign(\n          {},\n          {\n            coverageVariable: config.coverageVariable,\n            ...config.instrumenterOptions\n          },\n          {\n            preserveComments: true,\n            produceSourceMap: true\n          }\n        )\n      );\n    });\n  }\n\n  protected _runTests(): CancellablePromise<void> {\n    let testTask: CancellablePromise<void>;\n\n    return new Task<void>(\n      (resolve, reject) => {\n        if (this._rootSuite.tests.length > 0) {\n          testTask = this._rootSuite.run();\n        } else {\n          testTask = Task.resolve();\n        }\n\n        testTask\n          .then(() => {\n            if (!this._sessionSuites) {\n              return;\n            }\n            return this._loadFunctionalSuites().then(\n              () => (testTask = this._runRemoteTests())\n            );\n          })\n          .then(resolve, reject);\n      },\n      () => {\n        if (testTask) {\n          testTask.cancel();\n        }\n      }\n    ).finally(() => {\n      // For all files that are marked for coverage that weren't read,\n      // read the file and instrument the code (adding it to the overall\n      // coverage map)\n      const coveredFiles = this._coverageMap.files();\n      const uncoveredFiles = this._coverageFiles!.filter(filename => {\n        return coveredFiles.indexOf(filename) === -1;\n      });\n      uncoveredFiles.forEach(filename => {\n        try {\n          const code = readFileSync(filename, { encoding: 'utf8' });\n          this.instrumentCode(code, filename);\n        } catch (_error) {}\n      });\n    });\n  }\n\n  protected _runRemoteTests(): CancellablePromise<void> {\n    const config = this.config;\n    const sessionSuites = this._sessionSuites!;\n    const queue = new FunctionQueue(config.maxConcurrency || Infinity);\n\n    this.log(\n      'Running',\n      sessionSuites.length,\n      'suites with maxConcurrency',\n      config.maxConcurrency\n    );\n\n    const runTask = new Task(\n      (resolve, reject) => {\n        Task.all(\n          sessionSuites.map(suite => {\n            this.log('Queueing suite', suite.name);\n            return queue.enqueue(() => {\n              this.log('Running suite', suite.name);\n              return suite.run();\n            });\n          })\n        ).then(resolve, reject);\n      },\n      () => {\n        this.log('Canceling remote tests');\n        queue.clear();\n      }\n    );\n\n    return runTask.then(() => {}).finally(() => {\n      if (config.functionalCoverage !== false) {\n        // Collect any local coverage generated by functional tests\n        this.log('Emitting functional coverage');\n        return this._emitCoverage('functional tests');\n      }\n    });\n  }\n\n  /**\n   * Adds hooks for code coverage instrumentation in the Node.js loader.\n   */\n  protected _setInstrumentationHooks() {\n    hookRunInThisContext(\n      filename => this.shouldInstrumentFile(filename),\n      (code, filename) => this.instrumentCode(code, filename)\n    );\n    this._unhookRequire = hookRequire(\n      filename => this.shouldInstrumentFile(filename),\n      (code, filename) => this.instrumentCode(code, filename)\n    );\n  }\n\n  /**\n   * Removes instrumentation hooks\n   */\n  protected _removeInstrumentationHooks() {\n    unhookRunInThisContext();\n    if (this._unhookRequire) {\n      this._unhookRequire();\n      this._unhookRequire = undefined;\n    }\n  }\n}\n\nexport { Config, EnvironmentSpec };\n\nexport interface NodePlugins extends Plugins {\n  tunnel: typeof Tunnel;\n}\n\nexport interface Remote extends Command<any> {\n  environmentType?: Environment;\n  setHeartbeatInterval(delay: number): Command<any>;\n}\n\nexport interface TunnelMessage {\n  tunnel: Tunnel;\n  progress?: DownloadProgressEvent;\n  status?: string;\n}\n\nexport interface NodeEvents extends Events {\n  /** A test server has stopped */\n  serverEnd: Server;\n\n  /** A test server was started */\n  serverStart: Server;\n\n  /** Emitted as a Tunnel executable download is in process */\n  tunnelDownloadProgress: TunnelMessage;\n\n  /** A WebDriver tunnel has been opened */\n  tunnelStart: TunnelMessage;\n\n  /** A status update from a WebDriver tunnel */\n  tunnelStatus: TunnelMessage;\n\n  /** A WebDriver tunnel has been stopped */\n  tunnelStop: TunnelMessage;\n}\n\n/**\n * A basic FIFO function queue to limit the number of currently executing\n * asynchronous functions.\n */\nclass FunctionQueue {\n  readonly maxConcurrency: number;\n  queue: QueueEntry[];\n  activeTasks: CancellablePromise<any>[];\n  funcTasks: CancellablePromise<any>[];\n\n  constructor(maxConcurrency: number) {\n    this.maxConcurrency = maxConcurrency;\n    this.queue = [];\n    this.activeTasks = [];\n    this.funcTasks = [];\n  }\n\n  enqueue(func: () => CancellablePromise<any>) {\n    const funcTask = new Task((resolve, reject) => {\n      this.queue.push({ func, resolve, reject });\n    });\n    this.funcTasks.push(funcTask);\n\n    if (this.activeTasks.length < this.maxConcurrency) {\n      this.next();\n    }\n\n    return funcTask;\n  }\n\n  clear() {\n    this.activeTasks.forEach(task => task.cancel());\n    this.funcTasks.forEach(task => task.cancel());\n    this.activeTasks = [];\n    this.funcTasks = [];\n    this.queue = [];\n  }\n\n  next() {\n    if (this.queue.length > 0) {\n      const { func, resolve, reject } = this.queue.shift()!;\n      const task = func()\n        .then(resolve, reject)\n        .finally(() => {\n          // Remove the task from the active task list and kick off\n          // the next task\n          pullFromArray(this.activeTasks, task);\n          this.next();\n        });\n      this.activeTasks.push(task);\n    }\n  }\n}\n\ninterface QueueEntry {\n  func: () => CancellablePromise<any>;\n  resolve: () => void;\n  reject: () => void;\n}\n\nfunction isRemoteEnvironment(environment: EnvironmentSpec) {\n  return environment.browserName !== 'node';\n}\n\nfunction isLocalEnvironment(environment: EnvironmentSpec) {\n  return !isRemoteEnvironment(environment);\n}\n"]}